#ifndef harvester_api_h__
#define harvester_api_h__

#include "harvester_api_defines.h"

/**
 * Resets current state (clear all the tasks, discards harvesting history that hasn'tn been flushed yet).
 * This function has to be called prior to the exectuion of the harvesting calls chain (reset -> harvest logs & seismic data & soh & timing soh -> flush history)
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.8jgxtg19d448
 */
EXPORT_FUNC void reset();

/**
 * THis function sets basic client information to be used in other functions.
 * Client name is only needed for the moment. Is the subject of expantion if anything extra needed out of the client in library core.
 */
EXPORT_FUNC void set_client_info(const char* name);

/**
 * Lists available digitizers and stores them into operation's responses queue.
 * Response for this operation can be retrieved by 'get_op_responses(opId)' which returns array of responses for operation
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.fhogf2n6by56 for response description
 * @return  operation ID (opId) that responses can be tracked by (using "get_op_responses(opId)")
 */
EXPORT_FUNC uint32_t list();

/**
 * Formats digitizer.
 * Response for this operation can be retrieved by 'get_op_responses(opId)' which returns array of responses for operation
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.i3dtfs7gdc95 for response description
 * @param  libPath    digitizer path
 * @param  configPath JSON configuration path
 * @return  operation ID (opId) that responses can be tracked by (using "get_op_responses(opId)")
 */
EXPORT_FUNC uint32_t format(const char* libPath, const char* configPath);

/**
 * Gets digitizer info
 * Response for this operation can be retrieved by 'get_op_responses(opId)' which returns array of responses for operation
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.1u8u1nomy6hc for response description
 * @param   path    digitizer path
 * @return  operation ID (opId) that responses can be tracked by (using "get_op_responses(opId)")
 */
EXPORT_FUNC uint32_t get_digitizer_info(const char* path);

/**
 * Starts data harvesting operation and stores response into it's responses queue.
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.e24hh6gbocd8 for response description
 * @param   libPath       digitizer path
 * @param   paramsJSON    HarvestParams JSON-string
 * @param   updateStep    update step to show the progress (0.01 - each 1%, 0.1 - each 10%, etc. 0.f - each element processed)
 * @return  Operation id If operation was started, OP_INVALID_EXECUTION_ID (0) - when failed
 */
EXPORT_FUNC uint32_t harvest_data(const char* libPath, const char* paramsJSON, const float updateStep);

/**
 * Starts SOH harvesting operation and stores response into it's responses queue.
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.6kx2whchlb91 for response description
 * @param   libPath       digitizer path
 * @param   paramsJSON    HarvestParams JSON-string
 * @param   channelsMask  channels bitmask to harvest
 * @param   updateStep    update step to show the progress (0.01 - each 1%, 0.1 - each 10%, etc. 0.f - each element processed)
 * @return  Operation id If operation was started, OP_INVALID_EXECUTION_ID (0) - when failed
 */
EXPORT_FUNC uint32_t harvest_soh(const char* libPath, const char* paramsJSON, const uint32_t channelsMask, const float updateStep);

/**
 * Starts Timing SOH harvesting (ClockStatus) operation and stores response into it's responses queue.
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.6kx2whchlb91 for response description
 * @param   libPath       digitizer path
 * @param   paramsJSON    HarvestParams JSON-string
 * @param   updateStep    update step to show the progress (0.01 - each 1%, 0.1 - each 10%, etc. 0.f - each element processed)
 * @return  Operation id If operation was started, OP_INVALID_EXECUTION_ID (0) - when failed
 */
EXPORT_FUNC uint32_t harvest_timing_soh(const char* libPath, const char* paramsJSON, const float updateStep);

/**
 * Starts forensic logs harvesting operation and stores response into it's responses queue.
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit?ts=5c7d8df7#heading=h.xcp95fdj843w for response description
 * @param   libPath       digitizer path
 * @param   paramsJSON    HarvestParams JSON-string
 * @param   updateStep    update step to show the progress (0.01 - each 1%, 0.1 - each 10%, etc. 0.f - each element processed)
 * @return  Operation id If operation was started, OP_INVALID_EXECUTION_ID (0) - when failed
 */
EXPORT_FUNC uint32_t harvest_logs(const char* libPath, const char* paramsJSON, const float updateStep);

/**
 * Loads harvesting history operation and stores response into it's responses queue (each response stands for the single history record).
 * Response for this operation can be retrieved by 'get_op_responses(opId)' which returns array of responses for operation
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.473ta0tcfuv7 for response description
 * !!!NOTE: due to JS limitation, all timestamps are exposed in Node.js time instead of nanoseconds
 * @param   libPath       digitizer path
 * @return  Operation id If operation was started, OP_INVALID_EXECUTION_ID (0) - when failed
 */
EXPORT_FUNC uint32_t load_harvesting_history(const char* libPath);


/**
 * Flushes current harvesting history to PSF and stores response into it's responses queue (each response stands for the single history record).
 * Response for this operation can be retrieved by 'get_op_responses(opId)' which returns array of responses for operation
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.473ta0tcfuv7 for response description
 * !!!NOTE: due to JS limitation, all timestamps are exposed in Node.js time instead of nanoseconds
 * @param   libPath       digitizer path
 * @return  Operation id If operation was started, OP_INVALID_EXECUTION_ID (0) - when failed
 */
EXPORT_FUNC uint32_t flush_harvesting_history(const char* libPath);

/**
 * Gets volume information and stores responses into responses queue.
 * Response for this operation can be retrieved by 'get_op_responses(opId)' which returns array of responses for operation
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.q3p5hpb9j9s for response description
 * @param   libPath       digitizer path
 * @param   volumeId      volume identificator to request information for (see https://docs.google.com/document/d/1MmqKtqdSDSwQqB5bv-6PxX23_eUgODdgNfh0yyGyZy4/edit?pli=1#heading=h.k7az55yf4v7s)
 * @return  Operation id If operation was started, OP_INVALID_EXECUTION_ID (0) - when failed
 */
EXPORT_FUNC uint32_t get_volume_info(const char* libPath, const uint32_t volumeId);

/**
 * Reads volume content and stores JSON-serialized messages into responses queue.
 * Response for this operation can be retrieved by 'get_op_responses(opId)' which returns array of responses for operation
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.q3p5hpb9j9s for response description
 * @param   libPath       digitizer path
 * @param   volumeId      volume identificator to request information for (see https://docs.google.com/document/d/1MmqKtqdSDSwQqB5bv-6PxX23_eUgODdgNfh0yyGyZy4/edit?pli=1#heading=h.k7az55yf4v7s)
 * @return  Operation id If operation was started, OP_INVALID_EXECUTION_ID (0) - when failed
 */
EXPORT_FUNC uint32_t read_volume(const char* libPath, const uint32_t volumeId);

/**
 * Returns latest nResponsesMax for specific operation in JSON-formatted array (array of JSON_formatted responses string)
 * See https://docs.google.com/document/d/1HvBPK39Fuk9o6qqtOPeeNkNbTGAO64TkRSARmRnFIAI/edit#heading=h.wplfa4d7pa5c for response description
 * @param   executionId    operation execution ID
 * @param   nResponsesMax  maximum amount of responses to be loaded. NOTE!: the older responses will be discarded
 * @return  JSON-formatted string (array of JSON-formatted string of responses) (uses static string buffer, so the result SHOULD NEVER be freed on caller's side)
 */
EXPORT_FUNC const char* get_op_responses(const uint32_t executionId, const uint32_t nResponsesMax);

/**
 * Stops operation
 * @param   executionId    operation execution ID
 * @return  true If operation stop requested, false - otherwise (operation is not running or cannot be stopped)
 */
EXPORT_FUNC bool stop_operation(const uint32_t executionId);

#endif //harvester_api_h__
