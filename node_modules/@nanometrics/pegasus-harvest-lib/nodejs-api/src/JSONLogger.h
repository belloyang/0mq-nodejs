#ifndef JSONLogger_h__
#define JSONLogger_h__

#include "IAsyncTask.h"

#include <Logger/ILogger.h>

#include <buffers.h>
#include <Utils/json_utils.h>

#include <string>
#include <memory>

class JSONLogger : public ILogger
{
public:
  JSONLogger(IAsyncTask* task, const std::shared_ptr<ILogger>& fallbackLogger);
  virtual ~JSONLogger() = default;

private:
  virtual void _logErrorImpl(const char* scope, const uint32_t category, const uint32_t errorCode, const char* format, va_list args) __OVERRIDES__(ILogger);
  virtual void _logWarningImpl(const char* scope, const char* format, va_list args)  __OVERRIDES__(ILogger);
  virtual void _logInfoImpl(const char* scope, const char* format, va_list args)  __OVERRIDES__(ILogger);
  virtual void _logDebugImpl(const char* scope, const char* format, va_list args)  __OVERRIDES__(ILogger);
  virtual void _flushImpl() __OVERRIDES__(ILogger);

private:
  IAsyncTask* m_task;
  const std::shared_ptr<ILogger> m_fallbackLogger; //logs that do not go as JSON responses go to this logger
  rapidjson::MemoryPoolAllocator<> m_allocator;
  std::unique_ptr<buffer_base<char>> m_buffer;
};
#endif //JSONLogger_h__
