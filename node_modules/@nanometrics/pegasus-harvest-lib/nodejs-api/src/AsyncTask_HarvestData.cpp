#include "AsyncTask_HarvestData.h"
#include "JSONLogger.h"
#include "ProgressDelegate_Harvest.h"
#include "HarvestParamsParser.h"

#include <Operations/operations.h>

AsyncTask_HarvestData::AsyncTask_HarvestData(const std::string& libPath,
  const std::string& paramsJSON,
  const float updateStep,
  const std::shared_ptr<IHasher>& hasher,
  const std::shared_ptr<ILogger>& logger,
  const std::shared_ptr<IClient>& client)
  : IAsyncTask("harvest_data", hasher, std::make_shared<JSONLogger>(this, logger))
  , m_libPath(libPath)
  , m_paramsJSON(paramsJSON)
  , m_updateStep(updateStep)
  , m_client(client)
  , m_operation(nullptr)
{
  __DEV_CALLSTACK_FUNC__;
}

void AsyncTask_HarvestData::_runImpl(const std::shared_ptr<IContext>& context)
{
  __DEV_CALLSTACK_FUNC__;
  // parse harvesting params
  sHarvestParams params;
  if (HarvestParamsParser(m_logger).parse(m_paramsJSON, params))
  {
    // create harvesting operation with progress delegate
    m_operation = std::make_shared<Operation_HarvestData>(m_libPath, params, m_client,
      std::make_shared<ProgressDelegate_Harvest>(this, context, m_updateStep));
    // execute operation
    m_operation->execute(m_hasher, m_logger);
    // destroy operation
    m_operation = nullptr;
  }
  else
  {
    this->pushCompletionData(eOperationStatus::OP_STATUS_FAILED);
  }
}

bool AsyncTask_HarvestData::_stopImpl()
{
  __DEV_CALLSTACK_FUNC__;
  if (m_operation != nullptr)
    return m_operation->stop();
  return false;
}
