#include "HarvestParamsParser.h"

#include <PlatformUtils/PlatformUtils.h>

#include "../nodejs_utils.h"

HarvestParamsParser::HarvestParamsParser(const std::shared_ptr<ILogger>& logger)
: IJSONParser<sHarvestParams>(logger)
{
  __DEV_CALLSTACK_FUNC__;
  this->_registerFunctor("range",          PARSE_FUNCTOR(HarvestParamsParser::_parseRange));
  this->_registerFunctor("output_path",    PARSE_FUNCTOR(HarvestParamsParser::_parseOutputPath));
  this->_registerFunctor("output_pattern", PARSE_FUNCTOR(HarvestParamsParser::_parseOutputPattern));
  this->_registerFunctor("hours_per_file", PARSE_FUNCTOR(HarvestParamsParser::_parseDuration));
}

bool HarvestParamsParser::_parseBoundary(const rapidjson::Value& value, sHarvestParams::sBoundary& output) const
{
  __DEV_CALLSTACK_FUNC__;
  if (!value.IsObject())
  {
    m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eHarvAPIErrorCode::HARVAPI_ERROR_INVALID_ARGUMENT,
      "boundary is not an object");
    return false;
  }
  if (!value.HasMember("time_microsecs") || !value["time_microsecs"].IsInt64())
  {
    m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eHarvAPIErrorCode::HARVAPI_ERROR_INVALID_ARGUMENT,
      "'time_microsecs' is absent or is not Int64");
    return false;
  }
  const nodejs_time_t timeMicroSecs = static_cast<nodejs_time_t>(value["time_microsecs"].GetInt64());
  output.time = nodejs_utils::nodejstime_to_timestamp(timeMicroSecs);
  if (value.HasMember("sequence_number"))
  {
    if (value["sequence_number"].IsUint())
    {
      output.sequence_number = static_cast<sequence_number_t>(value["sequence_number"].GetUint());
    }
    else
    {
      m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eHarvAPIErrorCode::HARVAPI_ERROR_INVALID_ARGUMENT,
        "'sequence_number' is not UInt32");
      return false;
    }
  }
  return true;
}

bool HarvestParamsParser::_parseRange(const rapidjson::Value& value, sHarvestParams& output) const
{
  __DEV_CALLSTACK_FUNC__;
  // parse lower & upper boundaries
  if (!value.HasMember("lower") || !this->_parseBoundary(value["lower"], output.lower) ||
      !value.HasMember("upper") || !this->_parseBoundary(value["upper"], output.upper))
  {
    return false;
  }
  // parse ok
  return true;
}

bool HarvestParamsParser::_parseOutputPath(const rapidjson::Value& value, sHarvestParams& output) const
{
  __DEV_CALLSTACK_FUNC__;
  if (value.IsString())
  {
    output.outputDir = PlatformUtils::getInstance()->normalize(value.GetString());
    return true;
  }
  return false;
}

bool HarvestParamsParser::_parseOutputPattern(const rapidjson::Value& value, sHarvestParams& output) const
{
  __DEV_CALLSTACK_FUNC__;
  if (value.IsString())
  {
    output.outputPattern = PlatformUtils::getInstance()->normalize(value.GetString());
    return true;
  }
  return false;
}

bool HarvestParamsParser::_parseDuration(const rapidjson::Value& value, sHarvestParams& output) const
{
  __DEV_CALLSTACK_FUNC__;
  if (value.IsUint())
  {
    output.nHoursPerFile = value.GetUint();
    return true;
  }
  return false;
}
