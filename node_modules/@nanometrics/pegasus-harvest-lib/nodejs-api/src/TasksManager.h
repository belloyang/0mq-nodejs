#ifndef TasksManager_h__
#define TasksManager_h__

#include "IAsyncTask.h"
#include "IContext.h"

#include <Logger/ILogger.h>

#include <vector>
#include <memory>

static const uint32_t OP_INVALID_EXECUTION_ID = 0;

class TasksManager
{
public:
  TasksManager(const std::shared_ptr<ILogger>& logger);
  virtual ~TasksManager() = default;

  void reset();

  uint32_t run(const std::shared_ptr<IAsyncTask>& task);

  std::shared_ptr<IAsyncTask> getTask(const uint32_t exectuionId) const;
  bool deleteTask(const uint32_t executionId);

private:
  const std::shared_ptr<ILogger> m_logger;
  std::shared_ptr<IContext> m_context;
  typedef std::vector< std::shared_ptr<IAsyncTask> > TasksQueue;
  TasksQueue m_tasks;
  uint32_t m_nTasks;
};

#endif //TasksManager_h__
