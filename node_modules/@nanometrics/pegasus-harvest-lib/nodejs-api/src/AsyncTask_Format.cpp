#include "AsyncTask_Format.h"

#include <Logger/ChainedLogger.h>
#include "JSONLogger.h"
#include <Utils/json_utils.h>

class Format_Delegate : public Operation_Format::IDelegate
{
public:
  Format_Delegate(IAsyncTask* pTask)
  : m_pTask(pTask)
  {
    __DEV_CALLSTACK_FUNC__;
    __ASSERT__(pTask != nullptr && "pTask cannot be nullptr here!");
  }
  virtual ~Format_Delegate() = default;

  virtual void onStageChanged(IOperation* /*pOperation*/, const eStage currentStage) __OVERRIDES__(Operation_Format::IDelegate)
  {
    __DEV_CALLSTACK_FUNC__;
    //tss_nodejsapi::build data JSON object
    rapidjson::Value dataObj(rapidjson::Type::kObjectType);
    {
      dataObj.AddMember("stage", currentStage, m_allocator);
    }
    //tss_harvnodejs::push response
    m_pTask->pushResponseData(dataObj);
  }
  virtual void onCompleted(IOperation* /*pOperation*/, const eOperationStatus status) __OVERRIDES__(Operation_Format::IDelegate)
  {
    __DEV_CALLSTACK_FUNC__;
    m_pTask->pushCompletionData(status);
  }

private:
  IAsyncTask* m_pTask;
  rapidjson::MemoryPoolAllocator<> m_allocator;
};

AsyncTask_Format::AsyncTask_Format(const std::string& libPath, const std::string& configPath,
  const std::shared_ptr<IHasher>& hasher, const std::shared_ptr<ILogger>& logger)
: IAsyncTask("format", hasher, std::make_shared<JSONLogger>(this, logger))
, m_libPath(libPath)
, m_configPath(configPath)
, m_operation(nullptr)
{
  __DEV_CALLSTACK_FUNC__;
}

void AsyncTask_Format::_runImpl(const std::shared_ptr<IContext>& context)
{
  __DEV_CALLSTACK_FUNC__;
  m_operation = std::make_shared<Operation_Format>(m_libPath, true, m_configPath,
    std::make_shared<Format_Delegate>(this));
  //tss_harv::execute operation
  m_operation->execute(m_hasher, m_logger);
  //tss_harv::destroy operation
  m_operation = nullptr;
}

bool AsyncTask_Format::_stopImpl()
{
  __DEV_CALLSTACK_FUNC__;
  if (m_operation != nullptr)
    return m_operation->stop();
  return false;
}
