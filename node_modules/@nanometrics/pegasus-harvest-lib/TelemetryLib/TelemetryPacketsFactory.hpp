#ifndef TelemetryPacketsFactory_hpp__
#define TelemetryPacketsFactory_hpp__

#include "TelemetryApiDefines.hpp"

#include "LiveSohNotificationData.h"
#include "DigitizerInfo.h"

#include <Logger/ILogger.h>
#include <DataTypes/SensorTimeSeries/MsgSensorInput.h>

#include <memory>
#include <vector>

/**
 * This class represents Telemetry packet builder (factory).
 * It's shared between the MCU and Telemetry Client code base.
 * That's why we have abstractions for all platform-specific things (ILogger).
 */
class TelemetryPacketsFactory
{
public:
  TelemetryPacketsFactory(const std::shared_ptr<ILogger>& logger);
  virtual ~TelemetryPacketsFactory() = default;

  bool createTimeSeriesStartStreamingRequest(TelemetryAPI::Packet& output, const uint8_t channels);
  bool createTimeSeriesStopStreamingRequest(TelemetryAPI::Packet& output);
  bool createTimeSeriesStreamingResponse(TelemetryAPI::Packet& output, const MsgSensorInput::Header* data, const uint32_t sequenceNumber);

  bool createCurrentSOHRequest(TelemetryAPI::Packet& output);
  bool createCurrentSOHResponse(TelemetryAPI::Packet& output, const LiveSohNotificationData* data);

  bool createDigitizerInfoRequest(TelemetryAPI::Packet& output);
  bool createDigitizerInfoResponse(TelemetryAPI::Packet& output, const DigitizerInfo* data);

  bool createAcknowledgmentResponse(TelemetryAPI::Packet& output, const uint16_t requestType,
    const TelemetryAPI::Error errorCode);

private:
  void _startPacket(TelemetryAPI::Packet& output, const uint16_t type) const;
  void _finalizePacket(TelemetryAPI::Packet& output, const uint16_t payloadSize) const;

private:
  const std::shared_ptr<ILogger> m_logger;
};

#endif // TelemetryPacketsFactory_hpp__
