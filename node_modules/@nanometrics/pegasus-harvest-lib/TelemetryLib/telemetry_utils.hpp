#ifndef telemetry_utils_hpp__
#define telemetry_utils_hpp__

#include "../shared_defines.h"

#include "LiveSohNotificationData.h"
#include <DataTypes/SensorTimeSeries/MsgSensorInput.h>
#include <Utils/endianness_utils.h>

namespace telemetry_utils
{
  template <typename T> FORCE_INLINE void swap(T& value)
  {
    value = endianness_utils::swap<T>(value);
  }

  template <> FORCE_INLINE void swap(TelemetryAPI::Packet::Header& value)
  {
    swap(value.type);
    swap(value.payloadSize);
  }

  template <> FORCE_INLINE void swap(LiveSohNotificationData& value)
  {
    // common data
    swap(value.version);
    swap(value.timestamp);
    swap(value.uptime);
    // health inputs only several metrics are being taken from SOH HealthInput packet
    swap(value.healthInputs.batteryVolts);
    swap(value.healthInputs.mainCurrentAmps);
    swap(value.healthInputs.systemTempDegrees);
    swap(value.healthInputs.sensorCurrentAmps);
    swap(value.healthInputs.systemPressurePascals);
    // current SOH digest
    swap(value.digest.current.sensor);
    swap(value.digest.current.clock);
    swap(value.digest.current.power);
    swap(value.digest.current.record);
    // clock status data
    swap(value.clockStatus.nSatellites);
    swap(value.clockStatus.timeUncertaintyMicroSeconds);
    swap(value.clockStatus.gnssExternalAntenna);
    swap(value.clockStatus.location.latitude);
    swap(value.clockStatus.location.longitude);
    swap(value.clockStatus.location.altitude);
    // Sensor SOH lines
    swap(value.sohLines.sohLine1Volts);
    swap(value.sohLines.sohLine2Volts);
    swap(value.sohLines.sohLine3Volts);
    swap(value.sohLines.sohLine4Volts);
    // OBS and other extended timing status (extension)
    swap(value.extendedTiming.flags);
    swap(value.extendedTiming.seascanPhase.dtNs);
    swap(value.extendedTiming.seascanPhase.rangeNs);
    swap(value.extendedTiming.gnssPpsTime.gnssSecs);
    swap(value.extendedTiming.gnssPpsTime.systemNs);
    swap(value.extendedTiming.lastSyncTimeSecs);
    swap(value.extendedTiming.gnssLockDurationSeconds);
  }

  template <> FORCE_INLINE void swap(MsgSensorInput::Header& value)
  {
    swap(value.timestamp);
    swap(value.input);
    swap(value.flags);
    uint16_t mediaType = value.media_type;
    swap(mediaType);
    value.media_type = static_cast<PDB_eMediaType_t>(mediaType);
    swap(value.n_samples);
    swap(value.sample_rate.value);
    swap(value.soft_gain);
  }
}

#endif // telemetry_utils_hpp__
