#ifndef IPlatformUtilsImpl_h__
#define IPlatformUtilsImpl_h__

#include "../libio_defines.h"

#include "../Logger/ILogger.h"

#include <string>
#include <memory>
#include <thread>

#if defined(DEV_PLATFORM_STM32)
  typedef void* ThreadHandle_t;
#else
  // C++11 std::thread class is used in the project ->
  // use its native handle type to perform a control
  // Actually, std::thread::native_handle_type is the same as Win32 API expects HANDLE
  // and pthread library expects pthread_t
  typedef std::thread::native_handle_type  ThreadHandle_t;
#endif

typedef struct
{
  //! Operating system name and version; text string up to 64 characters long. Null-padded at end if length is less than maximum.Eg. Microsoft Windows 10 Pro
  //Eg. Ubuntu Linux 18.10, 
  //Eg. macOS 10.14.4 Mojave
  std::string os;
  
  //! Kernel name and version
  //Eg. 4.18.0 - 17 - generic, x86_64
  std::string kernel;
  
  //! Platform make and model
  //Eg.Gnarbox 1 TB,Dell OptiPlex 7050, etc.
  std::string platform;

  //! Platform BIOS name and version
  //Eg. Dell Inc., 1.11.1, 11/29/2018
  std::string bios;

  //! Platform CPU make and model
  //Eg.Intel Core i7 7700
  std::string cpu;

  //! Platform RAM information
  //Eg. 32 GiBytes
  std::string ram;

  //! Platform disk to which harvested data was written
  //Eg.PC401 NVMe SK hynix 512GB
  std::string disk;
} sPlatformDesc_t;

class IPlatformUtilsImpl
{
protected:
  IPlatformUtilsImpl(const std::shared_ptr<ILogger>& logger) : m_logger(logger) {}

public:
  virtual ~IPlatformUtilsImpl() {}

  virtual bool isAbsolutePath(const std::string& path) const = 0;
  virtual bool isDirExists(const std::string& path) const = 0;
  virtual std::string getCurrentDirectory() const = 0;
  virtual bool makePath(const std::string& path) const = 0;
  virtual std::string join(const std::string& path1, const std::string& path2) const = 0;
  virtual std::string normalize(const std::string& path) const = 0;

  virtual bool isPhysicalDrivePath(const std::string& path) const = 0;
  virtual std::string fixDevicePath(const std::string& path) const = 0;
  virtual std::string mapLogicalPathToPhysical(const std::string& path) const = 0;
  virtual bool unmountAll(const std::string& path) const = 0;

  virtual uint32_t getLastErrorCode() const = 0;
  virtual std::string getErrorString(const uint32_t errorID) const = 0;
  virtual std::string getLastErrorString() const = 0;
  virtual const sPlatformDesc_t& getPlatformDesc() const = 0;

  virtual ThreadHandle_t getCurrentThread() const = 0;
  virtual bool setThreadAffinityMask(ThreadHandle_t handle, const uint32_t mask) const = 0;
  virtual uint32_t getCurrentProcessorNumber() const = 0;

protected:
  const std::shared_ptr<ILogger> m_logger;
};

#endif //IPlatformUtilsImpl_h__
