#ifndef PlatformUtils_h__
#define PlatformUtils_h__

#include "../libio_defines.h"

#include "../PlatformUtils/IPlatformUtilsImpl.h"

class PlatformUtils
{
private:
  PlatformUtils();
  ~PlatformUtils();

public:
  static PlatformUtils* getInstance();

  FORCE_INLINE const std::shared_ptr<ILogger>& getLogger() const { return m_logger; }

  /**
   * Checks if path specified is absolute
   * @param path  path to check
   * @return  true if path is absolute, false - otherwise (relative path)
   */
  bool isAbsolutePath(const std::string& path) const;
  /**
   * Checks if directory exists
   * @param path to check
   * @return  true if directory exists, false - otherwise
   */
  bool isDirExists(const std::string& path) const;
  /**
   * Returns current directory
   * @return  current directory
   */
  std::string getCurrentDirectory() const;
  /**
   * Creates directories tree
   * @param path  path to create
   * @return  true if tree was created; false - otherwise (tree creation failed at some point). Path can be built partially
   */
  bool makePath(const std::string& path) const;
  /**
   * Appends two paths into single
   * @param path1 first path
   * @param path2 seconds path
   * @return  joint path
   */
  std::string join(const std::string& path1, const std::string& path2) const;

  /**
   * Normalizes path (fixed path-separators, etc.)
   * @return	normalized path
   */
  std::string normalize(const std::string& path) const;

  /**
   * Resolves path (appends current directory for relative path; returns path for absolute path)
   * @param path  path to resolve
   * @return
   */
  std::string resolvePath(const std::string& path) const;
  /**
   * Returns base directory of the current path (the directory of the last entity in the path)
   * @param path  input path
   * @return  base directory in the current path (for the last entity)
   */
  std::string getBaseDir(const std::string& path) const;
  /**
   * Returns base name (last entity name)
   * @param path  input path
   * @return  last entity name specified by path (either folder or filename)
   */
  std::string getBaseName(const std::string& path) const;
  /**
   * Gets file extension
   * @param path  path to extract extension from
   * @return file extension ("" for extension-less files/directories)
   */
  std::string getFileExtension(const std::string& path) const;

  /**
   * Checks if the path passed points to physical drive
   * @param path  path to check
   * @return true if path points to physical drive, false - otherwise
   */
  bool isPhysicalDrivePath(const std::string& path) const;

  /**
   * Fixes device path to be appropriate system path
   * @param path  device path
   * @return correct system path for specific device
   */
  std::string fixDevicePath(const std::string& path) const;

  /**
   * Maps logical drive to physical path
   * @param path  logical path to map
   * @return physical device path that contains logical drive
   */
  std::string mapLogicalPathToPhysical(const std::string& path) const;

  /**
   * Unmounts all partitions on the physical drive
   * @param physical drive path
   * @return true if partitions unmounted, false - otherwise
   */
  bool unmountAll(const std::string& path) const;

  /**
   * Returns last error code reported on platform
   * @return error code
   */
  uint32_t getLastErrorCode() const;
  
  /**
   * Returns error string for the specific error code
   * @param   errorID error code to retrieve description for
   * @return error string
   */
  std::string getErrorString(const uint32_t errorID) const;
  /**
   * Returns error string for the last error
   * @return last error string
   */
  std::string getLastErrorString() const;

  /**
   * Gets platform description information
   */
  const sPlatformDesc_t& getPlatformDesc() const;

  /**
   * Gets current thread native handle
   */
  ThreadHandle_t getCurrentThread() const;
  /**
   * Sets affinity mask for the thread pointed by native handle
   */
  bool setThreadAffinityMask(ThreadHandle_t handle, const uint32_t mask) const;
  /**
   * Gets current processor number that thread is running on
   */
  uint32_t getCurrentProcessorNumber() const;

  /**
   * Gives amount of physical CPU cores available
   */
  uint32_t getNumCores() const;

private:
  IPlatformUtilsImpl* m_impl;
  const std::shared_ptr<ILogger> m_logger;

  static PlatformUtils* s_instance;

  // not implemented
  PlatformUtils(const PlatformUtils&) = delete;
  PlatformUtils& operator=(const PlatformUtils&) = delete;
};

#endif //PlatformUtils_h__
