#ifndef PlatformUtilsImpl_Win32_h__
#define PlatformUtilsImpl_Win32_h__

#include "../IPlatformUtilsImpl.h"

class PlatformUtilsImpl_Win32 : public IPlatformUtilsImpl
{
public:
  PlatformUtilsImpl_Win32(const std::shared_ptr<ILogger>& logger);
  ~PlatformUtilsImpl_Win32();

  virtual bool isAbsolutePath(const std::string& path) const __OVERRIDES__(IPlatformUtilsImpl);
  virtual bool isDirExists(const std::string& path) const __OVERRIDES__(IPlatformUtilsImpl);
  virtual std::string getCurrentDirectory() const __OVERRIDES__(IPlatformUtilsImpl);
  virtual bool makePath(const std::string& path) const __OVERRIDES__(IPlatformUtilsImpl);
  virtual std::string join(const std::string& path1, const std::string& path2) const __OVERRIDES__(IPlatformUtilsImpl);
  virtual std::string normalize(const std::string& path) const __OVERRIDES__(IPlatformUtilsImpl);

  virtual bool isPhysicalDrivePath(const std::string& path) const __OVERRIDES__(IPlatformUtilsImpl);
  virtual std::string fixDevicePath(const std::string& path) const __OVERRIDES__(IPlatformUtilsImpl);
  virtual std::string mapLogicalPathToPhysical(const std::string& path) const __OVERRIDES__(IPlatformUtilsImpl);
  virtual bool unmountAll(const std::string& path) const __OVERRIDES__(IPlatformUtilsImpl);

  virtual uint32_t getLastErrorCode() const __OVERRIDES__(IPlatformUtilsImpl);
  virtual std::string getErrorString(const uint32_t errorID) const __OVERRIDES__(IPlatformUtilsImpl);
  virtual std::string getLastErrorString() const __OVERRIDES__(IPlatformUtilsImpl);
  virtual const sPlatformDesc_t& getPlatformDesc() const __OVERRIDES__(IPlatformUtilsImpl);

  virtual ThreadHandle_t getCurrentThread() const __OVERRIDES__(IPlatformUtilsImpl);
  virtual bool setThreadAffinityMask(ThreadHandle_t handle, const uint32_t mask) const __OVERRIDES__(IPlatformUtilsImpl);
  virtual uint32_t getCurrentProcessorNumber() const __OVERRIDES__(IPlatformUtilsImpl);

private:
  sPlatformDesc_t m_platformDesc;
};

#endif //PlatformUtilsImpl_Win32_h__
