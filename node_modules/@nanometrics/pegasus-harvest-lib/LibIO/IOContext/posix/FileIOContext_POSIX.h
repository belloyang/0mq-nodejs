#ifndef FileIOContext_POSIX_h__
#define FileIOContext_POSIX_h__

#include "../IIOContext.h"

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string>

/// <summary>
/// POSIX File I/O context.
/// This context allows to perform I/O operations over Linux I/O controls (files, disks, block devices)
/// I/O operations (readBlock/writeBlock) are complex (check -> seek -> i/o operation -> size update) and not thread safe, 
/// so the caller is responsible to handle race-conditions properly (e.i.: wrap readBlock/writeBlock with mutex guard)
/// </summary>
class FileIOContext_POSIX : public IIOContext
{
public:
  /// <summary>
  /// POSIX File I/O context constructor.
  /// </summary>
  /// <param name="path">path to the I/O device (file, disk, block-device) to be captured by context</param>
  /// <param name="flags">flags that specifies I/O mode</param>
  /// <param name="logger">logger instance</param>
  FileIOContext_POSIX(const std::string& path, const int flags,
      const std::shared_ptr<ILogger>& logger);

  /// <summary>
  /// Linux File I/O context destructor.
  /// </summary>
  virtual ~FileIOContext_POSIX();

  virtual size_t readBlock(io_offset_t offset, size_t blockSize, void* pOutput) __OVERRIDES__(IIOContext);
  virtual size_t writeBlock(io_offset_t offset, size_t blockSize, const void* pData) __OVERRIDES__(IIOContext);
  virtual void flush() __OVERRIDES__(IIOContext);
  virtual uint64_t getSize() const __OVERRIDES__(IIOContext);

  DECLARE_NOCOPYABLE(FileIOContext_POSIX);

private:
  size_t _checkBlock(io_offset_t offset, size_t blockSize, const void* pData) const;

private:
  const std::string m_path;
  int m_handle;
  bool m_bIsDiskDevice;
  uint64_t m_totalSize;
};

#endif //FileIOContext_POSIX_h__
