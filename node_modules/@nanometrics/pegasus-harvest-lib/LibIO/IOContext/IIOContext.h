#ifndef IIOContext_h__
#define IIOContext_h__

#include "../libio_defines.h"

#include "../Logger/ILogger.h"

#include <memory>
#include <cstddef>
#include <string>

/// <summary>
/// Basic I/O interface for I/O operations abstractions
/// </summary>
class IIOContext
{
protected:
  /**
   * Protected I/O context constructor
   * @param logger  Logger instance to be used for various logging needs (debug, warnings, errors, etc.)
   */
  IIOContext(const std::shared_ptr<ILogger>& logger) : m_logger(logger) {}

  /**
   * Protected I/O context destructor
   */
  virtual ~IIOContext() {}

public:
  /**
   * Reads data block from context
   * @param offset    offset value (in bytes) to start reading from
   * @param blockSize block's size (in bytes) to read
   * @param pOutput   output buffer pointer
   * @return          actual read data size (in bytes)
   */
  virtual size_t readBlock(io_offset_t offset, size_t blockSize, void* pOutput) = 0;

  /**
   * Writes data block into context
   * @param offset    offset value (in bytes) to start writing at
   * @param blockSize block's size (in bytes) to write
   * @param pData     data block pointer to write to context
   * @return          actual written data size (in bytes)
   */
  virtual size_t writeBlock(io_offset_t offset, size_t blockSize, const void* pData) = 0;

  /**
   * Returns context's actual size
   * @return context's actual size
   */
  virtual uint64_t getSize() const = 0;

  /**
   * Flushed I/O operations forcibly
   */
  virtual void flush() = 0;

protected:
  //! Logger object instance
  const std::shared_ptr<ILogger> m_logger;
};

#endif //IIOContext_h__
