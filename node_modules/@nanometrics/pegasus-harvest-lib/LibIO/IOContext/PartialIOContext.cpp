#include "PartialIOContext.h"

#include <algorithm>
#include <cinttypes> // PRIu64

PartialIOContext::PartialIOContext(const std::shared_ptr<IIOContext>& baseContext,
    io_offset_t offset, uint64_t totalSize,
    const std::shared_ptr<ILogger>& logger)
:  IIOContext(logger)
,  m_baseContext(baseContext)
,  m_offset(offset)
,  m_totalSize(totalSize)
{
  __DEV_CALLSTACK_FUNC__;
}

PartialIOContext:: ~PartialIOContext()
{
  __DEV_CALLSTACK_FUNC__;
}

size_t PartialIOContext::_checkBlock(io_offset_t offset, size_t blockSize) const
{
  __DEV_CALLSTACK_FUNC__;
  if ((offset >= m_totalSize) && (blockSize > 0))
  {
    m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eLibIOErrorCode::LIBIO_ERROR_IO_INVALID_RANGE,
      "Out of range [0, %" PRIu64 "] access detected (offset=%" PRIu64 ")",
      m_totalSize - 1LLU,
      offset);
    return 0;
  }
  if (offset + blockSize > m_totalSize)
  {
    const size_t availableBlockSize = (size_t)std::min<uint64_t>(blockSize, m_totalSize - offset);
    m_logger->warning(__THIS_FUNC__, "Partial out of range [0, %" PRIu64 "] access detected [%" PRIu64 ", %" PRIu64 "]. Block size (%" PRIu32 ") reduced to %" PRIu32,
      m_totalSize - 1LLU,
      offset, offset + blockSize - 1LLU,
      static_cast<uint32_t>(blockSize), static_cast<uint32_t>(availableBlockSize));
    return availableBlockSize;
  }

  return blockSize;
}

size_t PartialIOContext::readBlock(io_offset_t offset, size_t blockSize, void* pOutput)
{
  __DEV_CALLSTACK_FUNC__;
  const size_t bytesToRead = this->_checkBlock(offset, blockSize);

  if (bytesToRead <= 0)
    return 0;

  const io_offset_t totalOffset = m_offset + offset;
  return m_baseContext->readBlock(totalOffset, bytesToRead, pOutput);
}

size_t PartialIOContext::writeBlock(io_offset_t offset, size_t blockSize, const void* pData)
{
  __DEV_CALLSTACK_FUNC__;
  const size_t bytesToWrite = this->_checkBlock(offset, blockSize);

  if (bytesToWrite <= 0)
    return 0;

  const io_offset_t totalOffset = m_offset + offset;
  return m_baseContext->writeBlock(totalOffset, bytesToWrite, pData);
}

void PartialIOContext::flush()
{
  __DEV_CALLSTACK_FUNC__;
  m_baseContext->flush();
}

uint64_t PartialIOContext::getSize() const
{
  __DEV_CALLSTACK_FUNC__;
  //tss_libio::actual size is the size of data underlying
  return m_totalSize;
}
