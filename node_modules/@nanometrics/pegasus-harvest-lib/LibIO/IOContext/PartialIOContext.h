#ifndef PartialIOContext_h__
#define PartialIOContext_h__

#include "IIOContext.h"

/// <summary>
/// Partial I/O context.
/// It's controlling Proxy class that allows to perform I/O operations over some certain part of underlying context (specified with offset and size)
/// </summary>
class PartialIOContext : public IIOContext
{
public:
  /**
   * Partial I/O context constructor.
   * This object captures the part of underlying context specified by offset and totalSize parameters
   * @param baseContext  base/underlying context captured by this object
   * @param offset    specifies offset (in bytes) for underlying context that this object can access starting from
   * @param totalSize    specifies size (in bytes) for underlying context that this object can access
   * @param logger    logger instance
   */
  PartialIOContext(const std::shared_ptr<IIOContext>& baseContext,
      io_offset_t offset, uint64_t totalSize,
      const std::shared_ptr<ILogger>& logger);

  /**
   * Partial I/O context destructor.
   */
  virtual ~PartialIOContext();

  virtual size_t readBlock(io_offset_t offset, size_t blockSize, void* pOutput) __OVERRIDES__(IIOContext);
  virtual size_t writeBlock(io_offset_t offset, size_t blockSize, const void* pData) __OVERRIDES__(IIOContext);
  virtual void flush() __OVERRIDES__(IIOContext);
  virtual uint64_t getSize() const __OVERRIDES__(IIOContext);

private:
  size_t _checkBlock(io_offset_t offset, size_t blockSize) const;

private:
  const std::shared_ptr<IIOContext> m_baseContext;
  io_offset_t m_offset;
  uint64_t m_totalSize;
};

#endif //PartialIOContext_h__
