#ifndef FileIOContext_Windows_h__
#define FileIOContext_Windows_h__

#include "../IIOContext.h"

#include <windows.h>

// enable the following to debug net time to perform disk read i/o
//#define MEASURE_DISK_READ_TIME

/// <summary>
/// Windows File I/O context.
/// This context allows to perform I/O operations over Windows I/O controls (files, disks, sockets, etc.)
/// I/O operations (readBlock/writeBlock) are complex (check -> seek -> i/o operation -> size update) and not thread safe, 
/// so the caller is responsible to handle race-conditions properly (e.i.: wrap readBlock/writeBlock with mutex guard)
/// </summary>
class FileIOContext_Windows : public IIOContext
{
public:
  /**
   * MS-Windows File I/O context constructor.
   * @param path                  Path to the I/O device (file, disk, block-device) to be captured by context.
   * @param dwDesiredAccess       Access flags passed to CreateFile() WinAPI call.
   * @param dwSharedMode          Sharing mode flags passed to CreateFile() WinAPI call.
   * @param dwCreationDisposition Creation disposition flags passed to CreateFile() WinAPI call.
   * @param logger                Logger instance.
   */
  FileIOContext_Windows(const std::string& path,
      const DWORD dwDesiredAccess, const DWORD dwShareMode, const DWORD dwCreationDisposition,
      const std::shared_ptr<ILogger>& logger);

  /// <summary>
  /// Windows File I/O context destructor.
  /// </summary>
  virtual ~FileIOContext_Windows();

  virtual size_t readBlock(io_offset_t offset, size_t blockSize, void* pOutput) __OVERRIDES__(IIOContext);
  virtual size_t writeBlock(io_offset_t offset, size_t blockSize, const void* pData) __OVERRIDES__(IIOContext);
  virtual void flush() __OVERRIDES__(IIOContext);
  virtual uint64_t getSize() const __OVERRIDES__(IIOContext);

  bool lock();
  bool unlock();
  bool dismount();
  FORCE_INLINE HANDLE getHandle() const { return m_handle; }

  DECLARE_NOCOPYABLE(FileIOContext_Windows);

private:
  uint64_t _getSize(HANDLE handle) const;

  size_t _checkBlock(io_offset_t offset, size_t blockSize, const void* pData) const;

private:
  const std::string m_path;
  HANDLE m_handle;
  uint64_t m_totalSize;

#ifdef MEASURE_DISK_READ_TIME
  // metrics used to measure net time for disk read i/o
  LARGE_INTEGER m_frequency;
  LARGE_INTEGER m_elapsed;
#endif
};

#endif //FileIOContext_Windows_h__
