#ifndef FileIOContext_WindowsAsync_h__
#define FileIOContext_WindowsAsync_h__

#include "../IIOContext.h"

#include <windows.h>
#include <vector>

// forward declaration
struct AsyncReadState;
struct ReadSpeed;

/// <summary>
/// MS-Windows Asynchronous File I/O context.
/// This context allows to perform Asynchronous I/O operations over MS-Windows I/O controls (files, disks, sockets, etc.)
///
/// NOTE 2018-11-14: Currently only supports read operations.
/// </summary>
class FileIOContext_WindowsAsync : public IIOContext
{
public:
  /**
   * MS-Windows Asynchronous File I/O context constructor.
   * @param path                  Path to the I/O device (file, disk, block-device) to be captured by context.
   * @param dwDesiredAccess       Access flags passed to CreateFile() WinAPI call.
   * @param dwSharedMode          Sharing mode flags passed to CreateFile() WinAPI call.
   * @param dwCreationDisposition Creation disposition flags passed to CreateFile() WinAPI call.
   * @param logger                Logger instance.
   */
  FileIOContext_WindowsAsync(const std::string& path,
    const DWORD dwDesiredAccess, const DWORD dwShareMode, const DWORD dwCreationDisposition,
    const std::shared_ptr<ILogger>& logger);

  /// <summary>
  /// MS-Windows Asynchronous File I/O context destructor.
  /// </summary>
  virtual ~FileIOContext_WindowsAsync();

  virtual size_t readBlock(io_offset_t offset, size_t blockSize, void* pOutput) __OVERRIDES__(IIOContext);
  virtual size_t writeBlock(io_offset_t offset, size_t blockSize, const void* pData) __OVERRIDES__(IIOContext);
  virtual void flush() __OVERRIDES__(IIOContext);
  virtual uint64_t getSize() const __OVERRIDES__(IIOContext);

  bool lock();
  bool unlock();
  bool dismount();
  FORCE_INLINE HANDLE getHandle() const { return m_handle; }

  DECLARE_NOCOPYABLE(FileIOContext_WindowsAsync);

private:
  uint64_t _getSize(HANDLE handle) const;

  size_t _checkBlock(io_offset_t offset, size_t blockSize, const void* pData) const;

  size_t _readSync(io_offset_t offset, size_t blockSize, void* pOutput);
  size_t _readAsync(io_offset_t offset, size_t blockSize, void* pOutput);

  void _scheduleAsyncRead(io_offset_t offset, size_t blockSize);

private:
  const std::string m_path;
  HANDLE m_handle; // handle to file
  uint64_t m_totalSize;

  // state of asynchronous read operation (pimpl)
  AsyncReadState* m_readState;

  // read speed metrics
  std::vector<ReadSpeed> m_readSpeed; // container of metrics
  double m_timerFrequency;            // MS-Windows performance counter frequency
  LARGE_INTEGER m_start, m_finish;    // start & finish times of read operation
};

#endif //FileIOContext_WindowsAsync_h__
