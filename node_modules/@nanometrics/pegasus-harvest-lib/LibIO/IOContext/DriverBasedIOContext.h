#ifndef DriverBasedIOContext_h__
#define DriverBasedIOContext_h__

#include "../libio_defines.h"

#include "IIOContext.h"
#include "IIODriver.h"

/// <summary>
/// Driver-based I/O context.
/// It allows to perform I/O context using underlying driver object
/// </summary>
class DriverBasedIOContext : public IIOContext
{
public:
  /**
   * DriverBased I/O context constructor
   * @param ioDriver      base/underlying I/O driver
   * @param logger      logger instance
   */
  DriverBasedIOContext(const std::shared_ptr<IIODriver>& ioDriver, const std::shared_ptr<ILogger>& logger);

  /**
   * DriverBased I/O context destructor
   */
  virtual ~DriverBasedIOContext() = default;

  virtual size_t readBlock(io_offset_t offset, size_t blockSize, void* pOutput) __OVERRIDES__(IIOContext);
  virtual size_t writeBlock(io_offset_t offset, size_t blockSize, const void* pData) __OVERRIDES__(IIOContext);
  virtual void flush() __OVERRIDES__(IIOContext);
  virtual uint64_t getSize() const __OVERRIDES__(IIOContext);


private:
  //! running driver
  const std::shared_ptr<IIODriver> m_ioDriver;
};

#endif //DriverBasedIOContext_h__
