#include "RingBufferIOContext.h"

#include <cstring>
#include <cinttypes> // PRIu64
#include <algorithm>

RingBufferIOContext::RingBufferIOContext(const std::shared_ptr<IIOContext>& baseContext, const std::shared_ptr<ILogger>& logger)
:  IIOContext(logger)
,  m_baseContext(baseContext)
,  m_totalSize(baseContext->getSize())
{
  __DEV_CALLSTACK_FUNC__;
}

RingBufferIOContext:: ~RingBufferIOContext()
{
  __DEV_CALLSTACK_FUNC__;
}

size_t RingBufferIOContext::readBlock(io_offset_t offset, size_t blockSize, void* pOutput)
{
  __DEV_CALLSTACK_FUNC__;
  io_offset_t srcOffset = offset;
  io_offset_t destOffset = 0;
  size_t dataToRead = blockSize;
  while (dataToRead > 0)
  {
    //tss_libio::align source offset to data buffer dense borders
    const io_offset_t alignedSrcOffset = srcOffset % m_totalSize;
    const size_t denseDataPortionSize = (size_t)std::min<uint64_t>(dataToRead, m_totalSize - alignedSrcOffset);
    //tss_libio::reading data from decoratee's context with aligned ("densed") offset and value
    const size_t nBytesRead = m_baseContext->readBlock(alignedSrcOffset, denseDataPortionSize,
        (char*)pOutput + destOffset);
    //tss_libio::failed to read bytes -> no sense to continue
    if (nBytesRead <= 0)
    {
      m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eLibIOErrorCode::LIBIO_ERROR_IO_READING_FAILED,
        "Failed to read data (pOutput=0x%p, offset=%" PRIu64 ", size=%lu)",
        pOutput, 
        offset,
        (unsigned long)blockSize);
      break;
    }

    //tss_libio::update offsets and data size remains
    dataToRead -= nBytesRead;
    srcOffset += nBytesRead;
    destOffset += nBytesRead;
  }

  return destOffset;
}

size_t RingBufferIOContext::writeBlock(io_offset_t offset, size_t blockSize, const void* pData)
{
  __DEV_CALLSTACK_FUNC__;
  io_offset_t srcOffset = 0;
  io_offset_t destOffset = offset;
  size_t dataToWrite = blockSize;
  while (dataToWrite > 0)
  {
    //tss_libio::align dest offset to data buffer dense borders
    const io_offset_t alignedDstOffset = destOffset % m_totalSize;
    const size_t denseDataPortion = (size_t)std::min<uint64_t>(dataToWrite, m_totalSize - alignedDstOffset);
    //tss_libio::write block to decoratee's context with aligned ("densed") values
    const size_t nBytesWritten = m_baseContext->writeBlock(alignedDstOffset, denseDataPortion,
        (const char*)pData + srcOffset);
    if (nBytesWritten <= 0)
    {
      m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eLibIOErrorCode::LIBIO_ERROR_IO_WRITING_FAILED,
        "Failed to write data (%p, offset=%" PRIu64 ", size=%lu)",
        pData,
        offset,
        (unsigned long)blockSize);
      break;
    }
    //tss_libio::update offsets and data size remains
    dataToWrite -= nBytesWritten;
    srcOffset += nBytesWritten;
    destOffset += nBytesWritten;
  }

  return srcOffset;
}

void RingBufferIOContext::flush()
{
  __DEV_CALLSTACK_FUNC__;
  m_baseContext->flush();
}

uint64_t RingBufferIOContext::getSize() const
{
  __DEV_CALLSTACK_FUNC__;
  //tss_libio::actual size is the size of data underlying
  return m_totalSize;
}
