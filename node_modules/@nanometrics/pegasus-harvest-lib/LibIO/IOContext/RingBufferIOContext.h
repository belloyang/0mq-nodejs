#ifndef RingBufferIOContext_h__
#define RingBufferIOContext_h__

#include "IIOContext.h"

/// <summary>
/// Ring buffer I/O context.
/// It's adaptor that allows to perform I/O operations to underlying context into <B>ring-buffered style</B> (cyclic way):
/// So once end of underlying context is reached - the I/O operation is performed at context's beginning.
/// </summary>
class RingBufferIOContext : public IIOContext
{
public:
  /**
   * Ring buffer I/O context constructor.
   * @param baseContext    underlying context instance
   * @param logger      logger instance
   */
  RingBufferIOContext(const std::shared_ptr<IIOContext>& baseContext, const std::shared_ptr<ILogger>& logger);

  /**
   * Ring buffer I/O context destructor.
   */
  virtual ~RingBufferIOContext();

  virtual size_t readBlock(io_offset_t offset, size_t blockSize, void* pOutput) __OVERRIDES__(IIOContext);
  virtual size_t writeBlock(io_offset_t offset, size_t blockSize, const void* pData) __OVERRIDES__(IIOContext);
  virtual void flush() __OVERRIDES__(IIOContext);
  virtual uint64_t getSize() const __OVERRIDES__(IIOContext);

private:
  const std::shared_ptr<IIOContext> m_baseContext;
  uint64_t m_totalSize;
};

#endif //RingBufferIOContext_h__
