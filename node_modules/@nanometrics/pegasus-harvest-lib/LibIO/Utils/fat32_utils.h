#ifndef fat32_utils_h__
#define fat32_utils_h__

#include "fat32_headers.h"

#include "../IOContext/IIOContext.h"
#include "../Logger/ILogger.h"

#include <memory>
#include <string>

namespace fat32_utils
{
  /**
   * unpacks CHS address into actual head, sector and cylinder values
   * @param chs       CHSAddress structure
   * @param head      output head value
   * @param sector    output sector value
   * @param cylinder  output cylinder value
   */
  void unpack_CHS(const CHSAddress_t& chs, uint8_t& head, uint8_t& sector, uint16_t& cylinder);

  /**
   * Packs header, sector and cylinder value into CHS representation
   * @param head      head value
   * @param sector    sector value
   * @param cylinder  cylinder value
   * @param ret       CHSAddress structure
   */
  void pack_CHS(const uint8_t head, const uint8_t sector, const uint16_t cylinder, CHSAddress_t& ret);

  /**
   * Converts CHS address into linear block addressing representation (LBA)
   * @param chs               input CHSAddress structure
   * @param headsPerCylinder  amount of heads per cylinder
   * @param sectorsPerTrack   amount of sectors per track
   * @return                  linear block address value (LBA, bytes)
   */
  uint32_t CHS_to_LBA(const CHSAddress_t& chs, uint16_t headsPerCylinder, uint16_t sectorsPerTrack);

  /**
   * Converts LBA address into CHS
   * @param lbaAddress        LBA address
   * @param headsPerCylinder  amount of heads per cylinder
   * @param sectorsPerTrack   amount of sectors per track
   * @return                  CHS address
   */
  CHSAddress_t LBA_to_CHS(uint32_t lbaAddress, uint16_t headsPerCylinder, uint16_t sectorsPerTrack);

  /**
   * Write FAT32 partition to underlying context
   * @param context       context to create FAT32 partition on
   * @param volumeLabel   volume label
   * @param sizeInMiB     FAT32 volume size in MiB
   * @param logger        logger instance
   * @return
   */
  bool write_FAT32_Partition(const std::shared_ptr<IIOContext>& context, const std::string& volumeLabel,
    const uint32_t sizeInMiB, const std::shared_ptr<ILogger>& logger);

  /**
   * Verifies if master boot record is valid
   * @param mbr   Master Boot Record to verify
   * @return true if entry is valid, false - otherwise
   */
  bool verify_MBR(const sClassicalGenericMBR& mbr);

  /**
   * Verifies partition boot entry
   * @param entry   partition boot entry to verify
   * @return true if entry is valid, false - otherwise
   */
  bool verify_BootEntry(const sBootEntry_FAT32& entry);

  /**
   * Checks if 'dirty flag' is set (the result of inappropriate device ejection)
   * @param entry FAT32 boot entry
   * @return if dirty flag is set or not
   */
  bool isDirtyFlagSet(const sBootEntry_FAT32& entry);

  /**
   * Clears 'dirty flag' in boot entry record
   * @param entry FAT32 boot entry
   */
  void clearDirtyFlag(sBootEntry_FAT32& entry);

} //namespace fat32_utils

#endif //fat32_utils_h__
