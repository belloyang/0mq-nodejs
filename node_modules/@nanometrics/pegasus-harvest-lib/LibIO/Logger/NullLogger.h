//NullLogger does nothing. Just used to avoid nullptr checks for logger's invocations.

#ifndef NullLogger_h__
#define NullLogger_h__

#include "ILogger.h"

/// <summary>
/// Null logger implementation.\n
/// This logger can be used to easily suppress all the logs.
/// </summary>
class NullLogger : public ILogger
{
public:
  /// <summary>
  /// NullLogger constructor.
  /// </summary>
  NullLogger() {}

  /// <summary>
  /// NullLogger destructor.
  /// </summary>
  virtual ~NullLogger() {}

private:
  virtual void _logErrorImpl(const char* /*scope*/, const uint32_t /*category*/, const uint32_t /*errorCode*/, const char* /*format*/, va_list /*args*/) __OVERRIDES__(ILogger){}
  virtual void _logWarningImpl(const char* /*scope*/, const char* /*format*/, va_list /*args*/) __OVERRIDES__(ILogger){}
  virtual void _logInfoImpl(const char* /*scope*/, const char* /*format*/, va_list /*args*/) __OVERRIDES__(ILogger){}
  virtual void _logDebugImpl(const char* /*scope*/, const char* /*format*/, va_list /*args*/) __OVERRIDES__(ILogger){}
  virtual void _flushImpl() __OVERRIDES__(ILogger) {}
};

#endif //NullLogger_h__
