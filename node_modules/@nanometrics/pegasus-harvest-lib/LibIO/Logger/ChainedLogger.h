#ifndef ChainedLogger_h__
#define ChainedLogger_h__

#include "ILogger.h"

#include <memory>
#include <vector>
#include <cstddef>

/// <summary>
/// Chained logger. Aggregator class to transmit log messages to each underlying logger
/// </summary>
class ChainedLogger : public ILogger
{
public:
  /**
   * ChainedLogger constructor.
   * @param loggers  underlying loggers array that log messages are being passed/transmitted to
   */
  ChainedLogger(const std::vector< std::shared_ptr<ILogger> >& loggers);

  /**
   * ChainedLogger destructor.
   */
  virtual ~ChainedLogger() = default;

private:
  virtual void _logErrorImpl(const char* scope, const uint32_t category, const uint32_t errorCode, const char* format, va_list args) __OVERRIDES__(ILogger);
  virtual void _logWarningImpl(const char* scope, const char* format, va_list args) __OVERRIDES__(ILogger);
  virtual void _logInfoImpl(const char* scope, const char* format, va_list args) __OVERRIDES__(ILogger);
  virtual void _logDebugImpl(const char* scope, const char* format, va_list args) __OVERRIDES__(ILogger);
  virtual void _flushImpl() __OVERRIDES__(ILogger);

protected:
  //! Aggregated loggers array
  const std::vector< std::shared_ptr<ILogger> > m_loggers;
};

#endif //ChainedLogger_h__
