#ifndef ConsoleLogger_h__
#define ConsoleLogger_h__

#include "ILogger.h"
#include "../buffers.h"

#include <cstddef>
#include <mutex>
#include <memory>

/// <summary>
/// Console logger (printf) implementation
/// </summary>
class ConsoleLogger : public ILogger
{
public:
  /**
   * ConsoleLogger constructor.
   * @param maxBufferSize    maximum buffer size of message
   * @param mask             logs levels mask
   */
  ConsoleLogger(const size_t maxBufferSize, const uint8_t mask = LOGS_ALL);

  /**
 * ConsoleLogger constructor.
 * @param buffer buffer to be used for message constuction
 */
  ConsoleLogger(const std::shared_ptr<buffer_base<char>>& buffer);

  /**
   * ConsoleLogger destructor.
   */
  virtual ~ConsoleLogger() = default;

private:
  bool _appendMessage(const size_t offset, const char* format, va_list args);

  virtual void _logErrorImpl(const char* scope, const uint32_t category, const uint32_t errorCode, const char* format, va_list args) __OVERRIDES__(ILogger);
  virtual void _logWarningImpl(const char* scope, const char* format, va_list args) __OVERRIDES__(ILogger);
  virtual void _logInfoImpl(const char* scope, const char* format, va_list args) __OVERRIDES__(ILogger);
  virtual void _logDebugImpl(const char* scope, const char* format, va_list args) __OVERRIDES__(ILogger);
  virtual void _flushImpl() __OVERRIDES__(ILogger);

protected:
  bool _constructMessage(const char* header, const char* scope, const char* format, va_list args);

  const std::shared_ptr<buffer_base<char>> m_buffer;
  //! mutex for 'printf' thread-safety
#if !defined(DEV_PLATFORM_STM32)
  std::mutex m_mutex;
#endif
};

#endif //ConsoleLogger_h__
