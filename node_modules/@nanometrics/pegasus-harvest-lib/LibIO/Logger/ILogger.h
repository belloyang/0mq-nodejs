#ifndef ILogger_h__
#define ILogger_h__

#include "../libio_defines.h"

#include <stdarg.h>

/// <summary>
/// Basic interface for logger abstraction
/// </summary>
class ILogger
{
public:
  //! Logs scopes. Allows to sift the logs to be shown/printed
  typedef enum : uint8_t
  {
    LOG_NONE    = 0, /*!< no logs enabled */
    LOG_ERROR   = 1 << 0, /*!< error logs are enabled */
    LOG_WARNING = 1 << 1, /*!< warning logs are enabled */
    LOG_INFO    = 1 << 2, /*!< info logs are enabled */
    LOG_DEBUG   = 1 << 3, /*!< debug logs are enabled */

    LOGS_SEVERE = LOG_ERROR | LOG_WARNING, /*!< severe logs (errors & warnings) enabled only */
    LOGS_ALL  = LOG_ERROR | LOG_WARNING | LOG_INFO | LOG_DEBUG, /*!< all logs enabled */
  } eLogScope;

protected:
  /**
   * Protected ILogger constructor.
   */
  ILogger(const uint8_t mask = LOGS_ALL) : m_mask(mask) {}

public:
  /**
   * Public ILogger destructor.
   */
  virtual ~ILogger() {}

  /**
   * Sets logs mask for logger
   * @param mask   logs mask
   */
  FORCE_INLINE void setMask(const uint8_t mask) { m_mask = mask; }

  /**
   * Logs mask getter
   * @return    logs mask
   */
  FORCE_INLINE uint8_t getMask() const { return m_mask; }

  /**
   * Function to print error message
   * @param scope     Message scope. Usually it specifies caller name
   * (the place where function is called from. e.i:<B>__THIS_FUNC__</B> macro)
   * @param category  Error category (specifies the category that message relates to)
   * @param errorCode Error code (specifies error code within category)
   * @param format  format string
   */
  void error(const char* scope, const uint32_t category, const uint32_t errorCode, const char* format, ...)
  {
    __DEV_CALLSTACK_FUNC__;
    if (this->_checkScope(LOG_ERROR))
    {
      va_list args;
      va_start(args, format);
      this->_logErrorImpl(scope, category, errorCode, format, args);
      va_end(args);
      this->flush();
    }
  }

  /**
   * Function to print warning message
   * @param scope   Message scope. Usually it specifies caller name
   * (the place where function is called from. e.i:<B>__THIS_FUNC__</B> macro)
   * @param format  format string
   */
  void warning(const char* scope, const char* format, ...)
  {
    __DEV_CALLSTACK_FUNC__;
    if (this->_checkScope(LOG_WARNING))
    {
      va_list args;
      va_start(args, format);
      this->_logWarningImpl(scope, format, args);
      va_end(args);
      this->flush();
    }
  }

  /**
   * Function to print info message
   * @param scope   Message scope. Usually it specifies caller name
   * (the place where function is called from. e.i:<B>__THIS_FUNC__</B> macro)
   * @param format  format string
   */
  void info(const char* scope, const char* format, ...)
  {
    __DEV_CALLSTACK_FUNC__;
    if (this->_checkScope(LOG_INFO))
    {
      va_list args;
      va_start(args, format);
      this->_logInfoImpl(scope, format, args);
      va_end(args);
      this->flush();
    }
  }

  /**
   * Function to print debug message
   * @param scope   Message scope. Usually it specifies caller name
   * (the place where function is called from. e.i:<B>__THIS_FUNC__</B> macro)
   * @param format  format string
   */
  void debug(const char* scope, const char* format, ...)
  {
    __DEV_CALLSTACK_FUNC__;
    if (this->_checkScope(LOG_DEBUG))
    {
      va_list args;
      va_start(args, format);
      this->_logDebugImpl(scope, format, args);
      va_end(args);
      this->flush();
    }
  }

  /**
   * Function to flush all data to logger buffer
   */
  void flush()
  {
    __DEV_CALLSTACK_FUNC__;
    this->_flushImpl();
  }

  /**
   * Function to print error message
   * @param scope      Message scope. Usually it specifies caller name
   * @param category   Error category (specifies the category that message relates to)
   * @param errorCode  Error code (specifies error code within category)
   * @param format     format string
   * @param args       va_list parameters for formated print
   */
  void error_v(const char* scope, const uint32_t category, const uint32_t errorCode, const char* format, va_list args)
  {
    __DEV_CALLSTACK_FUNC__;
    if (this->_checkScope(LOG_ERROR))
      this->_logErrorImpl(scope, category, errorCode, format, args);
  }

  /**
   * Function to print warning message
   * @param scope   Message scope. Usually it specifies caller name
   * (the place where function is called from. e.i:<B>__THIS_FUNC__</B> macro)
   * @param format  format string
   * @param args    va_list parameters for formated print
   */
  void warning_v(const char* scope, const char* format, va_list args)
  {
    __DEV_CALLSTACK_FUNC__;
    if (this->_checkScope(LOG_WARNING))
      this->_logWarningImpl(scope, format, args);
  }

  /**
   * Function to print info message
   * @param scope   Message scope. Usually it specifies caller name
   * (the place where function is called from. e.i:<B>__THIS_FUNC__</B> macro)
   * @param format  format string
   * @param args    va_list parameters for formated print
   */
  void info_v(const char* scope, const char* format, va_list args)
  {
    __DEV_CALLSTACK_FUNC__;
    if (this->_checkScope(LOG_INFO))
      this->_logInfoImpl(scope, format, args);
  }
  /**
   * Function to print debug message
   * @param scope   Message scope. Usually it specifies caller name
   * (the place where function is called from. e.i:<B>__THIS_FUNC__</B> macro)
   * @param format  format string
   * @param args    va_list parameters for formated print
   */
  void debug_v(const char* scope, const char* format, va_list args)
  {
    __DEV_CALLSTACK_FUNC__;
    if (this->_checkScope(LOG_DEBUG))
      this->_logDebugImpl(scope, format, args);
  }

private:
  FORCE_INLINE bool _checkScope(const eLogScope scope) const { return (scope & m_mask) == scope; }
  virtual void _logErrorImpl(const char* scope, const uint32_t category, const uint32_t errorCode, const char* format, va_list args) = 0;
  virtual void _logWarningImpl(const char* scope, const char* format, va_list args) = 0;
  virtual void _logInfoImpl(const char* scope, const char* format, va_list args) = 0;
  virtual void _logDebugImpl(const char* scope, const char* format, va_list args) = 0;
  virtual void _flushImpl() = 0;

protected:
  uint8_t m_mask;
};

#endif //ILogger_h__
