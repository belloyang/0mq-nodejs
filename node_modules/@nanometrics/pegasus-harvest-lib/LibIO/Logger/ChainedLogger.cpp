#include "ChainedLogger.h"

ChainedLogger::ChainedLogger(const std::vector< std::shared_ptr<ILogger> >& loggers)
:  ILogger()
,  m_loggers(loggers)
{
  __DEV_CALLSTACK_FUNC__;
}

void ChainedLogger::_logErrorImpl(const char* scope, const uint32_t category, const uint32_t errorCode, const char* format, va_list args)
{
  __DEV_CALLSTACK_FUNC__;
  for (const auto& logger : m_loggers)
    logger->error_v(scope, category, errorCode, format, args);
}

void ChainedLogger::_logWarningImpl(const char* scope, const char* format, va_list args)
{
  __DEV_CALLSTACK_FUNC__;
  for (const auto& logger : m_loggers)
    logger->warning_v(scope, format, args);
}

void ChainedLogger::_logInfoImpl(const char* scope, const char* format, va_list args)
{
  __DEV_CALLSTACK_FUNC__;
  for (const auto& logger : m_loggers)
    logger->info_v(scope, format, args);
}

void ChainedLogger::_logDebugImpl(const char* scope, const char* format, va_list args)
{
  __DEV_CALLSTACK_FUNC__;
  for (const auto& logger : m_loggers)
    logger->debug_v(scope, format, args);
}

void ChainedLogger::_flushImpl()
{
  __DEV_CALLSTACK_FUNC__;
  for (const auto& logger : m_loggers)
    logger->flush();
}
