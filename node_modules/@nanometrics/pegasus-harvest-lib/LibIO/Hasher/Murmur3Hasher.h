#ifndef Murmur3Hasher_h__
#define Murmur3Hasher_h__

#include "IHasher.h"

#include "../buffers.h"

#include <memory>

/// <summary>
/// Murmur3 hash implementation
/// </summary>
class Murmur3Hasher : public IHasher
{
public:
  /**
   * Murmur3Hasher constructor.
   * @param chunkSize  size in bytes for bytes to be read for 1 read operation. Allows to reduce I/O operations over I/O context
   * @param seed    seed value for Murmur3 hash generator
   * @param logger  logger instance
   */
  Murmur3Hasher(const size_t chunkSize, const uint32_t seed, const std::shared_ptr<ILogger>& logger);

  /**
 * Murmur3Hasher constructor with default seed.
 * @param chunkSize  size in bytes for bytes to be read for 1 read operation. Allows to reduce I/O operations over I/O context
 * @param logger  logger instance
 */
  Murmur3Hasher(const size_t chunkSize, const std::shared_ptr<ILogger>& logger);

  /**
* Murmur3Hasher constructor with default seed.
* @param buffer  buffer to be used to optimize I/O access to IOContext to calculate hash for
* @param logger  logger instance
*/
  Murmur3Hasher(const std::shared_ptr<buffer_base<char>>& buffer, const std::shared_ptr<ILogger>& logger);

  /**
   * Murmur3Hasher destructor
   */
  virtual ~Murmur3Hasher() = default;

  /**
   * 
   * @param pData pointer to the data
   * @param len   data length (in bytes)
   * @param seed  Murmur3 hash seed
   * @return 32-bits hash value
   */
  static Hash32_t x86_32(const void* pData, const uint32_t len, const uint32_t seed);

  virtual int getHash32(const std::shared_ptr<IIOContext>& ioContext, Hash32_t& hash) const __OVERRIDES__(IHasher);

  DECLARE_NOCOPYABLE(Murmur3Hasher);
  
private:
  void x86_32(const std::shared_ptr<IIOContext>& ioContext, uint32_t& out) const;
  
private:
  const uint32_t m_seed;
  const std::shared_ptr<buffer_base<char>> m_buffer;
};

#endif //Murmur3Hasher_h__
