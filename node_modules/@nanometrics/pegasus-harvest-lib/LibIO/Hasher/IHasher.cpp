#include "IHasher.h"

#include <string.h>

IHasher::IHasher(const std::string& name, const std::shared_ptr<ILogger>& logger)
:  m_name(name)
,  m_logger(logger)
{
  __DEV_CALLSTACK_FUNC__;
}

bool IHasher::checkIntegrity(const std::shared_ptr<IIOContext>& ioContext, Hash32_t hashExpect) const
{
  __DEV_CALLSTACK_FUNC__;
  // get hash from ioContext
  Hash32_t hashActual = {0};
  const int hashSzActualBytes = this->getHash32(ioContext, hashActual);
  // check for unequal size
  if (hashSzActualBytes != HASH_SIZE_BYTES) {
    m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eLibIOErrorCode::LIBIO_ERROR_INTEGRITY_CHECK_FAILED,
      "Hash size mismatch; expected=%i, actual=%i",
      HASH_SIZE_BYTES, 
      hashSzActualBytes);
    return false;
  }
  // check if retrieved hash matches expected
  if (hashActual.value == hashExpect.value)
  {
    return true;
  }
  else 
  {
    m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eLibIOErrorCode::LIBIO_ERROR_INTEGRITY_CHECK_FAILED,
      "Hash mismatch; actual=0x%08x, expected=0x%08x",
      hashActual.value, 
      hashExpect.value);
    return false;
  }
}
