#ifndef CRCHasher_h__
#define CRCHasher_h__

#include "IHasher.h"
#include "CRCDriver/ICRCDriver.h"

#include "../buffers.h"

#include <memory>

/// <summary>
/// CRC hasher implementation
/// </summary>
class CRCHasher : public IHasher
{
public:
  /**
   * CRCHasher constructor.
   * @param chunkSize size in bytes for bytes to be read for 1 read operation. Allows to reduce I/O operations over I/O context
   * @param driver    CRC driver
   * @param logger    logger instance
   */
  CRCHasher(const uint32_t chunkSize, const std::shared_ptr<ICRCDriver>& driver,
      const std::shared_ptr<ILogger>& logger);

  /**
   * CRCHasher constructor.
   * @param driver    CRC driver
   * @param buffer    buffer to be used to optimize I/O access to IOContext to calculate hash for
   * @param logger    logger instance
   */
  CRCHasher(const std::shared_ptr<ICRCDriver>& driver, const std::shared_ptr<buffer_base<char>>& buffer,
    const std::shared_ptr<ILogger>& logger);

  /**
   * CRCHasher destructor.
   */
  virtual ~CRCHasher() = default;
  
private:
  // not implemented
  CRCHasher(const CRCHasher&);
  CRCHasher& operator=(const CRCHasher&);

private:
  virtual int getHash32(const std::shared_ptr<IIOContext>& ioContext, Hash32_t& hash) const __OVERRIDES__(IHasher);
  const std::shared_ptr<ICRCDriver> m_driver;
  const std::shared_ptr<buffer_base<char>> m_buffer;
};

#endif //CRCHasher_h__
