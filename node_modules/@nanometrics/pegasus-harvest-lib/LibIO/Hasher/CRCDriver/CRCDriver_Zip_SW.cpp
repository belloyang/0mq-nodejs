#include "CRCDriver_Zip_SW.h"

namespace
{
  const uint32_t CRC32_ZIP_START = 0xFFFFFFFF;
  uint32_t crc_table[256] = { 0 };
  bool s_crc_table_initialized = false;
}

CRCDriver_Zip_SW::CRCDriver_Zip_SW(const std::shared_ptr<ILogger>& logger)
:  ICRCDriver("CRC32-ZIP-SW", logger)
,  m_lastValue(0)
{
  __DEV_CALLSTACK_FUNC__;
  // init CRC table if needed
  if (!s_crc_table_initialized)
  {
    const uint32_t dwPolynomial = 0xEDB88320u;
    for (uint32_t i = 0; i < NUM_ELEMENTS(crc_table); ++i)
    {
      uint32_t dwCrc = i;
      for(int j = 0; j < 8; ++j)
      {
        if ((dwCrc & 0x00000001u) == 1)
        {
           dwCrc = (dwCrc >> 1) ^ dwPolynomial;
        }
        else
        {
           dwCrc >>= 1;
        }
      }
      crc_table[i] = dwCrc;
    }
    s_crc_table_initialized = true;
  }
}

/*static*/ uint32_t CRCDriver_Zip_SW::_crc32_zip(const uint8_t* pData, const uint32_t len, const uint32_t init)
{
  __DEV_CALLSTACK_FUNC__;
  uint32_t crc = init;
  for (uint32_t i = 0; i < len; i++)
  {
    crc = (crc >> 8) ^ crc_table[(crc & 0xff) ^ pData[i]];
  }
  return crc;
}

uint32_t CRCDriver_Zip_SW::_calculateImpl(const void* pBuffer, uint32_t len)
{
  __DEV_CALLSTACK_FUNC__;
  m_lastValue = this->_crc32_zip(reinterpret_cast<const uint8_t*>(pBuffer), len, CRC32_ZIP_START);
  return m_lastValue;
}

uint32_t CRCDriver_Zip_SW::_accumulateImpl(const void* pBuffer, uint32_t len)
{
  __DEV_CALLSTACK_FUNC__;
  m_lastValue = this->_crc32_zip(reinterpret_cast<const uint8_t*>(pBuffer), len, m_lastValue);
  return m_lastValue;
}

uint32_t CRCDriver_Zip_SW::_finalizeImpl(const uint32_t crc)
{
  __DEV_CALLSTACK_FUNC__;
  return ~crc;
}
