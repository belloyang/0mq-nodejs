#ifndef ICRCDriver_h__
#define ICRCDriver_h__

#include "../../libio_defines.h"

#include "../../Logger/ILogger.h"

#include <string>
#include <memory>

class ICRCDriver
{
protected:
  ICRCDriver(const std::string& name, const std::shared_ptr<ILogger>& logger);

public:
  virtual ~ICRCDriver() = default;

  FORCE_INLINE const std::string& getName() const { return m_name; }
  /**
   * Method that is called when hash calculation starts (for the very first chunk)
   * @param pBuffer data buffer
   * @param len     data buffer length
   * @return        CRC32 hash value
   */
  uint32_t calculate(const void* pBuffer, uint32_t len);

  /**
   * Method that is called when hash calculation accumulates (for the 2nd and following chunks)
   * @param pBuffer data buffer
   * @param len     data buffer length
   * @return        CRC32 hash value
   */
  uint32_t accumulate(const void* pBuffer, uint32_t len);

  /**
   * Method that is called after hash accumulation is done.
   * This method allows to modify (e.i: invert, required by CRC32 for Zlib) the CRC result before returning it to the caller.
   * @param crc CRC32 value calculated by this stage
   * @return  updated CRC32 value
   */
  uint32_t finalize(const uint32_t crc);

private:
  virtual uint32_t _calculateImpl(const void* pBuffer, uint32_t len) = 0;
  virtual uint32_t _accumulateImpl(const void* pBuffer, uint32_t len) = 0;
  virtual uint32_t _finalizeImpl(const uint32_t crc) = 0;

protected:
  const std::string m_name;
  const std::shared_ptr<ILogger> m_logger;
};

#endif //ICRCDriver_h__
