#ifndef SpeedMeter_h__
#define SpeedMeter_h__

#include "../libio_defines.h"

#include "IMeter.h"
#include "Timers/ITimer.h"
#include <memory>

/// <summary>
/// SpeedMeter implementation.\n
/// Allows to perform speed measurements (bytes per seconds) for operation
/// </summary>
class SpeedMeter : public IMeter
{
public:
  /**
   * SpeedMeter constructor
   * @param name        meter's name
   * @param dataSizeInBytes  data's size that is being processed. Is used to calculate speed
   */
  SpeedMeter(const std::string& name, const size_t dataSizeInBytes);

  /**
   * SpeedMeter destructor
   */
  virtual ~SpeedMeter() = default;

  /**
   * Returns meter-specific metrics (bytes/milliseconds)
   * @return    speed (bytes/milliseconds) processed since the meter created
   */
  virtual int64_t getMetric() const __OVERRIDES__(IMeter);

private:
  const std::unique_ptr<ITimer> m_timer;
  timestamp_t m_startTime;
  const size_t m_dataSizeInBytes;
};

#endif //SpeedMeter_h__
