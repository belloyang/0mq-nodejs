#ifndef io_defines_h__
#define io_defines_h__

#include "../shared_defines.h"
#include "../version.h"

#if defined(DEV_PLATFORM_STM32)
  #include "platform/libio_stm32_defines.h"
#elif defined(DEV_PLATFORM_WIN32)
  #include "platform/libio_win32_defines.h"
#elif defined(DEV_PLATFORM_LINUX)
  #include "platform/libio_linux_defines.h"
#elif defined(DEV_PLATFORM_MACOS)
  #include "platform/libio_macos_defines.h"
#endif

#if defined(DEV_PLATFORM_STM32)
  #define __IO_BUFFERS_SIZE_SMALL__ (64 * 1024) // 64 KiB for I/O operations
  #define __IO_BUFFERS_SIZE_MED__   (64 * 1024) // 64 KiB for I/O operations
  #define __IO_BUFFERS_SIZE_LARGE__ (64 * 1024) // 64 KiB for I/O operations
#else
  const size_t __IO_BUFFERS_SIZE_SMALL__ = (64 * 1024);       // 64 KiB for I/O operations
  const size_t __IO_BUFFERS_SIZE_MED__ = (256 * 1024);      // 256 KiB buffer for I/O operations
  const size_t __IO_BUFFERS_SIZE_LARGE__ = (4 * 1024 * 1024); // 4 MiB (section size) buffer for I/O operations
#endif
  // default buffer size for I/O operations
const size_t __IO_BUFFERS_SIZE__ = (size_t)__IO_BUFFERS_SIZE_LARGE__;

#if defined(DEV_PLATFORM_STM32)
  //memory alignment is imposed by Level-1 cache used in eMMC driver for MCU (32 bytes)
  //(https://www.st.com/content/ccc/resource/technical/document/application_note/group0/08/dd/25/9c/4d/83/43/12/DM00272913/files/DM00272913.pdf/jcr:content/translations/en.DM00272913.pdf)
  #define __IO_MEM_ALIGNMENT__ 32
#else
  #define __IO_MEM_ALIGNMENT__ 512 //memory alignment for I/O operations for other platforms (512 bytes)
#endif
#define __IO_SIZE_ALIGNMENT__ 512 //size alignment for I/O operations

//tss::on Win32 I/O operations require 512 bytes alignment in address & size, on STM32 (32 bytes in address, 512 bytes - in size)
#if defined(DEV_PLATFORM_WIN32) || defined(DEV_PLATFORM_STM32)
  #define __ATTR_IO__ __ATTR_ALIGNED__(__IO_MEM_ALIGNMENT__)
  #define __io_aligned_alloc__(size) __aligned_alloc__(__IO_MEM_ALIGNMENT__, size)
  #define __is_io_aligned__(data) (__is_aligned_to__(data, __IO_MEM_ALIGNMENT__)) //check if buffer is aligned to I/O alignment
#else
  #define __ATTR_IO__
  #define __io_aligned_alloc__(size) ::malloc(size)
  #define __is_io_aligned__(data) (true) //when is alignment is not set -> always true
#endif

#define LIBIO_MURMUR3_SEED_DEFAULT 100 //default seed for Murmur3 hashing algorithm

typedef enum : uint32_t
{
  LIBIO_ERROR_CODE_BASE = 0x10000000, /*!< base error code for LibIO */

  LIBIO_ERROR_CODE_BASE_IO = LIBIO_ERROR_CODE_BASE + 0x00001000, /*!< base error code for IO errors */
  LIBIO_ERROR_IO_INVALID_RANGE   = LIBIO_ERROR_CODE_BASE_IO + 0x00000001, /*!< invalid range for I/O operation provided */
  LIBIO_ERROR_IO_READING_FAILED  = LIBIO_ERROR_CODE_BASE_IO + 0x00000002, /*!< reading from I/O context failed */
  LIBIO_ERROR_IO_WRITING_FAILED  = LIBIO_ERROR_CODE_BASE_IO + 0x00000003, /*!< writing to I/O context failed */
  LIBIO_ERROR_IO_INVALID_DATA    = LIBIO_ERROR_CODE_BASE_IO + 0x00000004, /*!< invalid data supplied to I/O operation */

  LIBIO_ERROR_CODE_BASE_INTEGRITY_CHECK = LIBIO_ERROR_CODE_BASE + 0x00002000, /*!< base code for integrity checks error */
  LIBIO_ERROR_INTEGRITY_CHECK_FAILED = LIBIO_ERROR_CODE_BASE_INTEGRITY_CHECK + 0x00000001, /*!< integrity check of I/O context failed */
} eLibIOErrorCode;

typedef uint64_t io_offset_t; //io offset type definition for I/O operations

#endif //io_defines_h__
