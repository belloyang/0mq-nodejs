# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := libHarvLibrary
DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=libHarvLibrary' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DOPENSSL_NO_PINSHARED' \
	'-D__APPLE__' \
	'-DDEBUG' \
	'-D_DEBUG' \
	'-DV8_ENABLE_CHECKS'

# Flags passed to all source files.
CFLAGS_Debug := \
	-O0 \
	-gdwarf-2 \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=gnu++1y \
	-stdlib=libc++ \
	-fno-rtti \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Debug :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Debug :=

INCS_Debug := \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/include/node \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/src \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/openssl/config \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/openssl/openssl/include \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/uv/include \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/zlib \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/v8/include \
	-I$(srcdir)/LibIO \
	-I$(srcdir)/PSFLib \
	-I$(srcdir)/PDBLib \
	-I$(srcdir)/third-party/MiniSEED

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=libHarvLibrary' \
	'-DUSING_UV_SHARED=1' \
	'-DUSING_V8_SHARED=1' \
	'-DV8_DEPRECATION_WARNINGS=1' \
	'-D_DARWIN_USE_64_BIT_INODE=1' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DOPENSSL_NO_PINSHARED' \
	'-D__APPLE__'

# Flags passed to all source files.
CFLAGS_Release := \
	-Os \
	-gdwarf-2 \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-Wall \
	-Wendif-labels \
	-W \
	-Wno-unused-parameter

# Flags passed to only C files.
CFLAGS_C_Release := \
	-fno-strict-aliasing

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=gnu++1y \
	-stdlib=libc++ \
	-fno-rtti \
	-fno-strict-aliasing

# Flags passed to only ObjC files.
CFLAGS_OBJC_Release :=

# Flags passed to only ObjC++ files.
CFLAGS_OBJCC_Release :=

INCS_Release := \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/include/node \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/src \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/openssl/config \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/openssl/openssl/include \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/uv/include \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/zlib \
	-I/Users/bingyang/Library/Caches/node-gyp/10.17.0/deps/v8/include \
	-I$(srcdir)/LibIO \
	-I$(srcdir)/PSFLib \
	-I$(srcdir)/PDBLib \
	-I$(srcdir)/third-party/MiniSEED

OBJS := \
	$(obj).target/$(TARGET)/HarvLib/Utils/harvester_utils.o \
	$(obj).target/$(TARGET)/HarvLib/Client/PlatformBasedClient.o \
	$(obj).target/$(TARGET)/HarvLib/steim/steim1.o \
	$(obj).target/$(TARGET)/HarvLib/steim/steim2.o \
	$(obj).target/$(TARGET)/HarvLib/steim/decoders/ISteimDecoder.o \
	$(obj).target/$(TARGET)/HarvLib/steim/decoders/SteimDecoder_Steim1.o \
	$(obj).target/$(TARGET)/HarvLib/steim/decoders/SteimDecoder_Steim2.o \
	$(obj).target/$(TARGET)/HarvLib/steim/synthesizers/IMiniSEEDRecordsSynthesizer.o \
	$(obj).target/$(TARGET)/HarvLib/steim/synthesizers/MiniSEEDRecordsSynthesizer_NoCompression.o \
	$(obj).target/$(TARGET)/HarvLib/steim/synthesizers/MiniSEEDRecordsSynthesizer_Steim1.o \
	$(obj).target/$(TARGET)/HarvLib/steim/synthesizers/MiniSEEDRecordsSynthesizer_Steim2.o \
	$(obj).target/$(TARGET)/HarvLib/steim/synthesizers/IMiniSEEDRecordsSynthesizerDelegate.o \
	$(obj).target/$(TARGET)/HarvLib/TimeRangeFetchers/ITimeRangeFetcher.o \
	$(obj).target/$(TARGET)/HarvLib/TimeRangeFetchers/TimeRangeFetcher_SensorInput.o \
	$(obj).target/$(TARGET)/HarvLib/TimeRangeFetchers/TimeRangeFetcher_ForensicLog.o \
	$(obj).target/$(TARGET)/HarvLib/TimeRangeFetchers/TimeRangeFetcher_SohData.o \
	$(obj).target/$(TARGET)/HarvLib/TimeRangeFetchers/TimeRangeFetcher_ClockStatus.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/MnemonicsDecoder.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/GraphBuilder.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/IAsyncFilter.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/IBaseFilter.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/IAsyncWorker.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/AsyncWorker_Functor.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Data/ErrorDataDesc.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Data/PDBDataDesc.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Data/ProgressDataDesc.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Data/PSFDataDesc.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/IPDBDataGenerator.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/PDBLogsGenerator.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/SensorInputGenerator.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/HealthInputGenerator.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/ClockStatusGenerator.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/samplers/ISamplesGenerator.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/samplers/SamplesGenerator_Accumulator.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/samplers/SamplesGenerator_Func.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/samplers/SamplesGenerator_MinMax.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/samplers/SamplesGenerator_RandomNormal.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/samplers/SamplesGenerator_RandomUniform.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/samplers/SamplesGenerator_Sine.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/gap_generators/IGapGenerator.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/gap_generators/GapGenerator_Random.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Generators/gap_generators/GapGenerator_None.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Progress/ProgressFilter.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Readers/PSFReaderFilter.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Readers/Predicates/IPSFReaderPredicate.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Readers/Predicates/PSFReaderPredicate_Common.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Readers/Predicates/PSFReaderPredicate_MaxPages.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Readers/Predicates/PSFReaderPredicate_AND.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Readers/Predicates/PSFReaderPredicate_TimeRange.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Readers/Predicates/PSFReaderPredicate_Extender.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Readers/Predicates/Timestamp_Dichotomizer.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/PacketInfoProvider_DigitizerStartBased.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/PacketSlicer_TimeRange.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/MiniSEEDWriterFilter_SensorInput.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/MiniSEEDWriterFilter_SohData.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/MiniSEEDWriterFilter_ClockStatus.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/MiniSEEDDirectoryState.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/MiniSEEDFileState.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/PSFWriterFilter.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/TxtLogWriterFilter.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/TxtLogDirectoryState.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/TxtLogFileState.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Writers/IWriterFilter.o \
	$(obj).target/$(TARGET)/HarvLib/DataFilters/Processors/ProcessorDelegateFilter.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/IOperation.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_Format.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_GetDigitizerInfo.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_GetVolumeInfo.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_EraseVolume.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_HarvestData.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_HarvestLogs.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_HarvestSOH.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_HarvestTimingSOH.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_ListDevices.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_FlushHarvestingHistory.o \
	$(obj).target/$(TARGET)/HarvLib/Operations/Operation_ReadVolume.o \
	$(obj).target/$(TARGET)/HarvLib/Utils/json_utils.o \
	$(obj).target/$(TARGET)/HarvLib/Utils/JSONSerializer.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/adler32.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/compress.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/crc32.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/deflate.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/gzclose.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/gzlib.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/gzread.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/gzwrite.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/infback.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/inffast.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/inflate.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/inftrees.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/trees.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/uncompr.o \
	$(obj).target/$(TARGET)/HarvLib/external/zlib-1.2.11/zutil.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))
$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))
$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Debug :=

LDFLAGS_Release := \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Release :=

LIBS :=

$(builddir)/HarvLibrary.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/HarvLibrary.a: LIBS := $(LIBS)
$(builddir)/HarvLibrary.a: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/HarvLibrary.a: TOOLSET := $(TOOLSET)
$(builddir)/HarvLibrary.a: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,alink)

all_deps += $(builddir)/HarvLibrary.a
# Add target alias
.PHONY: libHarvLibrary
libHarvLibrary: $(builddir)/HarvLibrary.a

# Add target alias to "all" target.
.PHONY: all
all: libHarvLibrary

# Add target alias
.PHONY: libHarvLibrary
libHarvLibrary: $(builddir)/HarvLibrary.a

# Short alias for building this static library.
.PHONY: HarvLibrary.a
HarvLibrary.a: $(builddir)/HarvLibrary.a

# Add static library to "all" target.
.PHONY: all
all: $(builddir)/HarvLibrary.a

