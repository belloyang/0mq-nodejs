#include "PSFDetector_Windows.h"

PSFDetector_Windows::PSFDetector_Windows(const std::shared_ptr<ILogger>& logger)
:  IPSFDetector(logger)
{
  __DEV_CALLSTACK_FUNC__;
}

std::vector<sPSFDeviceInfo_t> PSFDetector_Windows::listDevices() const
{
  __DEV_CALLSTACK_FUNC__;
  std::vector<sPSFDeviceInfo_t> ret;

  //tss_psflib::get drives mask (each bit stands for drive letter starting from 'A')
    const DWORD drivesMask = ::GetLogicalDrives();
    for (DWORD bitIdx = 0; bitIdx < sizeof(DWORD) * 8; bitIdx++)
    {
      if ((drivesMask & (1U << bitIdx)))
      {
        sPSFDeviceInfo_t info; ::memset(&info, 0, sizeof(sPSFDeviceInfo_t));
        const char deviceName[] = { (char)('A' + bitIdx), ':', '\0' };
        const char devicePath[] = {'\\', '\\', '.', '\\', (char)('A' + bitIdx), ':', '\0' };
        ::memcpy(info.deviceName, deviceName, sizeof(deviceName));
        ::memcpy(info.devicePath, devicePath, sizeof(devicePath));
        ret.emplace_back(info);
      }
    }

  return ret;
}
