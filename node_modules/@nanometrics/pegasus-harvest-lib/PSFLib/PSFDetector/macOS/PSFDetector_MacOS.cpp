#include "PSFDetector_MacOS.h"

#include <PlatformUtils/PlatformUtils.h>

#include <sys/types.h>
#include <dirent.h>
#include <sys/stat.h>
#include <unistd.h>
#include <cstring>
#include <errno.h>

PSFDetector_MacOS::PSFDetector_MacOS(const std::shared_ptr<ILogger>& logger)
:  IPSFDetector(logger)
{
  __DEV_CALLSTACK_FUNC__;
}

std::vector<sPSFDeviceInfo_t> PSFDetector_MacOS::listDevices() const
{
  __DEV_CALLSTACK_FUNC__;
  std::vector<sPSFDeviceInfo_t> ret;
  //tss_psflib::open '/sys/block' dir
  DIR* const sysBlockDir = ::opendir("/dev");
  if (sysBlockDir == nullptr)
  {
    const uint32_t errorCode = PlatformUtils::getInstance()->getLastErrorCode();
    m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_SYSTEM, errorCode,
      "Failed to open '/dev' folder: %s",
      PlatformUtils::getInstance()->getErrorString(errorCode).c_str());
    return ret;
  }

  struct dirent* dent = nullptr;
  const int sysBlockDirFd = dirfd(sysBlockDir);
  //tss_psflib::iterate through '/sys/block' folder
    while ((dent = readdir(sysBlockDir)) != NULL)
    {
      //tss_psflib::skip "." and ".." folders
      if (strcmp(dent->d_name, ".") == 0 || strcmp(dent->d_name, "..") == 0)
        continue;

      //tss_psflib::skip loop devices
      if (::strncmp(dent->d_name, "loop", 4) == 0)
        continue;

      struct stat st;
      if (::fstatat(sysBlockDirFd, dent->d_name, &st, 0) < 0)
      {
        const uint32_t errorCode = PlatformUtils::getInstance()->getLastErrorCode();
        m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_SYSTEM, errorCode,
          "Failed to get '%s' stats - %s",
          dent->d_name,
          PlatformUtils::getInstance()->getErrorString(errorCode).c_str());
        continue;
      }

      if (::strncmp(dent->d_name, "disk", 4) == 0 && ::strlen(dent->d_name) <= 6)
      {
    	sPSFDeviceInfo_t info; ::memset(&info, 0, sizeof(sPSFDeviceInfo_t));
        const std::string blockDevicePath = std::string("/dev/") + dent->d_name;
        ::strncpy(info.deviceName, dent->d_name, sizeof(DeviceName_t));
        ::strncpy(info.devicePath, blockDevicePath.c_str(), sizeof(DevicePath_t));
        m_logger->info(__THIS_FUNC__, dent->d_name);
        ret.push_back(info);
      }
    }
    //tss_psflib::close '/sys/block' dir
    ::closedir(sysBlockDir);
  return ret;
}
