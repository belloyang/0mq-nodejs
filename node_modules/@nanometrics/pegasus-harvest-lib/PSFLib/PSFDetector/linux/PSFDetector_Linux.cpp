#include "PSFDetector_Linux.h"

#include <PlatformUtils/PlatformUtils.h>

#include <sys/types.h>
#include <dirent.h>
#include <sys/stat.h>
#include <unistd.h>
#include <cstring>

PSFDetector_Linux::PSFDetector_Linux(const std::shared_ptr<ILogger>& logger)
:  IPSFDetector(logger)
{
  __DEV_CALLSTACK_FUNC__;
}

std::vector<sPSFDeviceInfo_t> PSFDetector_Linux::listDevices() const
{
  __DEV_CALLSTACK_FUNC__;
  std::vector<sPSFDeviceInfo_t> ret;
  // open '/sys/block' dir
  DIR* const sysBlockDir = ::opendir("/sys/block");
  if (sysBlockDir == nullptr)
  {
    const uint32_t errorCode = PlatformUtils::getInstance()->getLastErrorCode();
    m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_SYSTEM, errorCode,
        "Failed to open '/sys/block' folder: %s",
        PlatformUtils::getInstance()->getErrorString(errorCode).c_str());
    return ret;
  }

  struct dirent* dent = nullptr;
  const int sysBlockDirFd = ::dirfd(sysBlockDir);
  //tss_psflib::iterate through '/sys/block' folder
  while ((dent = readdir(sysBlockDir)) != NULL)
  {
    // skip "." and ".." folders
    if (strcmp(dent->d_name, ".") == 0 || strcmp(dent->d_name, "..") == 0)
    {
      continue;
    }

    struct stat st;
    if (::fstatat(sysBlockDirFd, dent->d_name, &st, 0) < 0)
    {
      const uint32_t errorCode = PlatformUtils::getInstance()->getLastErrorCode();
      m_logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_SYSTEM, errorCode,
        "Failed to get '%s' stats: %s",
        dent->d_name,
        PlatformUtils::getInstance()->getErrorString(errorCode).c_str());
      continue;
    }

    if (S_ISDIR(st.st_mode))
    {
      sPSFDeviceInfo_t info; ::memset(&info, 0, sizeof(sPSFDeviceInfo_t));
      const std::string blockDevicePath = std::string("/dev/") + dent->d_name;
      ::strncpy(info.deviceName, dent->d_name, sizeof(DeviceName_t));
      ::strncpy(info.devicePath, blockDevicePath.c_str(), sizeof(DevicePath_t));
      ret.push_back(info);
    }
  }
  // close '/sys/block' dir
  ::closedir(sysBlockDir);
  return ret;
}
