#ifndef SearchEngine_h__
#define SearchEngine_h__

#include "../../psflib_defines.h"

#include "IDichotomiser.h"

#include <memory>

/** 
 * search engine
 */
class SearchEngine
{
public:
  SearchEngine() {}
  virtual ~SearchEngine() {}

  /**
   * Dichotomy search
   * @param from          search range 'from' value
   * @param to            search range 'to' value
   * @param dichotomiser  dichotomizer instance (processes and divides search range till shrunk to 1 element)
   * @return  range value where dichotomy stopped (-1 on failure)
   */
  size_t dichotomySearch(size_t from, size_t to, const std::shared_ptr<IDichotomiser>& dichotomiser) const
  {
    __DEV_CALLSTACK_FUNC__;
    size_t newFrom = from;
    size_t newTo = to;
    //tss_psflib::shrink range while possible
    while (dichotomiser->shrinkRange(from, to, newFrom, newTo))
    {
      //tss_psflib::check if ranges shrunk to single element -> return it
      if (newFrom == newTo)
      {
        return newFrom;
      }

      from = newFrom;
      to = newTo;
    }

    //tss_psflib::range shrinking failed -> assume that element not found
    return -1;
  }
};

#endif //SearchEngine_h__
