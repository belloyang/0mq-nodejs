#ifndef MinSequenceEndDichotomiser_h__
#define MinSequenceEndDichotomiser_h__

#include "../../psflib_defines.h"
#include "IDichotomiser.h"

class PSFVolume;
class PSFSection;

/**
 * Search dichotomiser for search engine to seek the first (lowest data element sequenceEndIndex) non-empty section
 */
class MinSequenceEndDichotomiser : public IDichotomiser
{
public:
  /**
   * MinSequenceEndDichotomiser constructor
   * @param volume  volume to perform a search on
   * @param logger  logger instance
   */
  MinSequenceEndDichotomiser(const PSFVolume* volume, const std::shared_ptr<ILogger>& logger);
  /**
   * MinSequenceEndDichotomiser destructor
   */
  ~MinSequenceEndDichotomiser();

  virtual bool shrinkRange(size_t from, size_t to, size_t& newFrom, size_t& newTo) const __OVERRIDES__(IDichotometer);

private:
  bool isLess(const PSFSection* pSection1, const PSFSection* pSection2) const;

private:
  const PSFVolume* m_volume;
  PSFSection* m_fromSection;
  PSFSection* m_toSection;
  PSFSection* m_middleSection;

  // not implemented
  MinSequenceEndDichotomiser(const MinSequenceEndDichotomiser&) = delete;
  MinSequenceEndDichotomiser& operator=(const MinSequenceEndDichotomiser&) = delete;
};

#endif //MinSequenceEndDichotomiser_h__
