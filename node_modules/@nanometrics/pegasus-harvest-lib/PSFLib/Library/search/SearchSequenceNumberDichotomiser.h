#ifndef SearchSequenceNumberDichotomiser_h__
#define SearchSequenceNumberDichotomiser_h__

#include "../../psflib_defines.h"
#include "IDichotomiser.h"

class PSFVolume;
class PSFSection;

/**
 * Search comparator for search engine to seek the last (highest data element sequenceEndIndex) non-empty section
 */
class SearchSequenceNumberDichotomiser : public IDichotomiser
{
public:
  /**
   * SearchSequenceNumberDichotomiser constructor
   * @param volume          volume to perform search on
   * @param sequenceNumber  sequence number to search for
   * @param logger          logger instance
   */
  SearchSequenceNumberDichotomiser(const PSFVolume* volume, const sequence_number_t sequenceNumber,
      const std::shared_ptr<ILogger>& logger);
  /**
   * SearchSequenceNumberDichotomiser destructor
   */
  ~SearchSequenceNumberDichotomiser();

  virtual bool shrinkRange(size_t from, size_t to, size_t& newFrom, size_t& newTo) const __OVERRIDES__(IDichotometer);

private:
  bool _isAscendingRange(const sPSFSectionHeader_t* from, const sPSFSectionHeader_t* to) const;

private:
  const PSFVolume* m_volume;
  const sequence_number_t m_sequenceNumber;
  PSFSection* m_fromSection;
  PSFSection* m_toSection;
  PSFSection* m_middleSection;

  // not implemented
  SearchSequenceNumberDichotomiser(const SearchSequenceNumberDichotomiser&);
  SearchSequenceNumberDichotomiser& operator=(const SearchSequenceNumberDichotomiser&);
};

#endif //PSFVolume_h__
