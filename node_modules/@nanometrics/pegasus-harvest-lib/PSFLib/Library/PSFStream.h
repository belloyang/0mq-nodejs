#ifndef PSFStream_h__
#define PSFStream_h__

#include "../psflib_defines.h"

#include <Logger/ILogger.h>

#include <memory>

#include "cursors/PSFReadCursor.h"
#include "cursors/PSFWriteCursor.h"
#include "IPSFSectionUpdateDelegate.h"

class PSFVolume;
class PSFSection;
class PSFDataElement;

/**
 * PSF stream - is used for I/O operation to PSF volume
 */
class PSFStream
{
public:
  /**
   * PSFStream constructor
   * @param volume  volume that stream holds
   * @param logger  logger instance
   */
  PSFStream(const PSFVolume* volume, const std::shared_ptr<ILogger>& logger);
  /**
   * PSFStream destructor
   */
  ~PSFStream() = default;

  FORCE_INLINE const PSFVolume* getVolume() const { return m_volume; }

  /**
   * PSFSection flush predicate setter
   * @param flush predicate to set
   */
  FORCE_INLINE void setSectionUpdateDelegate(const std::shared_ptr<IPSFSectionUpdateDelegate>& delegate) { m_sectionUpdateDelegate = delegate; }

  /**
   * 'End-of-File' checker
   * @return  returns if reading cursor reached file end (volume end) -> reading cursor == writing cursor
   */
  bool is_eof() const;
  /**
   * 'Begin-of-File' checker
   * @return  returns if reading cursor is set to the beginning of the volume
   */
  bool is_bof() const;

  /**
   * Writes data to volume
   * @param type      data type
   * @param pData     data buffer
   * @param dataSize  data buffer size
   * @return amount of bytes written to volume (0 - on failure)
   */
  size_t write(const message_type_t type, const void* pData, const size_t dataSize);
  /**
   * Writes PSFDataElement to volume
   * @param pDataElement  data element to write
   * @return amount of bytes written to volume (0 - on failure)
   */
  size_t write(PSFDataElement* pDataElement);
  /**
   * Reads next data element from volume and advances reading cursor to the next position
   * @param output  read PSFDataElement
   * @return  amount of bytes read
   */
  size_t readNext(PSFDataElement& output);
  /**
   * Reads previous data element from volume and advances reading cursor to the previous position
   * @param output  read PSFDataElement
   * @return  amount of bytes read
   */
  size_t readPrev(PSFDataElement& output);

  /**
   * Sets reading cursor to specified position (before element that has specified sequence index)
   * @param sequenceIndex data element sequence index to set reading cursor before
   * @return new reading cursor position (sequence number) on success (PSF_SEQUENCE_NUMBER_INVALID - on failure)
   */
  sequence_number_t rseek(const sequence_number_t sequenceIndex);
  /**
   * Sets reading cursor to the end of the volume
   * @return new reading cursor position (sequence number) -> should be latest written element's sequence number + 1
   */
  sequence_number_t rseek_end();

  /**
   * Tells current reading cursor position (sequence number that cursor is set to)
   * @return  current sequence number of data element that cursor is set before
   */
  sequence_number_t rtell() const;
  /**
   * Pushes read cursor state to stack
   */
  void rpush();
  /**
   * Restores read cursor state from stack
   */
  void rpop();

  /**
   * Tells sequence number for the next element to be written
   * @return  sequence number for the next element to be written
   */
  sequence_number_t wtell() const;

  /**
   * Flushes buffers to underlying context
   */
  bool flush();

private:
  const std::shared_ptr<ILogger> m_logger;
  const PSFVolume* m_volume;
  std::shared_ptr<IPSFSectionUpdateDelegate> m_sectionUpdateDelegate;
  PSFReadCursor m_readCursor;
  PSFWriteCursor m_writeCursor;
};

#endif //PSFStream_h__
