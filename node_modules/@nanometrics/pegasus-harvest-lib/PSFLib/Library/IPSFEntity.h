#ifndef IPSFEntity_h__
#define IPSFEntity_h__

#include "../psflib_defines.h"

#include <Logger/ILogger.h>
#include <Hasher/IHasher.h>
#include <IOContext/IIOContext.h>

#include <memory>

/// <summary>
/// Basic IPSFObject interface (abstract class)
/// </summary>
class IPSFEntity
{
public:
  /**
   * IPSFEntity destructor
   */
  virtual ~IPSFEntity() = default;

  /**
   * Hasher getter
   * @return IHasher object captured by PSF entity object
   */
  FORCE_INLINE const std::shared_ptr<IHasher>& getHasher() const { return m_hasher; }

  /**
   * Logger getter
   * @return ILogger object captured by PSF entity object
   */
  FORCE_INLINE const std::shared_ptr<ILogger>& getLogger() const { return m_logger; }

  FORCE_INLINE bool isValid() const { return m_bIsValid; }

protected:
  /**
   * IPSFEntity protected constructor
   * @param hasher    hasher instance
   * @param logger    logger instance
   */
  IPSFEntity(const std::shared_ptr<IHasher>& hasher, const std::shared_ptr<ILogger>& logger);

  /**
   * Loads PSF entity from IO context
   * @param context  I/O context to load entity from
   * @param offset  offset in I/O context to load PSF entity at
   * @return      true if entity loaded; false - otherwise
   */
  virtual bool _loadFromContext(const std::shared_ptr<IIOContext>& context, io_offset_t offset) = 0;

protected:
  //! Hasher instance
  const std::shared_ptr<IHasher> m_hasher;
  //! Logger instance
  const std::shared_ptr<ILogger> m_logger;
  //! is valid
  bool m_bIsValid;
};

#endif //IPSFEntity_h__
