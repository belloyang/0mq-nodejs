#ifndef ISingleton_h__
#define ISingleton_h__

template <class _TClass>
class ISingleton
{
public:
  static _TClass* getInstance()
  {
    if (s_instance == nullptr)
    {
      s_instance = new _TClass();
    }
    return s_instance;
  }

  static void destroyInstance()
  {
    if (s_instance != nullptr)
    {
      delete s_instance;
      s_instance = nullptr;
    }
  }

protected:
  ISingleton() {}
  virtual ~ISingleton() {}

protected:
  static _TClass* s_instance;
};


template <class _TClass>
_TClass* ISingleton<_TClass>::s_instance = nullptr;

#endif //ISingleton_h__
