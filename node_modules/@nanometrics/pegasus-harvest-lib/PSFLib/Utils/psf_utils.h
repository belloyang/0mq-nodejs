#ifndef PSFUtils_h__
#define PSFUtils_h__

#include "../psflib_defines.h"

#include <chrono> // system_clock, nanoseconds

namespace psf_utils
{
  //! Get current system time as a PSF timestamp.
  timestamp_t get_timestamp();

  //! Convert PSF timestamp to a human-readable calendar time with format YYYY-MM-DD HH:MM:SS.mmm UTC.
  void timestamp_to_string(char* buf, size_t sz, timestamp_t t);

  //! Version of gmtime() to resolve year-2038 issue on both 64-bit and 32-bit platforms.
  //
  // A version of gmtime() that is guaranteed to workaround the year 2038 problem
  // on 64-bit as well as 32-bit platforms. This implementation checks if time_t is
  // 64-bit, in which case the C-runtime library version is used. Otherwise, an
  // implementation copied from libmseed is used, with authorship/copyright notice
  // as shown below.

  /* pivotal_gmtime_r - a replacement for gmtime/localtime/mktime
                      that works around the 2038 bug on 32-bit
                      systems. (Version 4)

   Copyright (C) 2009  Paul Sheer

   Redistribution and use in source form, with or without modification,
   is permitted provided that the above copyright notice, this list of
   conditions, the following disclaimer, and the following char array
   are retained.

   Redistribution and use in binary form must reproduce an
   acknowledgment: 'With software provided by http://2038bug.com/' in
   the documentation and/or other materials provided with the
   distribution, and wherever such acknowledgments are usually
   accessible in Your program.

   This software is provided "AS IS" and WITHOUT WARRANTY, either
   express or implied, including, without limitation, the warranties of
   NON-INFRINGEMENT, MERCHANTABILITY or FITNESS FOR A PARTICULAR
   PURPOSE. THE ENTIRE RISK AS TO THE QUALITY OF THIS SOFTWARE IS WITH
   YOU. Under no circumstances and under no legal theory, whether in
   tort (including negligence), contract, or otherwise, shall the
   copyright owners be liable for any direct, indirect, special,
   incidental, or consequential damages of any character arising as a
   result of the use of this software including, without limitation,
   damages for loss of goodwill, work stoppage, computer failure or
   malfunction, or any and all other commercial damages or losses. This
   limitation of liability shall not apply to liability for death or
   personal injury resulting from copyright owners' negligence to the
   extent applicable law prohibits such limitation. Some jurisdictions
   do not allow the exclusion or limitation of incidental or
   consequential damages, so this exclusion and limitation may not apply
   to You.
*/
  struct tm* gmtime(int64_t *timep, struct tm *result);

  /**
   * Small helper to operate with timestamps in library terms (in nanoseconds)
   */
  struct tm* gmtime_from_timestamp(const timestamp_t time, struct tm *result);

  /**
   * Calculates number of pages required to store DataType element in a PSFDataElement entity (actual data size read/written)
   */
  template <typename DataType> constexpr uint32_t get_data_element_size_in_pages()
  {
    //tss_harvlib::in PSF data commences right after the data element header
    return (sizeof(DataType) + sizeof(sPSFDataElementHeader_t) - 1) / PSF_PAGE_SIZE_BYTES + 1;
  }

  /**
   * Calculates number of data elements that can be stored in one section
   */
  template <typename DataType> constexpr uint32_t get_data_elements_per_section_max()
  {
    //records per chapter = chapter size in pages - 1(for chapter header) / record size in pages
    return (PSF_CHAPTER_SIZE_PAGES - 1) / psf_utils::get_data_element_size_in_pages<DataType>();
  }
}

#endif //PSFUtils_h__
