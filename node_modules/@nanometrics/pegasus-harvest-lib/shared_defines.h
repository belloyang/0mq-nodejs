#ifndef shared_defines_h__
#define shared_defines_h__

#include <stddef.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

// macro: integer value with only nr-th bit set
#define BIT(nr) (1UL << (nr))

// macro: number of elements in array
#define NUM_ELEMENTS(a) ( (sizeof(a)) / (sizeof(a[0])) )

// macro: delete object and reset pointer to nullptr
//        note: not to be used on array of objects created with new[]
#define SAFE_DELETE(a) do { if (a != nullptr) { delete a; a = nullptr; } } while(false)

#define __STRINGIFY__(x) #x
#define __TO_STRING__(x) __STRINGIFY__(x)

#if defined(__GNUC__)
  #define __COMPILER_NAME__   "gcc-" __TO_STRING__(__GNUC__) "." __TO_STRING__(__GNUC_MINOR__) "." __TO_STRING__(__GNUC_PATCHLEVEL__)
#elif defined(__clang__)
  #define __COMPILER_NAME__   "clang-" __TO_STRING__(_clang_major__) "." __TO_STRING__(__clang_minor__) "." __TO_STRING__(__clang_patchlevel__)
#elif defined (_MSC_VER )
  #define __COMPILER_NAME__   "MSC-" __TO_STRING__(_MSC_FULL_VER)
#elif defined(__MINGW32__)
  #define __COMPILER_NAME__   "MinGW-32-" __TO_STRING__(__MINGW32_MAJOR_VERSION) "." __TO_STRING__(__MINGW32_MINOR_VERSION)
#elif defined(__MINGW64__)
  #define __COMPILER_NAME__   "MinGW-64-" __TO_STRING__(__MINGW64_VERSION_MAJOR) "." __TO_STRING__(__MINGW64_VERSION_MINOR)
#else
  #define __COMPILER_NAME__   "<other>"
#endif

// defines for platform
#if defined(STM32) || defined(STM32H743xx) || defined(STM32H753xx)
  #define DEV_PLATFORM_STM32
#elif defined(__WIN32)
  #define DEV_PLATFORM_WIN32
#elif defined(__linux__)
  #define DEV_PLATFORM_LINUX
#elif defined(__APPLE__)
  #define DEV_PLATFORM_MACOS
#else
  #error "Unsupported platform"
#endif

//! PSF timestamp type. POSIX time with nanosecond resolution.
typedef int64_t timestamp_t;
//! time difference type (nanoseconds)
typedef int64_t timediff_t;

//! 32-bits long hash
typedef union
{
  //! packed 32-bits value
  uint32_t value;
  //! Raw data
  char data[4];
} Hash32_t;

//tss::__DEBUG__ macro definition (if not enforced -> check if should be defined)
#if !defined(__DEBUG__)
  #if defined(DEV_PLATFORM_WIN32)
    #if defined(_DEBUG) || defined(DEBUG)
      #define __DEBUG__
    #endif
  #else
    #if defined(DEBUG)
      #define __DEBUG__
    #endif 
  #endif //defined(DEV_PLATFORM_WIN32)
#endif //!defined(__DEBUG__)

/**
 * Error category enumeration used by all libraries.
 * Each library makes independent use of error categories as needed, and also defines its own error codes independently.
 */
typedef enum : uint32_t
{
  ERROR_CATEGORY_UNKNOWN  = 0, /*!< unknown category */
  ERROR_CATEGORY_SYSTEM   = 1, /*!< system errors (I/O, etc.) */
  ERROR_CATEGORY_LIBRARY  = 2, /*!< library category */
  ERROR_CATEGORY_HARDWARE = 3, /*!< Hardware errors */
  ERROR_CATEGORIES_COUNT /*!< categories count */
} eErrorCategory;

//tss::defines for attributes
#if defined(_MSC_VER)
  #define __ATTR_ALIGNED__(n) __declspec(align(n))
  #define __ATTR_DEPRECATED__ __declspec(deprecated)
  #define __ATTR_WEAK__ __declspec(selectany)
  #define __STD_CALL__ __stdcall
  #define __CDECL__ __cdecl
  #define FORCE_INLINE  __forceinline
  #define FORCE_NO_INLINE __declspec(noinline)
  #define __PACKED_STRUCT__(__Body__) __pragma(pack(push, 1)) struct __Body__ __pragma(pack(pop))
  #define __PACKED_ALIGNED_STRUCT__(n, __Body__) __pragma(pack(push, 1)) struct __declspec(align(n)) __Body__ __pragma(pack(pop))
#else //gcc
  #define __ATTR_ALIGNED__(n) __attribute__((aligned(n)))
  #define __ATTR_DEPRECATED__ __attribute__((deprecated))
  #define __ATTR_WEAK__ __attribute__((weak))
  #define __STD_CALL__ __attribute__((stdcall))
  #define __CDECL__ __attribute__((cdecl))
  #define FORCE_INLINE inline __attribute__((always_inline))
  #define FORCE_NO_INLINE __attribute__((noinline))
  #define __PACKED_STRUCT__(__Body__) struct __attribute__((__packed__)) __Body__
  #define __PACKED_ALIGNED_STRUCT__(n, __Body__) struct __attribute__((aligned(n))) __attribute__((__packed__)) __Body__
#endif

#ifdef __cplusplus
  #define EXTERN_C extern "C"
  #define DECLARE_NOCOPYABLE(className) \
    className(const className&) = delete; \
    className(className&&) = delete; \
    className& operator=(const className&) = delete; \
    className& operator=(className&&) = delete
#else
  #define EXTERN_C
#endif

#if defined(DEV_PLATFORM_STM32)
  #include <malloc.h>
  #define __aligned_alloc__(align, size) ::memalign(align, size)
  #define __aligned_free__(ptr) ::free(ptr)
#elif defined(DEV_PLATFORM_MACOS)
  #include <stdlib.h>
  inline void* __aligned_alloc_impl(size_t __alignment, size_t __size)
  {
    void* pRet = nullptr;
    ::posix_memalign(&pRet, __alignment, __size);
    return pRet;
  }
  #define __aligned_alloc__(align, size) __aligned_alloc_impl(align, size)
  #define __aligned_free__(ptr) ::free(ptr)
#elif defined(DEV_PLATFORM_LINUX)
  #include <malloc.h>
  #define __aligned_alloc__(align, size) ::aligned_alloc(align, size)
  #define __aligned_free__(ptr) ::free(ptr)
#elif defined(DEV_PLATFORM_WIN32)
  #include <malloc.h>
  #if defined(__MINGW32__) || defined(_MSC_VER)
    #define __aligned_alloc__(align, size) _aligned_malloc(size, align)
    #define __aligned_free__(ptr) _aligned_free(ptr)
  #else
    #define __aligned_alloc__(align, size) ::aligned_alloc(align, size)
    #define __aligned_free__(ptr) ::free(ptr)
  #endif
#endif
#define __is_aligned_to__(ptr, alignment) (((uintptr_t)(const void *)(ptr)) % (alignment) == 0)

//tss::CNU GCC defines
#if defined(__GNUC__) || defined(__cplusplus)
  #ifdef __EXCEPTIONS
    #define __EXCEPTIONS_ENABLED__ 1
  #else
    #define __EXCEPTIONS_ENABLED__ 0
  #endif
#else
  #define __EXCEPTIONS_ENABLED__ 0
#endif

#if defined(__GNUC__)
  #define GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
  #define __FUNC_NAME__ __PRETTY_FUNCTION__
  #define __FUNC_NAME_SHORT__ __FUNCTION__
  #define __THIS_FUNC__  __FUNC_NAME__
#elif defined(_MSC_VER)
  #define GCC_VERSION 0
  #define __FUNC_NAME__ __PRETTY_FUNCTION__
  #define __FUNC_NAME_SHORT__ __FUNCTION__
  #define __THIS_FUNC__  __FUNC_NAME_SHORT__
#else
  #define GCC_VERSION 0
  #define __FUNC_NAME__ __FUNCSIG__
  #define __FUNC_NAME_SHORT__ __FUNCSIG__
  #define __THIS_FUNC__ __FUNC_NAME_SHORT__
#endif

//tss::user defines
#ifdef __DEBUG__
  #include <assert.h>
  #define __ASSERT__(cond) assert(cond)
  #define __STATIC_ASSERT__(cond, msg) static_assert(cond, msg)
#else
  #define __ASSERT__(cond) void(cond)
  #define __STATIC_ASSERT__(cond, msg) static_assert(cond, msg)
#endif
#if defined(_MSC_VER)
  #define __DO_PRAGMA__(x) __pragma(x)
#else
  #define __DO_PRAGMA__(x) _Pragma(#x)
#endif
#define __AT__ __FILE__ "(" __TO_STRING__(__LINE__) ")"
#define __TO_DO__(x) __DO_PRAGMA__(message (__AT__": TODO: " #x))
#define __UNUSED__(x) ((void)x)
#define __OVERRIDES__(baseClass) override

//tss::callstack - will be used for debug-less environment If needed
#define __DEV_CALLSTACK__(entry)
#define __DEV_CALLSTACK_FUNC__ __DEV_CALLSTACK__(__FUNC_NAME__)

#endif //shared_defines_h__
