"use strict";
exports.__esModule = true;
var ffi = require("ffi");
var harvester_lib_path_1 = require("./harvester_lib_path");
var __api_funcs__ = ffi.Library(harvester_lib_path_1.HarvesterLibPath, {
    reset: [
        'void',
        []
    ],
    set_client_info: [
        'void',
        ['string' /*client name*/],
    ],
    set_logs_mask: [
        'void',
        ['int' /*mask*/],
    ],
    format: [
        'int' /*operation execution ID*/,
        ['string' /*digitizer path*/,
            'string' /*configuration path. Should be "" for default configuration to be used*/],
    ],
    list: ['int', []],
    get_digitizer_info: [
        'int' /*operation execution ID*/,
        ['string' /*digitizer path*/],
    ],
    harvest_data: [
        'int' /*operation execution ID*/,
        ['string' /*lib path*/,
            'string' /*harvest params JSON-string*/,
            'float' /*update step*/]
    ],
    harvest_soh: [
        'int' /*operation execution ID*/,
        ['string' /*lib path*/,
            'string' /*harvest params JSON-string*/,
            'int' /*channels mask*/,
            'float' /*update step*/]
    ],
    harvest_timing_soh: [
        'int' /*operation execution ID*/,
        ['string' /*lib path*/,
            'string' /*harvest params JSON-string*/,
            'float' /*update step*/]
    ],
    harvest_logs: [
        'int' /*operation execution ID*/,
        ['string' /*lib path*/,
            'string' /*harvest params JSON-string*/,
            'float' /*update step*/]
    ],
    load_harvesting_history: [
        'int' /*operation execution ID*/,
        ['string' /*lib path*/],
    ],
    flush_harvesting_history: [
        'int' /*operation execution ID*/,
        ['string' /*lib path*/],
    ],
    get_volume_info: ['int' /*operation execution ID*/,
        ['string' /*lib path*/,
            'int' /*volume id*/],
    ],
    read_volume: ['int' /*operation execution ID*/,
        ['string' /*lib path*/,
            'int' /*volume id*/],
    ],
    get_op_responses: [
        'string' /*output json string*/,
        ['int' /*operation execution Id*/,
            'int' /*max responses to fetch*/],
    ],
    stop_operation: [
        'bool' /*result*/,
        ['int' /*operation execution Id*/],
    ]
});
exports.HarvesterAPIs = {
    reset: function () {
        __api_funcs__.reset();
    },
    set_client_info: function (name) {
        return __api_funcs__.set_client_info(name);
    },
    set_logs_mask: function (mask) {
        return __api_funcs__.set_logs_mask(mask);
    },
    format: function (path, config_path) {
        return __api_funcs__.format(path, config_path);
    },
    list: function () {
        return __api_funcs__.list();
    },
    get_digitizer_info: function (path) {
        return __api_funcs__.get_digitizer_info(path);
    },
    load_opaque_data: function (libPath, lowerTimeMicroSecs, upperTimeMicroSecs) {
        return __api_funcs__.load_opaque_data(libPath, lowerTimeMicroSecs, upperTimeMicroSecs);
    },
    harvest_data: function (libPath, params, updateStep) {
        return __api_funcs__.harvest_data(libPath, JSON.stringify(params), updateStep);
    },
    harvest_soh: function (libPath, params, channelsMask, updateStep) {
        return __api_funcs__.harvest_soh(libPath, JSON.stringify(params), channelsMask, updateStep);
    },
    harvest_timing_soh: function (libPath, params, updateStep) {
        return __api_funcs__.harvest_timing_soh(libPath, JSON.stringify(params), updateStep);
    },
    harvest_logs: function (libPath, params, updateStep) {
        return __api_funcs__.harvest_logs(libPath, JSON.stringify(params), updateStep);
    },
    load_harvesting_history: function (libPath) {
        return __api_funcs__.load_harvesting_history(libPath);
    },
    flush_harvesting_history: function (libPath) {
        return __api_funcs__.flush_harvesting_history(libPath);
    },
    get_volume_info: function (libPath, volumeId) {
        return __api_funcs__.get_volume_info(libPath, volumeId);
    },
    read_volume: function (libPath, volumeId) {
        return __api_funcs__.read_volume(libPath, volumeId);
    },
    get_op_responses: function (exectionId, nResponsesMax) {
        return __api_funcs__.get_op_responses(exectionId, nResponsesMax);
    },
    stop_operation: function (executionId) {
        return __api_funcs__.stop_operation(executionId);
    }
};
