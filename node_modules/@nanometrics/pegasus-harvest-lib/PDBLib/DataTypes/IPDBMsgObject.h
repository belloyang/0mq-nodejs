#ifndef IPDBMsgObject_h__
#define IPDBMsgObject_h__

#include "../pdblib_defines.h"
#include "../Utils/pdb_utils.h"

#include <Library/PSFDataElement.h>

#include <cstring> //for memcpy

/// <summary>
/// IPDBObject abstract class.\n
/// It's abstraction for all the PDB types represented in this library.
/// </summary>
class IPDBMsgObject
{
protected:
  /**
  * IPDBObject constructor.
  * @param type  PDB message type (unique per each concrete PDB type implementation
  */
  IPDBMsgObject(const PDB_eMessageType_t type);

public:
  /**
   * IPDBObject destructor.
  */
  virtual ~IPDBMsgObject();

  /**
   * PDB type getter
   * @return  current PDB object's message type
   */
  FORCE_INLINE PDB_eMessageType_t getType() const { return m_type; }

  /**
   * PDB message id getter
   * @return PDB message id
   */
  FORCE_INLINE PDB_eMessageID_t getId() const { return static_cast<PDB_eMessageID_t>(m_type >> 16); }

  /**
   * PDB message version getter
   * @return PDB message version
   */
  FORCE_INLINE uint16_t getVersion() const { return static_cast<uint16_t>(m_type & 0x0000FFFF); }

  /**
   * Locks object buffer - exposes it's buffer and size.
   * @param pBuffer    pointer to expose object's buffer to
   * @param bufferSize  pointer to the value to store buffer size to
   * @return        true on success; false - otherwise
   */
  virtual bool lockBuffer(void** pBuffer, size_t* bufferSize) const;

  /**
   * Returns allocated buffer size
   * @return  allocated buffer size to keep Msg structure (actual PDB message size)
   */
  FORCE_INLINE uint32_t getSize() const { return m_size; }

  /**
   * Restores object from PSF data element
   * @param dataElementHandle    PSF DataElement handle
   * @return            true on success; false - otherwise
   */
  virtual bool restore(const PSFDataElement* pDataElement);

protected:
  /**
   * Allocates internal buffer of specified size to store all the data in it.
   * @param size  buffer's size in bytes to allocate
   * @return    pointer to the new allocated buffer
   */
  char* _alloc_buffer(const uint32_t size);

protected:
  //! assigned PDB message type
  const PDB_eMessageType_t m_type;
  struct
  {
    char* buffer; //! internal buffer allocated by _alloc_buffer(...) to store all the object's data
    uint32_t size; //! internal buffer's size
  } m_bufferState;
  uint32_t m_size; //! used buffer size
};

#endif //IPDBMsgObject_h__
