#ifndef MsgObsSync_h__
#define MsgObsSync_h__

#include "../IPDBMsgObject.h"

/// <summary>
/// MsgObsSync data type.\n
/// https://docs.google.com/document/d/14MP9wyTEQR713j-rs5dvP_3eoQgxDgeEWVewhYXv7Rg/edit#heading=h.x4htppnx49d0
/// </summary>
class MsgObsSync : public IPDBMsgObject
{
public:
  //! Header structure
  #pragma pack(push, 1) // compact byte packing
  typedef struct
  {
    //! POSIX time of GNSS PPS immediately before executing 'obsSync' command in digitizer. 
    timestamp_t preSyncTimeGnss;

    //! POSIX time of system at the GNSS PPS for which PreSyncTimeGnss was formed. 
    timestamp_t preSyncTimeSystem;

    //! POSIX time of GNSS PPS immediately after executing 'obsSync' command in digitizer. 
    timestamp_t postSyncTimeGnss;

    //! POSIX time of system at the GNSS PPS for which PostSyncTimeGnss was formed.
    timestamp_t postSyncTimeSystem;
    //! Volume reference index: contains a sequence number reference into all known volumes (excluding this volume) synchronised to this event
    PDB_sVolumeRefIndex_t index;
  } Header;
  #pragma pack(pop) // #pragma pack(push, 1)

public:
  //! MsgObsSync constructor
  MsgObsSync();

  //! MsgObsSync destructor
  virtual ~MsgObsSync() = default;

  /**
   * Initializes MsgObsSync object
   * @param header  data header
   * @return  true on success; false - otherwise
   */
  bool init(const Header& header);

  /**
   * Header getter
   * @return MsgObsSync header
   */
  FORCE_INLINE const Header* getHeader() const { return reinterpret_cast<Header*>(m_bufferState.buffer); }
};

#endif //MsgObsSync_h__
