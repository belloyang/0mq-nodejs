#ifndef MsgBleControl_h__
#define MsgBleControl_h__

#include "../IPDBMsgObject.h"

/// <summary>
/// MsgBleControl data type.\n
/// https://docs.google.com/document/d/1MmqKtqdSDSwQqB5bv-6PxX23_eUgODdgNfh0yyGyZy4/edit#heading=h.xr4wbxcy7h1a
/// </summary>
class MsgBleControl : public IPDBMsgObject
{
public:
  //! Header structure
  #pragma pack(push, 1) // compact byte packing
  typedef struct
  {
    //! POSIX time at which BLE interface changed state, nanosecond resolution
    timestamp_t timestamp;
    //! TRUE: BLE device connected. FALSE: BLE device disconnected.
    boolean_t bConnected;
    //! Unused data for alignment; set to 0
    uint8_t SPARE1[3];
    //! MAC address of the connected BLE device (mobile phone, etc). If connected == false, mac_addr is undefined
    uint8_t mac_addr[6];
    //! Unused data for alignment; set to 0
    uint8_t SPARE2[2];
    //! Volume reference index: contains a sequence number reference into all known volumes (excluding this volume) synchronised to this event
    PDB_sVolumeRefIndex_t index;
  } Header;
  #pragma pack(pop) // #pragma pack(push, 1)

public:
  //! MsgBleControl constructor
  MsgBleControl();

  //! MsgBleControl destructor
  virtual ~MsgBleControl() = default;

  /**
   * Initializes MsgBleControl object
   * @param header  data header
   * @return  true on success; false - otherwise
   */
  bool init(const Header& header);

  /**
   * Header getter
   * @return MsgBleControl header
   */
  FORCE_INLINE const Header* getHeader() const { return reinterpret_cast<Header*>(m_bufferState.buffer); }
};

#endif //MsgBleControl_h__
