#ifndef MsgSensorInput_h__
#define MsgSensorInput_h__

#include "../IPDBMsgObject.h"

/// <summary>
/// MsgSensorInput data type.\n
/// https://docs.google.com/document/d/1MmqKtqdSDSwQqB5bv-6PxX23_eUgODdgNfh0yyGyZy4/edit#heading=h.7t0t4c4iujw2
/// </summary>
class MsgSensorInput : public IPDBMsgObject
{
public:
  //! Header structure
  #pragma pack(push, 1) // compact byte packing
  typedef struct
  {
    //! POSIX time of first sample in the packet, nanosecond resolution
    timestamp_t timestamp;
    //! Physical sensor input number, 1-4
    uint8_t input;
    //! Flags enumeration
    typedef enum : uint8_t
    {
      FLAG_CLEAR                            = 0,      /*!< Unset (0) flag */
      FLAG_CLOCK_LOCKED                     = 1 << 0, /*!< Clock locked flag */
      FLAG_TIME_IS_QUESTIONABLE             = 1 << 1, /*!< Time is questionable flag */
      FLAG_POSITIVE_VE_LEAP_SECONDS_OCCURED = 1 << 2, /*!< Positive leap second occurred flag */
      FLAG_NEGATIVE_VE_LEAP_SECONDS_OCCURED = 1 << 3, /*!< Negative leap second occurred flag */
      FLAG_CLIPPING_DETECTED                = 1 << 4, /*!< Signal clipping detected flag */
      FLAG_BIG_ENDIAN                       = 1 << 5  /*!< endianness of acquired data. 0 - little-endian, 1- big-endian */
    } eFlags;
    //! eFlags combination
    uint8_t flags;
    //! media type contained by the frames number
    PDB_eMediaType_t media_type;
    //! number of samples contained in the packet
    uint16_t n_samples;
    //! sample rate structure
    PDB_sSampleRate_t sample_rate;
    //! Software gain applied to samples, typically an integral power of two. For example: The output of the digitizer decimation function may extend the sample size by 4 bits (eg. 24 bits to 28 bits). In that case, soft_gain == 16.0
    float soft_gain;
    //! Steim data frames. Refer to SEED Manual.
    SteimFrame_t frames[PDB_SENSOR_INPUT_FRAMES_COUNT];
  } Header;
  #pragma pack(pop) // #pragma pack(push, 1)

  //! Header getter
  FORCE_INLINE const Header* getHeader() const { return reinterpret_cast<Header*>(m_bufferState.buffer); }

public:
  /**
   * MsgSensorInput constructor
   */
  MsgSensorInput();

  /**
   * MsgSensorInput destructor
   */
  virtual ~MsgSensorInput() = default;

  /**
   * Initializes MsgSensorInput object.
   * @param header     header data
   * @return        true on success; false - otherwise
   */
  bool init(const Header& header);
};

#endif //MsgSensorInput_h__
