#ifndef pdb_utils_h__
#define pdb_utils_h__

#include "../pdblib_defines.h"

namespace pdb_utils
{
  //! Pegasus Data Buffer: default PSF library format configuration
  extern const sPSFFormatConfig_t PSF_FORMAT_CONFIGURATION_DEFAULT;

  double decode_sample_rate(const PDB_sSampleRate_t& sampleRate);
  double decode_sample_rate(int8_t factor, int8_t multiplier);
  double decode_sample_rate(uint16_t encoded_value);
  uint16_t encode_sample_rate(uint8_t factor, uint8_t multiplier);
  bool is_big_endian();
  bool is_little_endian();

  int32_t dop_to_fixed_point(const dop_t value);

  timediff_t get_packet_duration_nanoseconds(const uint32_t nSamples, const PDB_sSampleRate_t& sampleRate);

  // hours <-> nanoseconds conversions
  FORCE_INLINE timestamp_t hours_to_nanoseconds(const double hours)
  {
    __DEV_CALLSTACK_FUNC__;
    return static_cast<timestamp_t>(hours * 3600LL * 1000000000LL);
  }
  FORCE_INLINE double nanoseconds_to_hours(const timestamp_t nanoseconds)
  {
    __DEV_CALLSTACK_FUNC__;
    return (double)nanoseconds / (double)(3600LL * 1000000000LL);
  }

  // seconds <-> nanoseconds conversions
  FORCE_INLINE timestamp_t seconds_to_nanoseconds(const double seconds)
  {
    __DEV_CALLSTACK_FUNC__;
    return static_cast<timestamp_t>(seconds * 1000000000LL);
  }
  FORCE_INLINE double nanoseconds_to_seconds(const timestamp_t nanoseconds)
  {
    __DEV_CALLSTACK_FUNC__;
    return (double)nanoseconds / 1000000000.0;
  }

  // milliseconds <-> nanoseconds conversions
  FORCE_INLINE timestamp_t milliseconds_to_nanoseconds(const double milliseconds)
  {
    __DEV_CALLSTACK_FUNC__;
    return static_cast<timestamp_t>(milliseconds * 1000000LL);
  }
  FORCE_INLINE double nanoseconds_to_milliseconds(const timestamp_t nanoseconds)
  {
    __DEV_CALLSTACK_FUNC__;
    return (double)nanoseconds / 1000000.0;
  }

  // microseconds <-> nanoseconds conversions
  FORCE_INLINE timestamp_t microseconds_to_nanoseconds(const int64_t microseconds)
  {
    __DEV_CALLSTACK_FUNC__;
    return (microseconds * 1000LL);
  }
  FORCE_INLINE int64_t nanoseconds_to_microseconds(const timestamp_t nanoseconds)
  {
    __DEV_CALLSTACK_FUNC__;
    const timestamp_t HALF_MICROSECOND_IN_NANOSECONDS = 500LL;
    if (nanoseconds >= 0)
    {
      return ((nanoseconds + HALF_MICROSECOND_IN_NANOSECONDS) / 1000LL);
    }
    // negative timestamp
    return ((nanoseconds - HALF_MICROSECOND_IN_NANOSECONDS) / 1000LL);
  }
}

#endif //pdb_utils_h__
