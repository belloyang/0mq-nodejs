#ifndef ICLApplication_h__
#define ICLApplication_h__

#include "../shared_defines.h"

#include "ICLCommand.h"

#include <Logger/ILogger.h>

#include <string>
#include <map>
#include <memory>

class ICLApplication
{
protected:
  ICLApplication(const std::shared_ptr<ILogger>& logger);
  virtual ~ICLApplication() = default;

public:
  int run(int argc, char** argv);

protected:
  typedef ICLCommand*(ICLApplication::*CLCommandCreator)(void) const;
  #define CL_CREATOR_FUNCTOR(func) reinterpret_cast<CLCommandCreator>(&func)

  void _registerCommand(const std::string& name, CLCommandCreator creator);
  ICLCommand* _createCommand(const std::string& name) const;

protected:
  const std::shared_ptr<ILogger> m_logger;
  std::map<std::string, CLCommandCreator> m_commandCreators;
};

#endif //CLApp_h__
