#ifndef ICLCommand_h__
#define ICLCommand_h__

#include "../harvcl_defines.h"

#include <Logger/ILogger.h>
#include <Meters/Timers/ITimer.h>

#include <string>
#include <vector>
#include <memory>

class ICLCommand
{
protected:
#define CLCOMMAND_PARSE_HANDLER(handler) reinterpret_cast<ParseHandler>(&handler)
  typedef bool(ICLCommand::*ParseHandler)(const char* arg);
  
  ICLCommand(const std::string& name, const std::shared_ptr<ILogger>& logger);

public:
  virtual ~ICLCommand() = default;

  int run(int argc, char** argv);
  int printHelp() const;

  FORCE_INLINE const std::string& getName() const { return m_name; }

protected:
  void _registerArgument(const std::string& name, const ParseHandler handler,
      const std::string& description, const std::string& defaultValue = "");
  bool _parseArgs(int argc, char** argv);
  
  virtual int _runImpl() = 0;
  virtual std::string _getDescriptionImpl() const = 0;

protected:
  const std::string m_name;
  const std::shared_ptr<ILogger> m_logger;
  const std::shared_ptr<ITimer> m_timer;
  
  typedef struct
  {
    std::string name;
    ParseHandler parseHandler;
    std::string description;
    std::string defaultValue;
  } sArgument;
  std::vector<sArgument> m_registeredArgs;
};

#endif //ICLCommand_h__
