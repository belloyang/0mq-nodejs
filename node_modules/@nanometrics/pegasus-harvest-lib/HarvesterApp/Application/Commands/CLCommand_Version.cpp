#include "CLCommand_Version.h"

CLCommand_Version::CLCommand_Version(const std::shared_ptr<ILogger>& logger)
:  CLCommandBase("version", logger)
,  m_bShowAll(false)
{
  __DEV_CALLSTACK_FUNC__;
  //remove all registered arguments (this command has nothing to do with digitizer)
  m_registeredArgs.clear();
  //register the single optional argument
  this->_registerArgument("-all", CLCOMMAND_PARSE_HANDLER(CLCommand_Version::_parseShowAll),
      "specifies if application dependencies'/libraries' versions should be shown", "false");
}

bool CLCommand_Version::_parseShowAll(const char* /*arg*/)
{
  __DEV_CALLSTACK_FUNC__;
  //tss_harvcl::"-all" found -> it means show all libraries
  m_bShowAll = true;
  return true;
}

int CLCommand_Version::_runImpl()
{
  __DEV_CALLSTACK_FUNC__;
  if (m_bShowAll)
  {
    //tss_harvcl:showing all libraries/ versions
    m_logger->info(m_name.c_str(), "Versions:\n"
      "    IO library - v%s (%s, %s, %s, %s)\n"
      "    PSF library - v%s (%s, %s, %s, %s)\n"
      "    PDB library - v%s (%s, %s, %s, %s)\n"
      "    harvester library - v%s (%s, %s, %s, %s)\n"
      "    Harvester CL - v%s (%s, %s, %s, %s)",
      LIBIO_version_info.version_string, LIBIO_version_info.build_date, LIBIO_version_info.build_time, LIBIO_version_info.compiler, LIBIO_version_info.copyright,
      PSFLIB_version_info.version_string, PSFLIB_version_info.build_date, PSFLIB_version_info.build_time, PSFLIB_version_info.compiler, PSFLIB_version_info.copyright,
      PDBLIB_version_info.version_string, PDBLIB_version_info.build_date, PDBLIB_version_info.build_time, PDBLIB_version_info.compiler, PDBLIB_version_info.copyright,
      HARVLIB_version_info.version_string, HARVLIB_version_info.build_date, HARVLIB_version_info.build_time, HARVLIB_version_info.compiler, HARVLIB_version_info.copyright,
      HARVCL_version_info.version_string, HARVCL_version_info.build_date, HARVCL_version_info.build_time, HARVCL_version_info.compiler, HARVCL_version_info.copyright);
  }
  else
  {
    //tss_harvcl::showing only CL version
    m_logger->info(m_name.c_str(), "Versions:\n"
      "    Harvester CL - v%s (%s, %s, %s, %s)",
      HARVCL_version_info.version_string, HARVCL_version_info.build_date, HARVCL_version_info.build_time, HARVCL_version_info.compiler, HARVCL_version_info.copyright);
  }
  return 1;
}

std::string CLCommand_Version::_getDescriptionImpl() const
{
  __DEV_CALLSTACK_FUNC__;
  return std::string("Shows application's and dependencies versions");
}
