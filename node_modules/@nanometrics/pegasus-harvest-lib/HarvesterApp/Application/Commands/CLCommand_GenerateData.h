#ifndef CLCommand_GenerateData_h__
#define CLCommand_GenerateData_h__

#include "CLCommandBase.h"

class CLCommand_GenerateData : public CLCommandBase
{
public:
  CLCommand_GenerateData(const std::shared_ptr<ILogger>& logger);
  virtual ~CLCommand_GenerateData() = default;

private:
  virtual int _runImpl() __OVERRIDES__(ICLCommand);
  virtual std::string _getDescriptionImpl() const __OVERRIDES__(ICLCommand);
  
  bool _parseLibPath(const char* arg);
  bool _parseChannelsMask(const char* arg);
  bool _parsePacketsCount(const char* arg);
  bool _parseStartTimestamp(const char* arg);
  bool _parseLittleEndian(const char* arg);
  bool _parseMinGapSecs(const char* arg);
  bool _parseMaxGapSecs(const char* arg);
  bool _parseGapProbability(const char* arg);
  bool _parseSignalLevel(const char* arg);
  bool _parseNoiseLevel(const char* arg);
  bool _parseEncoding(const char* arg);

private:
  std::string m_libPath;
  uint8_t m_channelsMask;
  int32_t m_nPackets;
  bool m_useBigEndian;
  timestamp_t m_startTimestamp;
  uint32_t m_minGapSecs;
  uint32_t m_maxGapSecs;
  float m_gapProbability;
  double m_signalLevel; // peak level of sinusoid, fractional counts
  double m_noiseLevel; // RMS level of additive noise, fractional counts
  std::string m_encoding;
};

#endif //CLCommand_GenerateData_h__
