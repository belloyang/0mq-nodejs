#include "CLCommand_ListDevices.h"

#include <Operations/Operation_ListDevices.h>

#include <cinttypes>

class ListDevices_Delegate : public Operation_ListDevices::IDelegate
{
public:
  ListDevices_Delegate(const std::shared_ptr<ILogger>& logger)
    : m_logger(logger)
    , m_nDevices(0)
  {
    __DEV_CALLSTACK_FUNC__;
  }
  virtual ~ListDevices_Delegate() = default;

  virtual void onDeviceFound(IOperation* pOperation, const sPSFDeviceInfo_t& device) __OVERRIDES__(Operation_ListDevices::IDelegate)
  {
    __DEV_CALLSTACK_FUNC__;
    m_logger->info(pOperation->getName().c_str(), "Device name = '%.*s', path = '%.*s'",
      NUM_ELEMENTS(device.deviceName), device.deviceName,
      NUM_ELEMENTS(device.devicePath), device.devicePath);
    m_nDevices++;
  }
  virtual void onCompleted(IOperation* pOperation, const eOperationStatus /*status*/) __OVERRIDES__(Operation_ListDevices::IDelegate)
  {
    __DEV_CALLSTACK_FUNC__;
    m_logger->info(pOperation->getName().c_str(), "%" PRIu32 " devices found!", m_nDevices);
  }

private:
  const std::shared_ptr<ILogger> m_logger;
  uint32_t m_nDevices;
};

CLCommand_ListDevices::CLCommand_ListDevices(const std::shared_ptr<ILogger>& logger)
:  CLCommandBase("list", logger)
{
  __DEV_CALLSTACK_FUNC__;
}

int CLCommand_ListDevices::_runImpl()
{
  __DEV_CALLSTACK_FUNC__;
  const std::shared_ptr<IOperation> op = std::make_shared<Operation_ListDevices>(std::make_shared<ListDevices_Delegate>(m_logger));
  if (op->execute(m_hasher, m_logger))
    return 1;
  
  return -1;
}

std::string CLCommand_ListDevices::_getDescriptionImpl() const
{
  __DEV_CALLSTACK_FUNC__;
  return std::string("Lists all PSF devices available at the system");
}
