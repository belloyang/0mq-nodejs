#ifndef ITelemetryService_h__
#define ITelemetryService_h__

#include <TelemetryApiDefines.hpp>
#include <TelemetryPacketsFactory.hpp>
#include <TelemetryPacketsProcessor.hpp>
#include "EventsQueue.h"

#include <Logger/ILogger.h>
#include <func_ptr.h>

#include <string>
#include <memory>
#include <map>

struct Command
{
  typedef func_ptr<void()> Functor;
  const std::string description;
  const Functor functor;
};

class ITelemetryService
{
public:
  ITelemetryService(const std::string& name,
    const std::shared_ptr<TelemetryPacketsFactory>& factory,
    const std::shared_ptr<TelemetryPacketsProcessor>& processor,
    const std::shared_ptr<EventsQueue>& eventsQueue,
    const std::shared_ptr<ILogger>& logger);
  virtual ~ITelemetryService() = default;

  virtual bool processPacket(const TelemetryAPI::Packet& packet);
  virtual bool processCommand(const std::string& command);
  virtual bool processEvent(const Event& /*event*/) { return false; }
  virtual void tick(const timestamp_t /*now*/) {}
  virtual void stop() = 0;

  FORCE_INLINE const std::string& getName() const { return m_name; }
  FORCE_INLINE const std::map<std::string, Command>& getCommands() const { return m_commands; }

protected:
  void _registerCommand(const std::string& name, const Command& command);
  FORCE_INLINE void _pushEvent(const Event& event) { m_eventsQueue->pushEvent(event); }

protected:
  const std::string m_name;
  const std::shared_ptr<TelemetryPacketsFactory> m_packetsFactory;
  const std::shared_ptr<TelemetryPacketsProcessor> m_packetsProcessor;
  const std::shared_ptr<EventsQueue> m_eventsQueue;
  const std::shared_ptr<ILogger> m_logger;
  std::map<uint16_t, std::string> m_requestsMap;
  std::map<std::string, Command> m_commands;
  uint32_t m_nErrorsLogged = 0u;
};

#endif // ITelemetryService_h__
