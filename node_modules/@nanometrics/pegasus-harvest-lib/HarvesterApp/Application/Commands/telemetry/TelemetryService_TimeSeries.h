#ifndef TelemetryService_TimeSeries_h__
#define TelemetryService_TimeSeries_h__

#include "ITelemetryService.h"

#include <DataTypes/SensorTimeSeries/MsgSensorInput.h>
#include <DataFilters/IBaseFilter.h>
#include <DataFilters/IPacketInfoProvider.h>
#include <DataFilters/mem_pool.h>
#include <DataFilters/Data/PDBDataDesc.h>

#include <vector>
#include <memory>
#include <atomic>
#include <mutex>
#include <condition_variable>

class TelemetryService_TimeSeries : public ITelemetryService
{
public:
  TelemetryService_TimeSeries(const std::shared_ptr<TelemetryPacketsFactory>& factory,
    const std::shared_ptr<TelemetryPacketsProcessor>& processor,
    const std::shared_ptr<EventsQueue>& eventsQueue,
    const sHarvestParams& harvestParams,
    const std::shared_ptr<ILogger>& logger);
  virtual ~TelemetryService_TimeSeries() = default;

  virtual bool processPacket(const TelemetryAPI::Packet& packet) __OVERRIDES__(ITelemetryService);
  virtual bool processEvent(const Event& event) __OVERRIDES__(ITelemetryService);
  virtual void tick(const timestamp_t now) __OVERRIDES__(ITelemetryService);
  virtual void stop() __OVERRIDES__(ITelemetryService);

private:
  void _miniSEEDThread(std::shared_ptr<IBaseFilter> filter);
  void _stopMiniSEEDThread();
  // commands
  void _startStreaming();
  void _stopStreaming();

  void _logPacket(const TelemetryAPI::Packet& packet);
  uint32_t _getCompressionsMask(const MsgSensorInput::Header* packet) const;
  void _printSummary();

private:
  const sHarvestParams m_harvestParams;
  mem_pool<MsgSensorInput()> m_msgSensorInputsPool;
  mem_pool<PDBDataDesc(IPDBMsgObject*, sequence_number_t)> m_pdbDescsPool;
  struct
  {
    bool isStreaming = false;
    struct
    {
      uint32_t expectedSequenceNumber = 0u;
      uint32_t nPacketsReceived = 0u;
      uint32_t nPacketsMissed = 0u;
    } channels[4];
  } m_state;

  std::atomic<bool> m_bStopRequested;
  std::condition_variable m_dataPushedEvent;
  std::atomic<bool> m_miniSEEDThreadRunning;
  std::condition_variable m_stoppedEvent;
  std::mutex m_mutex;
  std::vector<PDBDataDesc*> m_dataDescs;
  sequence_number_t m_sequenceNumber;
  std::shared_ptr<IPacketInfoProvider> m_packetInfoProvider;
};

#endif // TelemetryService_TimeSeries_h__
