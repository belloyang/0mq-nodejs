#ifndef TelemetryService_SOH_h__
#define TelemetryService_SOH_h__

#include "ITelemetryService.h"

class TelemetryService_SOH : public ITelemetryService
{
public:
  TelemetryService_SOH(const std::shared_ptr<TelemetryPacketsFactory>& factory,
    const std::shared_ptr<TelemetryPacketsProcessor>& processor,
    const std::shared_ptr<EventsQueue>& eventsQueue,
    const std::shared_ptr<ILogger>& logger);
  virtual ~TelemetryService_SOH() = default;

  virtual bool processPacket(const TelemetryAPI::Packet& packet) __OVERRIDES__(ITelemetryService);
  virtual void tick(const timestamp_t now) __OVERRIDES__(ITelemetryService);
  virtual void stop() __OVERRIDES__(ITelemetryService);

private:
  void _requestSOH();
  void _printSummary();

  struct
  {
    timestamp_t lastSohRequestTime = 0ll;
    bool waitsForResponse = false;
    uint64_t lastKnownUptime = 0u;
    uint32_t nReboots = 0u;
    uint32_t nRequestsSent = 0u;
    uint32_t nResponsesReceived = 0u;
    uint32_t nResponsesLost = 0u;
  } m_state;
};

#endif // TelemetryService_SOH_h__
