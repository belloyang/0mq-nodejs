#ifndef EventsQueueu_h__
#define EventsQueueu_h__

#include <../shared_defines.h>

#include <queue>
#include <mutex>

struct Event
{
  uint32_t id;
  void* userData;
};

enum EventID : uint32_t
{
  REBOOT_DETECTED = 0
};

class EventsQueue
{
public:
  EventsQueue() = default;
  virtual ~EventsQueue() = default;

  FORCE_INLINE void pushEvent(const Event& event)
  {
    __DEV_CALLSTACK_FUNC__;
    std::lock_guard<std::mutex> lock(m_mutex);
    m_queue.push(event);
  }

  FORCE_INLINE void fetchEvents(std::queue<Event>& output)
  {
    __DEV_CALLSTACK_FUNC__;
    std::lock_guard<std::mutex> lock(m_mutex);
    m_queue.swap(output);
  }

private:
  std::mutex m_mutex;
  std::queue<Event> m_queue;
};

#endif // EventsQueueu_h__
