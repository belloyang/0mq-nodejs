#include "ITelemetryService.h"

ITelemetryService::ITelemetryService(const std::string& name,
  const std::shared_ptr<TelemetryPacketsFactory>& factory,
  const std::shared_ptr<TelemetryPacketsProcessor>& processor,
  const std::shared_ptr<EventsQueue>& eventsQueue,
  const std::shared_ptr<ILogger>& logger)
: m_name(name)
, m_packetsFactory(factory)
, m_packetsProcessor(processor)
, m_eventsQueue(eventsQueue)
, m_logger(logger)
{
  __DEV_CALLSTACK_FUNC__;
}

void ITelemetryService::_registerCommand(const std::string& name, const Command& command)
{
  __DEV_CALLSTACK_FUNC__;
  m_commands.insert(std::make_pair(name, command));
}

bool ITelemetryService::processPacket(const TelemetryAPI::Packet& packet)
{
  __DEV_CALLSTACK_FUNC__;
  switch (packet.header.type)
  {
    case TelemetryAPI::Acknowledgment::RESPONSE:
    {
      const auto& response = packet.acknowledgment.response;
      const auto& foundIt = m_requestsMap.find(response.request);
      if (foundIt != m_requestsMap.end())
      {
        switch (response.errorCode)
        {
          case TelemetryAPI::Error::ERROR_NONE:
            m_logger->info(m_name.c_str(), "'%s' request accepted", foundIt->second.c_str());
            break;
          default:
            m_logger->warning(m_name.c_str(), "'%s' request failed with error=0x%08x", foundIt->second.c_str(), response.errorCode);
            m_nErrorsLogged++;
            break;
        }
        return true;
      }
    }
    return false;

    default:
      return false;
  }
  return false;
}

bool ITelemetryService::processCommand(const std::string& command)
{
  __DEV_CALLSTACK_FUNC__;
  const auto& foundIt = m_commands.find(command);
  if (foundIt != m_commands.end())
  {
    m_logger->info(m_name.c_str(), "Running '%s' command (%s)", foundIt->first.c_str(), foundIt->second.description.c_str());
    foundIt->second.functor();
    return true;
  }
  return false;
}
