#include "CLCommandBase.h"

#include <Logger/loggers.h>
#include <Hasher/hashers.h>

#include <map>

CLCommandBase::CLCommandBase(const std::string& name, const std::shared_ptr<ILogger>& logger)
:  ICLCommand(name, logger)
,  m_hasher(std::make_shared<Murmur3Hasher>(__IO_SIZE_ALIGNMENT__, logger))
,  m_verbosity(ILogger::eLogScope::LOG_DEBUG)
{
  __DEV_CALLSTACK_FUNC__;
  this->_registerArgument("-hasher=", CLCOMMAND_PARSE_HANDLER(CLCommandBase::_parseHasher),
      "hasher to be used within PSF library (murmur3|null|crc)", "'murmur3'");
  this->_registerArgument("-v=", CLCOMMAND_PARSE_HANDLER(CLCommandBase::_parseVerbosity),
      "logs verbosity (0-NONE, 1-ERRORS, 2-WARNINGS, 3-INFO, 4-DEBUG)", "4");
}

bool CLCommandBase::_parseHasher(const char* arg)
{
  __DEV_CALLSTACK_FUNC__;
  const std::map<std::string, std::shared_ptr<IHasher>> hashersMap = {
      { "murmur3", std::make_shared<Murmur3Hasher>(__IO_SIZE_ALIGNMENT__, m_logger)},
      { "null", std::make_shared<NullHasher>(m_logger)},
      { "crc", std::make_shared<CRCHasher>(__IO_SIZE_ALIGNMENT__, std::make_shared<CRCDriver_Mpeg32_SW>(m_logger), m_logger)},
  };
  
  const std::string hasherName = std::string(arg);
  const auto& foundIt = hashersMap.find(hasherName);
  if (foundIt != hashersMap.end())
    m_hasher = foundIt->second;
  else
    m_logger->warning(m_name.c_str(), "Hasher '%s' is not defined! '%s' will be used!", 
        hasherName.c_str(), m_hasher->getName().c_str());
  return true;
}

bool CLCommandBase::_parseVerbosity(const char* arg)
{
  __DEV_CALLSTACK_FUNC__;
  const uint8_t verbosity = static_cast<uint8_t>(atoi(arg));
  const ILogger::eLogScope scopes[] = {
    ILogger::eLogScope::LOG_NONE,
    ILogger::eLogScope::LOG_ERROR,
    ILogger::eLogScope::LOG_WARNING,
    ILogger::eLogScope::LOG_INFO,
    ILogger::eLogScope::LOG_DEBUG
  };
  // include all the scopes covered (<=) by requested verbosity level
  if (verbosity < NUM_ELEMENTS(scopes))
  {
    uint8_t mask = ILogger::eLogScope::LOG_NONE;
    for (uint32_t i = 0; i <= verbosity; ++i)
    {
      mask |= scopes[i];
    }
    m_logger->setMask(mask);
    return true;
  }
  // report warning
  m_logger->warning(m_name.c_str(), "Verbosity should be in [0, 4] range");
  return false;
}
