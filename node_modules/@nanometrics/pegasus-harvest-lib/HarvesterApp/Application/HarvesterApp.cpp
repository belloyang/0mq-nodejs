#include "HarvesterApp.h"

#include "Commands/CLCommand_Format.h"
#include "Commands/CLCommand_ListDevices.h"
#include "Commands/CLCommand_Harvest.h"
#include "Commands/CLCommand_GenerateData.h"
#include "Commands/CLCommand_GenerateLogs.h"
#include "Commands/CLCommand_GenerateSOH.h"
#include "Commands/CLCommand_GenerateTimingSOH.h"
#include "Commands/CLCommand_VolumeInfo.h"
#include "Commands/CLCommand_ReadVolume.h"
#include "Commands/CLCommand_EraseVolume.h"
#include "Commands/CLCommand_InitDigitizer.h"
#include "Commands/CLCommand_SaveLibrary.h"
#include "Commands/CLCommand_LoadLibrary.h"
#include "Commands/CLCommand_DigitizerInfo.h"
#include "Commands/CLCommand_ShowHarvestingHistory.h"
#include "Commands/CLCommand_Telemetry.h"
#include "Commands/CLCommand_Version.h"

#if defined(DEV_PLATFORM_WIN32)
  #include <Windows.h>
#endif

HarvesterApp::HarvesterApp(const std::shared_ptr<ILogger>& logger)
:  ICLApplication(logger)
{
  __DEV_CALLSTACK_FUNC__;
  //tss_harv::request high priority for Win32 application
#if defined(DEV_PLATFORM_WIN32)
  const DWORD priority = HIGH_PRIORITY_CLASS;
  const BOOL bPrioritySet = ::SetPriorityClass(GetCurrentProcess(), priority);
  m_logger->info(__THIS_FUNC__, "Priority 0x%08x requested. Result = %s", (int)priority, bPrioritySet != 0 ? "TRUE" : "FALSE");
#endif

  //tss_harv::register supported commands
  this->_registerCommand("list",           CL_CREATOR_FUNCTOR(HarvesterApp::_createListCommand));
  this->_registerCommand("harvest",        CL_CREATOR_FUNCTOR(HarvesterApp::_createHarvestCommand));
  this->_registerCommand("format",         CL_CREATOR_FUNCTOR(HarvesterApp::_createFormatCommand));
  this->_registerCommand("generate-data",  CL_CREATOR_FUNCTOR(HarvesterApp::_createGenerateDataCommand));
  this->_registerCommand("generate-logs",  CL_CREATOR_FUNCTOR(HarvesterApp::_createGenerateLogsCommand));
  this->_registerCommand("generate-soh",   CL_CREATOR_FUNCTOR(HarvesterApp::_createGenerateSOHCommand));
  this->_registerCommand("generate-timing-soh", CL_CREATOR_FUNCTOR(HarvesterApp::_createGenerateTimingSOHCommand));
  this->_registerCommand("volume-info",    CL_CREATOR_FUNCTOR(HarvesterApp::_createVolumeInfoCommand));
  this->_registerCommand("read-volume",    CL_CREATOR_FUNCTOR(HarvesterApp::_createReadVolumeCommand));
  this->_registerCommand("erase-volume",   CL_CREATOR_FUNCTOR(HarvesterApp::_createEraseVolumeCommand));
  this->_registerCommand("save-library",   CL_CREATOR_FUNCTOR(HarvesterApp::_createSaveLibraryCommand));
  this->_registerCommand("load-library",   CL_CREATOR_FUNCTOR(HarvesterApp::_createLoadLibraryCommand));
  this->_registerCommand("init-digitizer", CL_CREATOR_FUNCTOR(HarvesterApp::_createInitDigitizerCommand));
  this->_registerCommand("digitizer-info", CL_CREATOR_FUNCTOR(HarvesterApp::_createDigitizerInfoCommand));
  this->_registerCommand("show-history",   CL_CREATOR_FUNCTOR(HarvesterApp::_createHarvestingHistoryCommand));
  this->_registerCommand("telemetry",      CL_CREATOR_FUNCTOR(HarvesterApp::_createTelemetryCommand));
  this->_registerCommand("version",        CL_CREATOR_FUNCTOR(HarvesterApp::_createVersionCommand));
}

ICLCommand* HarvesterApp::_createListCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_ListDevices(m_logger);
}
ICLCommand* HarvesterApp::_createHarvestCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_Harvest(m_logger);
}
ICLCommand* HarvesterApp::_createFormatCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_Format(m_logger);
}
ICLCommand* HarvesterApp::_createGenerateDataCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_GenerateData(m_logger);
}
ICLCommand* HarvesterApp::_createGenerateLogsCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_GenerateLogs(m_logger);
}
ICLCommand* HarvesterApp::_createGenerateSOHCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_GenerateSOH(m_logger);
}
ICLCommand* HarvesterApp::_createGenerateTimingSOHCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_GenerateTimingSOH(m_logger);
}
ICLCommand* HarvesterApp::_createVolumeInfoCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_VolumeInfo(m_logger);
}
ICLCommand* HarvesterApp::_createReadVolumeCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_ReadVolume(m_logger);
}
ICLCommand* HarvesterApp::_createEraseVolumeCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_EraseVolume(m_logger);
}
ICLCommand* HarvesterApp::_createSaveLibraryCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_SaveLibrary(m_logger);
}
ICLCommand* HarvesterApp::_createLoadLibraryCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_LoadLibrary(m_logger);
}
ICLCommand* HarvesterApp::_createInitDigitizerCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_InitDigitizer(m_logger);
}
ICLCommand* HarvesterApp::_createDigitizerInfoCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_DigitizerInfo(m_logger);
}
ICLCommand* HarvesterApp::_createHarvestingHistoryCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_ShowHarvestingHistory(m_logger);
}
ICLCommand* HarvesterApp::_createTelemetryCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_Telemetry(m_logger);
}
ICLCommand* HarvesterApp::_createVersionCommand() const
{
  __DEV_CALLSTACK_FUNC__;
  return new CLCommand_Version(m_logger);
}
