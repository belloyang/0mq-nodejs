#include "harvcl_defines.h"

#include "Application/HarvesterApp.h"

#include <Logger/loggers.h>

#include <DataTypes/DigitizerOperationLog/MsgOpaqueData.h>

#include <memory>
#include <stdexcept>

//#define SIMULATE_FORMAT
//#define SIMULATE_GENERATE_LOGS
//#define SIMULATE_GENERATE_DATA
//#define SIMULATE_GENERATE_SOH
//#define SIMULATE_GENERATE_TIMING_SOH
//#define SIMULATE_HARVEST
//#define SIMULATE_INIT_DIGITIZER
//#define SIMULATE_DIGITIZER_INFO
//#define SIMULATE_OPAQUE_DATA
//#define SIMULATE_VOLUME_INFO
//#define SIMULATE_SHOW_HISTORY
//#define SIMULATE_SHOW_VERSION
//#define SIMULATE_SAVE_LIBRARY
//#define SIMULATE_LOAD_LIBRARY
//#define SIMULATE_TELEMETRY

#if defined(DEV_PLATFORM_WIN32)
  #define PSF_TEST_DEVICE "\\\\.\\F:"
#elif defined(DEV_PLATFORM_MACOS)
  #define PSF_TEST_DEVICE "/dev/disk1s1"
#elif defined(DEV_PLATFORM_LINUX)
  #define PSF_TEST_DEVICE "/dev/sdb"
  #define TELEMETRY_PORT "/dev/ttyUSB1"
#endif

int main(int argc, char** argv)
{
  __DEV_CALLSTACK_FUNC__;
  const std::shared_ptr<ILogger> logger = std::make_shared<ConsoleLogger>(512 + PDB_OPAQUE_DATA_SIZE);
  int iRet = 0;
  try
  {
    HarvesterApp app(logger);
#if defined(SIMULATE_FORMAT)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
  char* args[] = { (char*)"./Harvester",
    (char*)"format",
    (char*)"-i=" PSF_TEST_DEVICE,
    (char*)"-psf=1",
    (char*)"-fat32_size=64" //FAT32 partition size (in MiB)
  };
  iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_GENERATE_LOGS)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"generate-logs",
      (char*)"-i=" PSF_TEST_DEVICE,
      (char*)"-n=-1"
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_GENERATE_DATA)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"generate-data",
      (char*)"-i=" PSF_TEST_DEVICE,
      (char*)"-min_gap=0", //0 seconds minimum gap
      (char*)"-max_gap=0", //0 seconds maximum gap
      (char*)"-prob_gap=0.0", //gap probability
      (char*)"-n=-1",
      (char*)"-c=4",
      (char*)"-e=steim2" //encoding (steim1 | steim2)
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_GENERATE_SOH)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"generate-soh",
      (char*)"-i=" PSF_TEST_DEVICE,
      (char*)"-min_gap=0", //0 seconds minimum gap
      (char*)"-max_gap=0", //0 seconds maximum gap
      (char*)"-prob_gap=0.0", //gap probability
      (char*)"-n=-1"
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_GENERATE_TIMING_SOH)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"generate-timing-soh",
      (char*)"-i=" PSF_TEST_DEVICE,
      (char*)"-min_gap=0", //0 seconds minimum gap
      (char*)"-max_gap=0", //0 seconds maximum gap
      (char*)"-prob_gap=0.0", //gap probability
      (char*)"-n=-1"
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_HARVEST)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"harvest",
      (char*)"-i=" PSF_TEST_DEVICE,
      (char*)"-o=./TestsData",
      (char*)"-p=${TIME}",
      (char*)"-ext=1",
      (char*)"-d=1",
      (char*)"-m=-1",
      (char*)"-l=0", //smallest timestamp (POSIX, nanoseconds resolution, 64-bits signed integer)
      (char*)"-u=9223372036854775807" //biggest timestamp (POSIX, nanoseconds resolution, 64-bits signed integer)
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_INIT_DIGITIZER)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"init-digitizer",
      (char*)"-i=" PSF_TEST_DEVICE
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_DIGITIZER_INFO)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"digitizer-info",
      (char*)"-i=" PSF_TEST_DEVICE
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_OPAQUE_DATA)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"opaque-data",
      (char*)"-i=" PSF_TEST_DEVICE
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined (SIMULATE_VOLUME_INFO)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"volume-info",
      (char*)"-i=" PSF_TEST_DEVICE,
      (char*)"-id=1",
      (char*)"-s=-1"
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_SHOW_HISTORY)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"show-history",
      (char*)"-i=" PSF_TEST_DEVICE
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_SHOW_VERSION)
    char* args[] = { (char*)"./Harvester",
      (char*)"version",
      (char*)"-all"
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_SAVE_LIBRARY)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"save-library",
      (char*)"-i=" PSF_TEST_DEVICE,
      (char*)"-f=./library.img"
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_LOAD_LIBRARY)
#error "Make sure correct PSF_TEST_DEVICE is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"load-library",
      (char*)"-i=" PSF_TEST_DEVICE,
      (char*)"-f=./library.img"
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#elif defined(SIMULATE_TELEMETRY)
#error "Make sure correct TELEMETRY_PORT is defined and comment this line"
    char* args[] = { (char*)"./Harvester",
      (char*)"telemetry",
      (char*)"-i=" TELEMETRY_PORT
    };
    iRet = app.run(NUM_ELEMENTS(args), args);
#else
    iRet = app.run(argc, argv);
#endif
  }
  catch (const std::exception& e)
  {
    logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eHarvCLErrorCode::HARVCL_ERROR_COMMAND_FAILED,
      "Exception caught: '%s'", e.what());
  }
  catch (...)
  {
    logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eHarvCLErrorCode::HARVCL_ERROR_COMMAND_FAILED,
      "Exception caught: UNKNOWN");
  }
  return iRet;
}
