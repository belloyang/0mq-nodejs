#ifndef steim_common_h__
#define steim_common_h__

#include "../harvlib_defines.h"
#include <Utils/endianness_utils.h>

namespace steim
{
  union dword {
    int8_t d8[4];
    int16_t d16[2];
    int32_t d32;
  };

  static const uint32_t DATASETS_PER_FRAME = 16; //16 datasets can be packed within one Steim1|Steim2 frame:
  //1 nibble dataset, 1 first sample, 1 - last sample + 13 compressed samples for the very first frame in the record
  //1 nibble dataset + 15 compressed samples - for the following frames in the record

  enum CompressionEnums : int32_t
  {
    //these constants are required for Steim 1/2 compression
    BITS_4_MIN = -8,
    BITS_4_MAX = +7,
    BITS_5_MIN = -16,
    BITS_5_MAX = +15,
    BITS_6_MIN = -32,
    BITS_6_MAX = +31,
    BITS_8_MIN = -128,
    BITS_8_MAX = +127,
    BITS_10_MIN = -512,
    BITS_10_MAX = +511,
    BITS_15_MIN = -16384,
    BITS_15_MAX = +16383,
    BITS_16_MIN = -32768,
    BITS_16_MAX = +32767,
    BITS_29_MIN = -268435456,
    BITS_29_MAX = +268435455,
    BITS_30_MIN = -536870912,
    BITS_30_MAX = +536870911,
  };

  enum eBitMasks : uint32_t {
    BITS_4_MASK = 0x0000000f,
    BITS_5_MASK = 0x0000001f,
    BITS_6_MASK = 0x0000003f,
    BITS_8_MASK = 0x000000ff,
    BITS_10_MASK = 0x000003ff,
    BITS_15_MASK = 0x00007fff,
    BITS_30_MASK = 0x3fffffff,
  };

  struct PacketInfo
  {
    uint32_t compression; //compression nibble (15x2bit decoding nibbles)
    int32_t currentSampleIndex; //current sample index in samples array
    sample_t samples[8]; //this array buffers past samples. Minimum of 2 needed in this implementation
    uint32_t numberSamples; //number of samples
    sample_diff_t differences[7];
    struct 
    {
      uint8_t bitness; //! current differences bitness
      uint8_t count; //! current differences count
    } state_steim;
    int32_t emptyDatasets; //! amount of empty datasets in the packet (should be 15 for empty packet; 1 dataset - compression nibble, 15 datasets - compressed samples
  };

  //tss_harv::wrap SteimFrame_t with union for individual frames access
#pragma pack(push, 1) // enforce compact byte packing limited to the following item only
  typedef union
  {
    SteimFrame_t frame; //! SteimFrame data (16 x 4bytes data)
    struct
    {
      uint32_t compression; //! compression dataset (the very first (0th))
      uint32_t first_sample; //! first sample dataset (1st)
      uint32_t last_sample; //! last sample dataset (2nd)
      uint32_t datasets[13]; //! compressed samples datasets (3rd - 15th)
    } datasets1; //! the very first Steim frame representation
    struct
    {
      uint32_t compression; //! compression dataset (the very first (0th))
      uint32_t datasets[15]; //! compressed samples datasets (1st - 15th)
    } datasets2; //! 2nd and following Steim frame representation
  } SteimFrameData;
#pragma pack(pop) // #pragma pack(push, 1)
} //namespace steim

#endif //steim_common_h__
