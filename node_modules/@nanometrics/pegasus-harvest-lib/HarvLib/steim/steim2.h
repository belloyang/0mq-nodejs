#ifndef steim2_h__
#define steim2_h__

#include "steim_common.h"

namespace steim2
{
  enum Compression {
    _SPECIAL = 0,
    _1x30_BITS = 2,
    _2x15_BITS = 2,
    _3x10_BITS = 2,
    _4x8_BITS = 1,
    _5x6_BITS = 3,
    _6x5_BITS = 3,
    _7x4_BITS = 3
  };

  /**
   * This function returns int32 value bitness that complies with STeim2 compression.\n
   * !NOTE: Potentially this can be calculated by using log2 (if FPU is available), but performance might drop down a lot.
   * Current approach has been used in Chariot, so it's preferred to stick to if-branching for the moment.
   * @param   value  32-bits value to check
   * @return  bitness (the most significant bit order)
   */
  uint8_t getDifferenceType(int32_t value);

  /**
   * This function normalizes the packet to scatter over 30|32 bits (changes bitness to get a rid of bits gaps).
   * @param packet  input packet (should be correct one -> all the differences can be stored within 32 bits)
   * @return      normalizes package bitness and returns it's value
   */
  uint8_t normalizePacket(struct steim::PacketInfo* packet);

  uint32_t compressPacket_1x30(struct steim::PacketInfo* packet);
  uint32_t compressPacket_2x15(struct steim::PacketInfo* packet);
  uint32_t compressPacket_3x10(struct steim::PacketInfo* packet);
  uint32_t compressPacket_4x8(struct steim::PacketInfo* packet);
  uint32_t compressPacket_5x6(struct steim::PacketInfo* packet);
  uint32_t compressPacket_6x5(struct steim::PacketInfo* packet);
  uint32_t compressPacket_7x4(struct steim::PacketInfo* packet);


  uint32_t decompressDataset_1x30(const uint32_t dataset, struct steim::PacketInfo* packet);
  uint32_t decompressDataset_2x15(const uint32_t dataset, struct steim::PacketInfo* packet);
  uint32_t decompressDataset_3x10(const uint32_t dataset, struct steim::PacketInfo* packet);
  uint32_t decompressDataset_4x8(const uint32_t dataset, struct steim::PacketInfo* packet);
  uint32_t decompressDataset_5x6(const uint32_t dataset, struct steim::PacketInfo* packet);
  uint32_t decompressDataset_6x5(const uint32_t dataset, struct steim::PacketInfo* packet);
  uint32_t decompressDataset_7x4(const uint32_t dataset, struct steim::PacketInfo* packet);

  bool canPacketAcceptDifference(const struct steim::PacketInfo* packet, uint8_t diff_bitness);

  void toBigEndian(const SteimFrame_t* input, const uint32_t nFrames, SteimFrame_t* output);
}

#endif //steim2_h__
