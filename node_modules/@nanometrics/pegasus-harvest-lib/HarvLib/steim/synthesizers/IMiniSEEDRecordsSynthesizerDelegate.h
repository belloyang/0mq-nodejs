#ifndef IMiniSEEDRecordsSynthesizerDelegate_h__
#define IMiniSEEDRecordsSynthesizerDelegate_h__

#include "../../harvlib_defines.h"

#include <Logger/ILogger.h>

#include <memory>

struct MiniSEEDRecordData
{
  PDB_eMediaType_t mediaType = PDB_eMediaType_t::MEDIA_UNCOMPRESSED; //media type
  const char* data = nullptr; // data (Steim frames or raw samples buffer) pointer
  uint32_t dataSizeInBytes = 0u; // size of relevant data represented by 'data' (in bytes)
  uint32_t nFrames = 0; //amount of frames in the record
  uint32_t nSamples = 0; //amount of samples in the record
  bool isBigEndian = false; // indicates if data are in big endian byte order
};

class IMiniSEEDRecordsSynthesizerDelegate
{
public:
  virtual ~IMiniSEEDRecordsSynthesizerDelegate() = default;

  virtual void onRecordReady(const MiniSEEDRecordData& recordData) = 0;

protected:
  IMiniSEEDRecordsSynthesizerDelegate(const std::shared_ptr<ILogger>& logger);

protected:
  const std::shared_ptr<ILogger> m_logger;
};

#endif //ISteimFramesSynthesizerDelegate_h__
