#ifndef MiniSEEDRecordsSynthesizer_NoCompression_h__
#define MiniSEEDRecordsSynthesizer_NoCompression_h__

#include "IMiniSEEDRecordsSynthesizer.h"
#include "../../steim/steim2.h"

/**
 * No compression (INT32) records synthesizer.
 */
class MiniSEEDRecordsSynthesizer_NoCompression : public IMiniSEEDRecordsSynthesizer
{
public:
  /**
   * MiniSEEDRecordsSynthesizer_NoCompression constructor
   * @param framesBuffer      frame buffer to fill up
   * @param delegate          synthesizer delegate instance
   * @param useBigEndian      enforces big-endian byte order for generated frames
   * @param logger            logger instance
   */
  MiniSEEDRecordsSynthesizer_NoCompression(const std::shared_ptr<buffer_base<SteimFrame_t>>& framesBuffer,
    const std::shared_ptr<IMiniSEEDRecordsSynthesizerDelegate>& delegate,
    const bool useBigEndian,
    const std::shared_ptr<ILogger>& logger);
  /**
   * MiniSEEDRecordsSynthesizer_NoCompression destructor
   */
  virtual ~MiniSEEDRecordsSynthesizer_NoCompression() = default;

private:
  virtual sample_t _normalizeSampleImpl(const sample_t sample) const __OVERRIDES__(IMiniSEEDRecordsSynthesizer);
  virtual void _processSampleImpl(const sample_t sample) __OVERRIDES__(IMiniSEEDRecordsSynthesizer);
  void _commitFrame();
  virtual void _commitRecordImpl() __OVERRIDES__(IMiniSEEDRecordsSynthesizer);
  virtual void _flushImpl() __OVERRIDES__(IMiniSEEDRecordsSynthesizer);

  struct
  {
    uint32_t frameIndex = 0u;
    SteimFrame_t frame;
    uint32_t nSamplesInFrame = 0u;
    uint32_t nSamplesTotal = 0u;
  } m_recordState;
};

#endif //MiniSEEDRecordsSynthesizer_NoCompression_h__
