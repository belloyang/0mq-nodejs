#ifndef MiniSEEDRecordsSynthesizer_Steim2_h__
#define MiniSEEDRecordsSynthesizer_Steim2_h__

#include "IMiniSEEDRecordsSynthesizer.h"
#include "../../steim/steim2.h"

/**
 * Steim2 records synthesizer.
 * NOTE!!!: This implementation assumes input is limited to 29-bit samples only. Unexpected behaviour may result for inputs outside this range.
 */
class MiniSEEDRecordsSynthesizer_Steim2 : public IMiniSEEDRecordsSynthesizer
{
public:
  /**
   * MiniSEEDRecordsSynthesizer_Steim2 constructor
   * @param framesBuffer      frame buffer to fill up
   * @param delegate          synthesizer delegate instance
   * @param useBigEndian      enforces big-endian byte order for generated frames
   * @param logger            logger instance
   */
  MiniSEEDRecordsSynthesizer_Steim2(const std::shared_ptr<buffer_base<SteimFrame_t>>& framesBuffer,
    const std::shared_ptr<IMiniSEEDRecordsSynthesizerDelegate>& delegate,
    const bool useBigEndian,
    const std::shared_ptr<ILogger>& logger);
  /**
   * MiniSEEDRecordsSynthesizer_Steim2 destructor
   */
  virtual ~MiniSEEDRecordsSynthesizer_Steim2() = default;

private:
  virtual sample_t _normalizeSampleImpl(const sample_t sample) const __OVERRIDES__(IMiniSEEDRecordsSynthesizer);
  virtual void _processSampleImpl(const sample_t sample) __OVERRIDES__(IMiniSEEDRecordsSynthesizer);
  virtual void _commitRecordImpl() __OVERRIDES__(IMiniSEEDRecordsSynthesizer);
  virtual void _flushImpl() __OVERRIDES__(IMiniSEEDRecordsSynthesizer);

  virtual void _compressPacket(SteimFrame_t& output, const uint32_t samplesRemain, const bool bForceRecordFinish);
};

#endif //MiniSEEDRecordsSynthesizer_Steim2_h__
