#ifndef IMiniSEEDRecordsSynthesizer_h__
#define IMiniSEEDRecordsSynthesizer_h__

#include "../../harvlib_defines.h"

#include "IMiniSEEDRecordsSynthesizerDelegate.h"
#include "../../steim/steim_common.h"

#include <Logger/ILogger.h>
#include <buffers.h>

#include <memory>

/**
 * Base class for miniSEED recrods synthesizers
 */
class IMiniSEEDRecordsSynthesizer
{
public:
  virtual ~IMiniSEEDRecordsSynthesizer() = default;

  /**
   * Appends sample
   * @param  sample  sample value to append
   */
  void addSample(const sample_t sample);

  /**
   * Finalize frames synthesizing right away. May or may not produce 1 extra packet
   */
  void flush();

  /**
   * Normalizes sample to be acceptable by this synthesizer
   * @param sample		sample to normalize
   * @return	noralized sample
   */

  sample_t normalizeSample(const sample_t sample) const;

  /**
   * Resets synthesizer states (packet, records) but uses lastSample as the base sample to start calculating differences from
   */
  void reset(const sample_t lastSample);

  FORCE_INLINE void setFramesBuffer(const std::shared_ptr<buffer_base<SteimFrame_t>>& buffer) { m_framesBuffer = buffer; }
  FORCE_INLINE const std::shared_ptr<buffer_base<SteimFrame_t>>& getFramesBuffer() const { return m_framesBuffer; }

protected:
  IMiniSEEDRecordsSynthesizer(const std::shared_ptr<buffer_base<SteimFrame_t>>& framesBuffer,
    const std::shared_ptr<IMiniSEEDRecordsSynthesizerDelegate>& delegate,
    const bool useBigEndian,
    const std::shared_ptr<ILogger>& logger);

  void _finishDataset(const uint32_t compression, const uint8_t samplesInDataset, const uint32_t dataset,
    const uint32_t nSamplesRemain, SteimFrame_t& output, const bool bForceRecordFinish);
  void _finishFrame(const uint32_t nSamplesRemain, const bool bForceRecordFinish);
  void _finishRecord(const uint32_t nSamplesRemain);

  virtual sample_t _normalizeSampleImpl(const sample_t sample) const = 0;
  virtual void _processSampleImpl(const sample_t sample) = 0;
  virtual void _commitRecordImpl() = 0;
  virtual void _flushImpl() = 0;

protected:
  std::shared_ptr<buffer_base<SteimFrame_t>> m_framesBuffer;
  const std::shared_ptr<IMiniSEEDRecordsSynthesizerDelegate> m_delegate;
  const bool m_bUseBigEndian;
  const std::shared_ptr<ILogger> m_logger;
  steim::PacketInfo m_packet;
  struct
  {
    uint32_t currentFrame; //current frame to fill up
    uint32_t nSamples; //amount of samples in the packet
    bool     isFirstSampleSet; //flag that identifies if the first sample was set
    sample_t firstSample; //the very first sample in the record
    sample_t lastSample; //the very last sample in the record
  } m_record;
};

#endif //ISteimFramesSynthesizer_h__
