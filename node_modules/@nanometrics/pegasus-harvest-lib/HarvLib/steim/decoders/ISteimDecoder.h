#ifndef ISteimDecoder_h__
#define ISteimDecoder_h__

#include "../steim_common.h"

#include <Logger/ILogger.h>

#include <memory>

class ISteimDecoder
{
public:
  ISteimDecoder(const std::shared_ptr<ILogger>& logger);
  virtual ~ISteimDecoder() = default;

  /**
   * Decodes steim frames into little-endian raw samples
   * @param  frames      pointer to the frames array to decode
   * @param  nFrames     number of frames pointed by 'frames'
   * @param  isBigEndian 'frames' data endianness (true = big-endian, false = little-endian)
   * @param  pOutput     pointer to the output array. It will be dynamically allocated if *pOutput==nullptr
   * @return amount of decoded samples stored into output array
   */
  uint32_t decodeRecord(const SteimFrame_t* frames, const uint32_t nFrames, const bool isBigEndian, sample_t** pOutput) const;

private:
  virtual uint32_t _allocateBufferImpl(const uint32_t nFrames, sample_t** pOutput) const = 0;
  virtual uint8_t _decompressDiffsImpl(const uint32_t compression, const uint32_t dataset, steim::PacketInfo* packet,
      const bool isBigEndian) const = 0;

private:
  const std::shared_ptr<ILogger> m_logger;
  mutable steim::PacketInfo m_packet;
};

#endif //ISteimDecoder_h__
