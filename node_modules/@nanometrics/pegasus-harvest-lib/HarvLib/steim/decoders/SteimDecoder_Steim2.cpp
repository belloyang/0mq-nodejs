#include "SteimDecoder_Steim2.h"

#include "../steim2.h"

SteimDecoder_Steim2::SteimDecoder_Steim2(const std::shared_ptr<ILogger>& logger)
: ISteimDecoder(logger)
{
  __DEV_CALLSTACK_FUNC__;
}

uint32_t SteimDecoder_Steim2::_allocateBufferImpl(const uint32_t nFrames, sample_t** pOutput) const
{
	__DEV_CALLSTACK_FUNC__;
  //tss_harv::calculate maximum data sets that 1 steim record can contain (each frame has 15 datasets but the very first on - only 13)
  const uint32_t nSamplesDatasets = (nFrames - 1) * (steim::DATASETS_PER_FRAME - 1) + (steim::DATASETS_PER_FRAME - 3);
  //tss_harv::allocate samples buffer considering the best compression ratio (7 - for 4xbits differences)
  const uint32_t bufferSize = 7 * nSamplesDatasets * sizeof(sample_t);
  *pOutput = reinterpret_cast<sample_t*>(::malloc(bufferSize));
  return bufferSize;
}

uint8_t SteimDecoder_Steim2::_decompressDiffsImpl(const uint32_t compression, const uint32_t dataset, steim::PacketInfo* packet,
    const bool isBigEndian) const
{
  __DEV_CALLSTACK_FUNC__;
  __ASSERT__(compression != 0 && "compression shouldn't be 0 here");

  if (compression == steim2::_4x8_BITS/*0b01*/) return steim2::decompressDataset_4x8(dataset, packet);

  const uint32_t leDataset = (isBigEndian) ? endianness_utils::swap(dataset) : dataset;
  const uint32_t nibble = leDataset >> 30;
  if (compression == /*0b10*/0x2u)
  {
    if (nibble == /*0b01*/0x1u) return steim2::decompressDataset_1x30(leDataset, packet); //1x30 diff
    if (nibble == /*0b10*/0x2u) return steim2::decompressDataset_2x15(leDataset, packet); //2x15 diffs
    if (nibble == /*0b11*/0x3u) return steim2::decompressDataset_3x10(leDataset, packet); //3x10 diffs
    __ASSERT__(false && "Invalid nibble");
  }
  else if (compression == /*0b11*/0x3u)
  {
    if (nibble == /*0b00*/0x0u) return steim2::decompressDataset_5x6(leDataset, packet); //5x6 diffs
    if (nibble == /*0b01*/0x1u) return steim2::decompressDataset_6x5(leDataset, packet); //6x5 diffs
    if (nibble == /*0b10*/0x2u) return steim2::decompressDataset_7x4(leDataset, packet); //7x4 diffs
    __ASSERT__(false && "Invalid nibble");
  }
  return 0;
}
