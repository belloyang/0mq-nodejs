#ifndef steim1_h__
#define steim1_h__

#include "steim_common.h"

namespace steim1
{
  enum Compression {
    _SPECIAL = 0,
    _1x32_BITS = 3,
    _2x16_BITS = 2,
    _4x8_BITS = 1
  };

  /**
   * This function returns int32 value bitness that complies with Steim1 compression.\n
   * @param   value  32-bits value to check
   * @return  bitness (the most significant bit order)
   */
  uint8_t getDifferenceType(int32_t value);

  /**
   * This function normalizes the packet to scatter over 32 bits (changes bitness to get a rid of bits gaps).
   * @param packet  input packet (should be correct one -> all the differences can be stored within 32 bits)
   * @return      normalizes package bitness and returns it's value
   */
  uint8_t normalizePacket(struct steim::PacketInfo* packet);

  uint32_t compressPacket_1x32(struct steim::PacketInfo* packet);
  uint32_t compressPacket_2x16(struct steim::PacketInfo* packet);
  uint32_t compressPacket_4x8(struct steim::PacketInfo* packet);

  uint32_t decompressDataset_1x32(const uint32_t dataset, struct steim::PacketInfo* packet);
  uint32_t decompressDataset_2x16(const uint32_t dataset, struct steim::PacketInfo* packet);
  uint32_t decompressDataset_4x8(const uint32_t dataset, struct steim::PacketInfo* packet);

  bool canPacketAcceptDifference(const struct steim::PacketInfo* packet, uint8_t diff_bitness);

  void toBigEndian(const SteimFrame_t* input, const uint32_t nFrames, SteimFrame_t* output);
}

#endif //steim1_h__

