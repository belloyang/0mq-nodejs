#ifndef TxtLogDirectoryState_h__
#define TxtLogDirectoryState_h__

#include "../../harvlib_defines.h"

#include "TxtLogFileState.h"

#include "../MnemonicsDecoder.h"

#include <Logger/ILogger.h>
#include <IOContext/IIOContext.h>

#include <string>
#include <vector>
#include <map>
#include <memory>
#include <mutex>
#include <atomic>

/**
 * This class handles Txt files inside single specific directory (its working directory).
 * All the file states in this class reflect actual files in the working directory.
 * This class is used to group the files processing within single directory (this grouping allows to avoid multiple path existance check and creation system calls).
 * Once this instance is created, its working directory exists -> no need to perform any checks -> can freely create the TXT files in its working directory.
 */
class TxtLogDirectoryState
{
public:
  TxtLogDirectoryState(const std::string& workingDir, const std::string& fileNamePattern,
    const uint32_t nHoursPerFile,
    const std::shared_ptr<IPacketInfoProvider>& packetInfoProvider,
    const std::shared_ptr<ILogger>& logger);

  virtual ~TxtLogDirectoryState();

  size_t writeSlice(const sPacketSlice& slice, const bool bCompletesChannel);

  FORCE_INLINE uint32_t getFilesCount() const { return m_nFilesGenerated; }

private:
  // not implemented
  TxtLogDirectoryState(const TxtLogDirectoryState&) = delete;
  TxtLogDirectoryState& operator=(const TxtLogDirectoryState&) = delete;

  std::string _getOutputFileName(const sPacketSlice& slice) const;
  TxtLogFileState* _getFileState(const sPacketSlice& slice);
  void _deleteFileState(const std::string& filename);
  size_t _writeData(TxtLogFileState* pFileState, const sPacketSlice& slice);

private:
  const std::string m_workingDir;
  const std::string m_fileNamePattern;

  const std::shared_ptr<IPacketInfoProvider> m_packetInfoProvider;
  const std::shared_ptr<ILogger> m_logger;

  //map is used to assign file names with file state
  std::map<std::string, TxtLogFileState*> m_fileStates;
  const std::unique_ptr<MnemonicsDecoder> m_mnemonicsDecoder;
  std::atomic<uint32_t> m_nFilesGenerated; // amount of files generated in this directory

  std::mutex m_mutex;
  char m_timeBuffer[64]     = {0};
  char m_stagingBuffer[512] = {0};
};

#endif //TxtLogDirectoryState_h__

