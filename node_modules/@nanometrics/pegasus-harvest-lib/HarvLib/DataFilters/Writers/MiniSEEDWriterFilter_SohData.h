#ifndef MiniSEEDWriterFilter_SohData_h__
#define MiniSEEDWriterFilter_SohData_h__

// this class is used to dump SOH packets (PDB, PSF) to MiniSeed files
#include "IWriterFilter.h"

#include "../Data/PDBDataDesc.h"
#include "../Data/PSFDataDesc.h"
#include "../Data/ErrorDataDesc.h"
#include "../Data/ProgressDataDesc.h"

#include "MiniSEEDDirectoryState.h"

#include <Library/PSFLibrary.h>

#include <DataTypes/HealthTimeSeries/MsgHealthInput.h>
#include <DataTypes/HealthTimeSeries/MsgSohData.h>

#include "../../steim/synthesizers/IMiniSEEDRecordsSynthesizer.h"

#include <memory>
#include <map>
#include <vector>

/**
 * MiniSEED files writer for SOH data.
 */
class MiniSEEDWriterFilter_SohData : public IWriterFilter
{
public:
  /**
   * MiniSEEDWriterFilter_SohData constructor
   * @param params            harvesting parameters
   * @param channelsMask      channels mask to harvest
   * @param poolSize          size of memory pool for Sensor Input packets
   * @param logger            logger instance
   */
  MiniSEEDWriterFilter_SohData(const std::shared_ptr<PSFLibrary>& library,
    const sHarvestParams& params,
    const uint32_t channelsMask,
    const uint32_t poolSize,
    const std::shared_ptr<ILogger>& logger);
  /**
   * MiniSEEDWriterFilter_SohData destructor
   */
  virtual ~MiniSEEDWriterFilter_SohData();

  virtual ErrorDataDesc* run(const Config* pConfig) __OVERRIDES__(IWriterFilter);

  DECLARE_NOCOPYABLE(MiniSEEDWriterFilter_SohData);

private:
  struct ChannelState
  {
    std::shared_ptr<IMiniSEEDRecordsSynthesizer> synthesizer; //miniSEED records synthesizer
    std::vector<MiniSEEDRecordData> recordsQueue; //records queue for synthesizer to push encoded data
    sPacketSlice slice; //active/working slice
  };

  ErrorDataDesc* finalize(const sHarvestOpReport* pReport) __OVERRIDES__(IBaseFilter);

  virtual void _createWorkers() __OVERRIDES__(IAsyncFilter);
  DataDescPtr _workerFunc(IAsyncWorker* pWorker, const DataDescPtr data);

  DataDescPtr _processPSFData(const DataDescPtr data, void* userData);
  ErrorDataDesc* _processPacket(const MsgSohData* pPacket, const sequence_number_t sequenceNumber, void* userData);
  ErrorDataDesc* _processPacket(const MsgHealthInput* pPacket, const sequence_number_t sequenceNumber, void* userData);
  ErrorDataDesc* _processSteimQueue(ChannelState& channelState);

  MiniSEEDDirectoryState* _getDirectoryState(const sPacketSlice& packetSlice); //gets mseed state for packet

private:
  const uint32_t m_channelsMask;
  mem_pool<MsgHealthInput()> m_msgHealthInputsPool;
  mem_pool<MsgSohData()> m_msgSohDataPool;
  std::map<std::string, MiniSEEDDirectoryState*> m_mseedStates; //key - output path, value - mSEED state
  //each channel has it's own Steim frames synthesizers that works to it's own packets queue
  std::vector<ChannelState> m_channelStates;
  const uint32_t m_nFramesPerRecordMax;
};

#endif //MiniSEEDWriterFilter_SohData_h__
