#ifndef MiniSEEDWriterFilter_SensorInput_h__
#define MiniSEEDWriterFilter_SensorInput_h__

//tss_harv::this class is used to dump PDBNp7Packets (PDB, PSF) to MiniSeed files
#include "IWriterFilter.h"

#include "../Data/PDBDataDesc.h"
#include "../Data/PSFDataDesc.h"
#include "../Data/ErrorDataDesc.h"
#include "../Data/ProgressDataDesc.h"

#include "MiniSEEDDirectoryState.h"

#include "PacketSlicer_TimeRange.h"

#include <DataTypes/SensorTimeSeries/MsgSensorInput.h>

#include <Library/PSFLibrary.h>

#include <memory>
#include <map>

/**
 * MiniSEED files writer for sensor input data.
 */
class MiniSEEDWriterFilter_SensorInput : public IWriterFilter
{
public:
  /**
   * MiniSEEDWriterFilter_SensorInput constructor
   * @param packetInfoProvider  packet infor provider instance
   * @param params              harvesting parameters
   * @param poolSize            size of memory pool for Sensor Input packets
   * @param logger              logger instance
   */
  MiniSEEDWriterFilter_SensorInput(const std::shared_ptr<IPacketInfoProvider>& packetInfoProvider,
    const sHarvestParams& params,
    const uint32_t poolSize,
    const std::shared_ptr<ILogger>& logger);

  /**
   * MiniSEEDWriterFilter_SensorInput constructor
   * @param library           PSF library instance
   * @param params            harvesting parameters
   * @param poolSize          size of memory pool for Sensor Input packets
   * @param logger            logger instance
   */
  MiniSEEDWriterFilter_SensorInput(const std::shared_ptr<PSFLibrary>& library,
    const sHarvestParams& params,
    const uint32_t poolSize,
    const std::shared_ptr<ILogger>& logger);
  /**
   * MiniSEEDWriterFilter_SensorInput destructor
   */
  virtual ~MiniSEEDWriterFilter_SensorInput();

  virtual ErrorDataDesc* run(const Config* pConfig) __OVERRIDES__(IWriterFilter);

private:
  // not implemented
  MiniSEEDWriterFilter_SensorInput(const MiniSEEDWriterFilter_SensorInput&) = delete;
  MiniSEEDWriterFilter_SensorInput& operator=(const MiniSEEDWriterFilter_SensorInput&) = delete;

  virtual void _createWorkers() __OVERRIDES__(IAsyncFilter);
  DataDescPtr _workerFunc(IAsyncWorker* pWorker, const DataDescPtr data);

  DataDescPtr _processPSFData(const DataDescPtr data, void* userData);
  DataDescPtr _processPDBData(const DataDescPtr data, void* userData);
  ErrorDataDesc* _processPacket(const MsgSensorInput* pPacket,
    const sequence_number_t sequenceNumber, void* userData);

  MiniSEEDDirectoryState* _getDirectoryState(const sPacketSlice& packetSlice); //gets mseed state for packet

private:
  mem_pool<MsgSensorInput()> m_msgSensorInputsPool;
  std::map<std::string, MiniSEEDDirectoryState*> m_mseedStates; //key - output path, value - mSEED state
  std::shared_ptr<PacketSlicer_TimeRange> m_slicer;
};

#endif //MiniSEEDWriterFilter_SensorInput_h__
