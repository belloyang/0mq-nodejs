#ifndef IWriterFilter_h__
#define IWriterFilter_h__

#include "../IAsyncFilter.h"
#include "../Data/ProgressDataDesc.h"
#include "../IPacketInfoProvider.h"
#include "../MnemonicsDecoder.h"

#include <memory>

class IWriterFilter : public IAsyncFilter
{
protected:
  IWriterFilter(const std::string& name,
    const sHarvestParams& params, const uint32_t maxQueueSize,
    const std::shared_ptr<ILogger>& logger);

public:
  virtual ~IWriterFilter() = default;

  ErrorDataDesc* run(const Config* pConfig) __OVERRIDES__(IAsyncFilter);

protected:
  ProgressDataDesc* _makeProgress();
  /**
   * This method returns relative path to the output directory where the slice should be written
   * @param  packetSlice packet slice
   * @return relative the the output directory path for the packet slice
   */
  std::string _getOutputDirectory(const sPacketSlice& packetSlice) const;

  void _trackTimerange(const timestamp_t lower, const timestamp_t upper);
  void _trackTimerange(const sPacketSlice& slice);
  void _trackElementProcessed(const uint32_t nBytes);

protected:
  const sHarvestParams m_params;
  std::shared_ptr<IPacketInfoProvider> m_packetInfoProvider;
  std::shared_ptr<MnemonicsDecoder> m_mnemonicsDecoder;
  timestamp_t m_startTime;
  sHarvestProgress m_progress;
  sSequenceRange m_targetRange;
  mem_pool<ProgressDataDesc(const IBaseFilter*, const sHarvestProgress&)> m_progressPool;
};

#endif //IAsyncFilter_h__
