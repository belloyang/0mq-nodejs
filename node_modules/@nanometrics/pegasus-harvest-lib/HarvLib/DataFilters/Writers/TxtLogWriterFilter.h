#ifndef TxtLogWriterFilter_h__
#define TxtLogWriterFilter_h__

//tss_harv::this class is used to dump PSF & PDB logs to txt-file
#include "IWriterFilter.h"

#include "../Data/PDBDataDesc.h"
#include "../Data/PSFDataDesc.h"
#include "../Data/ErrorDataDesc.h"
#include "../Data/ProgressDataDesc.h"

#include "TxtLogDirectoryState.h"

#include <Library/PSFLibrary.h>
#include <DataTypes/ForensicLog/MsgForensicLog.h>

/**
 * Log writer (txt)
 */
class TxtLogWriterFilter : public IWriterFilter
{
public:
  /**
   * TxtLogWriterFilter constructor
   * @param path    output txt-file path
   * @param maxQueueSize maximum amount of logs that filter can process on worker thread (data accepting will be blocked till queue processed)
   * @param logger  logger instance
   */
  TxtLogWriterFilter(const std::shared_ptr<PSFLibrary>& library,
    const sHarvestParams& params,
    const uint32_t poolSize,
    const std::shared_ptr<ILogger>& logger);
  /**
   * TxtLogWriterFilter destructor
   */
  virtual ~TxtLogWriterFilter();

  virtual ErrorDataDesc* run(const Config* pConfig) __OVERRIDES__(IWriterFilter);
  virtual ErrorDataDesc* finalize(const sHarvestOpReport* pReport) __OVERRIDES__(IBaseFilter);

private:
  virtual void _createWorkers() __OVERRIDES__(IAsyncFilter);
  DataDescPtr _workerFunc(IAsyncWorker* pWorker, const DataDescPtr data);
  DataDescPtr _processPSFData(const DataDescPtr data, void* userData);

  TxtLogDirectoryState* _getDirectoryState(const sPacketSlice& slice);

  ErrorDataDesc* _writeLog(MsgForensicLog* pLog, const sequence_number_t sequenceNumber);

private:
  std::map<std::string, TxtLogDirectoryState*> m_dirStates; //key - output path, value - directory state
};

#endif //TxtLogWriterFilter_h__
