#ifndef PacketInfoProvider_DigitizerStartBased_h__
#define PacketInfoProvider_DigitizerStartBased_h__

#include "../IPacketInfoProvider.h"

#include <Library/PSFLibrary.h>

#include <DataTypes/DigitizerOperationLog/MsgDigitizerStart.h>

#include <vector>
#include <memory>

class PacketInfoProvider_DigitizerStartBased : public IPacketInfoProvider
{
public:
  PacketInfoProvider_DigitizerStartBased(const std::shared_ptr<PSFLibrary>& library, const uint32_t volumeID);
  virtual ~PacketInfoProvider_DigitizerStartBased() = default;

  virtual void initialize(const sSequenceRange& sequenceRange) __OVERRIDES__(IPacketInfoProvider);

  virtual timestamp_t getTimestamp(const sPacketSlice& packetSlice) const __OVERRIDES__(IPacketInfoProvider);
  virtual const std::string& getNetwork(const sPacketSlice& packetSlice) const __OVERRIDES__(IPacketInfoProvider);
  virtual const std::string& getStation(const sPacketSlice& packetSlice) const __OVERRIDES__(IPacketInfoProvider);
  virtual const std::string& getChannelName(const sPacketSlice& packetSlice) const __OVERRIDES__(IPacketInfoProvider);
  virtual const std::string& getChannelLocation(const sPacketSlice& packetSlice) const __OVERRIDES__(IPacketInfoProvider);

protected:
  /**
   * Digitizer start info retrieved from MsgDigitizerStart.
   * It's initialized with valid default values intentionally to be used for the data that appears before MsgDigitizerStart event.
   * However, the MsgDigitizerStart always gets written asap after the boot, the other data is allowed to be written to PDB earlier (e.i: forensic log),
   * so the very first MsgDigitizerStart message may contain non-zero VolumeRefIndex for some volumes.
   * Thereby the default configuration will be used  for the data that prepends the very first MsgDigitizerStart event.
   */
  struct DigitizerStartInfo
  {
    sequence_number_t startSequence = 0u;
    std::string network = "XX";
    std::string station = "XXXXX";
    uint8_t nChannels = 4;
    struct sChannel
    {
      std::string name;
      std::string location;
    } channels[4] = {
       {"CH1", ""}, // From SEED standard; Location is optional. Use empty string here.
       {"CH2", ""},
       {"CH3", ""},
       {"CH4", ""}
    };
    __STATIC_ASSERT__(NUM_ELEMENTS(MsgDigitizerStart::Header::channels) == NUM_ELEMENTS(DigitizerStartInfo::channels), "Channels count mismatch");
  };
  static DigitizerStartInfo _buildStartInfo(const sequence_number_t startSequence, const MsgDigitizerStart::Header* header,
                                            const std::shared_ptr<ILogger>& logger);
  static bool _isEqual(const DigitizerStartInfo& info1, const DigitizerStartInfo& info2);
  static bool _updateString(std::string& output, const char* input, uint32_t maxLen);
  const DigitizerStartInfo& _getStartInfo(const sequence_number_t sequenceNumber) const;

private:
  const std::shared_ptr<PSFLibrary> m_library;
  const uint32_t m_volumeID;
  std::vector<DigitizerStartInfo> m_startInfo;
};

#endif //PacketInfoProvider_DigitizerStartBased_h__
