#ifndef MiniSEEDWriterFilter_ClockStatus_h__
#define MiniSEEDWriterFilter_ClockStatus_h__

//tss_harv::this class is used to dump Timing SOH (CLockStatus) packets (PDB, PSF) to MiniSeed files
#include "IWriterFilter.h"

#include "../Data/PDBDataDesc.h"
#include "../Data/PSFDataDesc.h"
#include "../Data/ErrorDataDesc.h"
#include "../Data/ProgressDataDesc.h"

#include "MiniSEEDDirectoryState.h"

#include <Library/PSFLibrary.h>

#include <DataTypes/ClockStatus/MsgClockStatus.h>

#include "../../steim/synthesizers/IMiniSEEDRecordsSynthesizer.h"

#include <memory>
#include <map>
#include <vector>

typedef enum : uint32_t
{
  PLL_STATUS_NO_LOCK      = 0,
  PLL_STATUS_COARSE_LOCK  = 1,
  PLL_STATUS_FINE_LOCK    = 2,
  PLL_STATUS_FREE_RUNNING = 3,
} ePLLStatus_t;

typedef enum : uint32_t
{
  ANTENNA_STATUS_OK      = 0,
  ANTENNA_STATUS_OPEN    = 1,
  ANTENNA_STATUS_SHORT   = 2,
  ANTENNA_STATUS_UNKNOWN = 3,
} eAntennaStatus_t;

/**
 * MiniSEED files writer for Timing SOH (ClockStatus) data.
 */
class MiniSEEDWriterFilter_ClockStatus : public IWriterFilter
{
public:
  /**
   * MiniSEEDWriterFilter_ClockStatus constructor
   * @param params            harvesting parameters
   * @param poolSize          size of memory pool for Sensor Input packets
   * @param logger            logger instance
   */
  MiniSEEDWriterFilter_ClockStatus(const std::shared_ptr<PSFLibrary>& library, 
    const sHarvestParams& params,
    const uint32_t poolSize,
    const std::shared_ptr<ILogger>& logger);
  /**
   * MiniSEEDWriterFilter_ClockStatus destructor
   */
  virtual ~MiniSEEDWriterFilter_ClockStatus();

  virtual ErrorDataDesc* run(const Config* pConfig) __OVERRIDES__(IWriterFilter);

private:
  struct ClockStatusState
  {
    std::shared_ptr<IMiniSEEDRecordsSynthesizer> synthesizer; //miniSEED records synthesizer
    std::vector<MiniSEEDRecordData> recordsQueue; //records queue for synthesizer to push encoded data
    sPacketSlice slice; //active/working slice
  };

  // not implemented
  MiniSEEDWriterFilter_ClockStatus(const MiniSEEDWriterFilter_ClockStatus&) = delete;
  MiniSEEDWriterFilter_ClockStatus& operator=(const MiniSEEDWriterFilter_ClockStatus&) = delete;

  ErrorDataDesc* finalize(const sHarvestOpReport* pReport) __OVERRIDES__(IBaseFilter);

  virtual void _createWorkers() __OVERRIDES__(IAsyncFilter);
  DataDescPtr _workerFunc(IAsyncWorker* pWorker, const DataDescPtr data);

  DataDescPtr _processPSFData(const DataDescPtr data, void* userData);
  ErrorDataDesc* _processPacket(const MsgClockStatus* pPacket, const sequence_number_t sequenceNumber, void* userData);
  ErrorDataDesc* _resample(const MsgClockStatus::Header& prev,
    const sequence_number_t sequenceNumber, const timestamp_t upperBound, const PDB_sSampleRate_t& sampleRate);

  ErrorDataDesc* _processSteimQueue(ClockStatusState& state);

  MiniSEEDDirectoryState* _getDirectoryState(const sPacketSlice& packetSlice); //gets mseed state for packet

private:
  mem_pool<MsgClockStatus()> m_msgClockStatusPool;
  std::map<std::string, MiniSEEDDirectoryState*> m_mseedStates; //key - output path, value - mSEED state
  std::vector<ClockStatusState> m_inputStates;

  bool m_bFirstPacketReceived;
  MsgClockStatus::Header m_latestHeader;
  const uint32_t m_nFramesPerRecordMax;
};

#endif //MiniSEEDWriterFilter_ClockStatus_h__
