#ifndef ErrorDataDesc_h__
#define ErrorDataDesc_h__

#include "../IBaseFilter.h"
#include "IDataDesc.h"

/** 
 * Error data
 */
class ErrorDataDesc : public IDataDesc
{
public:
  /**
   * ErrorDataDesc constructor
   * @param pFilter     filter that raised an error
   * @param category    error category
   * @param errorCode   error code
   */
  ErrorDataDesc(const IBaseFilter* pFilter, const eErrorCategory category, const uint32_t errorCode);
  /**
   * ErrorDataDesc destructor
   */
  virtual ~ErrorDataDesc() = default;

  /**
   * Initializes data
   * @param pFilter     filter that raised an error
   * @param category    error category
   * @param errorCode   error code
   */
  bool init(const IBaseFilter* pFilter, const eErrorCategory category, const uint32_t errorCode);

  /**
   * Error category getter
   * @return  error category
   */
  FORCE_INLINE eErrorCategory getCategory() const { return m_category; }

  /**
   * Error code getter
   * @return  error code
   */
  FORCE_INLINE uint32_t getErrorCode() const { return m_errorCode; }
  /**
   * Scope filter getter
   * @return  filter that raised an error
   */
  FORCE_INLINE const IBaseFilter* getFilter() const { return m_pFilter; }

private:
  // not implemented
  ErrorDataDesc(const ErrorDataDesc&);
  ErrorDataDesc& operator=(const ErrorDataDesc&);
  
protected:
  const IBaseFilter* m_pFilter;
  eErrorCategory m_category;
  uint32_t m_errorCode;
};

#endif //ErrorDataDesc_h__
