#include "ProcessorDelegateFilter.h"

#include "../AsyncWorker_Functor.h"

ProcessorDelegateFilter::ProcessorDelegateFilter(const uint32_t maxQueueSize,
  const std::shared_ptr<IProcessorDelegate>& processorDelegate,
  const std::shared_ptr<ILogger>& logger)
: IAsyncFilter("ProcessorDelegateFilter", maxQueueSize, logger)
, m_processorDelegate(processorDelegate)
{
  __DEV_CALLSTACK_FUNC__;
  __ASSERT__(processorDelegate != nullptr && "'processorDelegate' cannot be nullptr");
  // register handlers to process PSF data
  this->_registerDataHandler(IDataDesc::DATA_TYPE_PSF, HandlerFunc(&ProcessorDelegateFilter::_processPSFData, this));
}

ErrorDataDesc* ProcessorDelegateFilter::finalize(const sHarvestOpReport* pReport)
{
  __DEV_CALLSTACK_FUNC__;
  // finalize async processing
  ErrorDataDesc* pRet = IAsyncFilter::finalize(pReport);
  // report completion to delegate
  m_processorDelegate->onCompleted(pReport->status);
  return pRet;
}

DataDescPtr ProcessorDelegateFilter::_processPSFData(const DataDescPtr data, void* /*userData*/)
{
  __DEV_CALLSTACK_FUNC__;
  __ASSERT__(data != nullptr && "'data' cannot be nullptr here");
  PSFDataDesc* const pPSFData = static_cast<PSFDataDesc*>(data);
  PSFDataElement* const pDataElement = pPSFData->getElement();
  if (pDataElement != nullptr)
  {
    m_processorDelegate->onPSFRead(pDataElement);
  }
  else
  {
    return this->_makeError(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eHarvLibErrorCode::HARVLIB_ERROR_FILTER_PROCESS_DATA_FAILED,
      "PSFDataElement invalid handle");
  }

  // pass data further
  return data;
}

void ProcessorDelegateFilter::_createWorkers()
{
  __DEV_CALLSTACK_FUNC__;
  // single worker supported/needed for reading
  m_workers.push_back(std::make_shared<AsyncWorker_Functor>(m_dataQueue, m_results,
    AsyncWorker_Functor::Functor(&ProcessorDelegateFilter::_workerFunc, this),
    m_logger));
}

DataDescPtr ProcessorDelegateFilter::_workerFunc(IAsyncWorker* pWorker, const DataDescPtr data)
{
  __DEV_CALLSTACK_FUNC__;
  return this->_processDataImpl(data, pWorker);
}
