#include "PSFReaderPredicate_Common.h"

PSFReaderPredicate_Common::PSFReaderPredicate_Common(const PDB_eVolumeID volumeId, const std::shared_ptr<ILogger>& logger)
: IPSFReaderPredicate(logger)
, m_volumeId(volumeId)
{
  __DEV_CALLSTACK_FUNC__;
}

sSequenceRange PSFReaderPredicate_Common::_getSequenceRangeImpl(PSFStream* pStream) const
{
  __DEV_CALLSTACK_FUNC__;
  //tss_harvlib::doesn't affect stream start and end (allows to read the entire volume)
  sSequenceRange ret;
  {
    ret.lower = pStream->rtell();
    ret.upper = pStream->wtell() - 1;
  }
  return ret;
}

bool PSFReaderPredicate_Common::_checkImpl(const PSFDataElement* /*pDataElement*/) const
{
  __DEV_CALLSTACK_FUNC__;
  //tss_harvlib::this predicate doesn't perform any checks -> only does updates
  return true;
}

bool PSFReaderPredicate_Common::_updateImpl(const PSFDataElement* /*pDataElement*/)
{
  __DEV_CALLSTACK_FUNC__;
  return true;
}
