#ifndef PSFReaderPredicate_AND_h__
#define PSFReaderPredicate_AND_h__

#include "IPSFReaderPredicate.h"

#include <vector>

class PSFReaderPredicate_AND : public IPSFReaderPredicate
{
public:
  PSFReaderPredicate_AND(const std::shared_ptr<ILogger>& logger);
  virtual ~PSFReaderPredicate_AND() = default;

  FORCE_INLINE void addPredicate(const std::shared_ptr<IPSFReaderPredicate>& predicate) { m_predicates.push_back(predicate); }

protected:
  virtual sSequenceRange _getSequenceRangeImpl(PSFStream* pStream) const __OVERRIDES__(IPSFReaderPredicate);
  virtual bool _checkImpl(const PSFDataElement* pDataElement) const __OVERRIDES__(IPSFReaderPredicate);
  virtual bool _updateImpl(const PSFDataElement* pDataElement) __OVERRIDES__(IPSFReaderPredicate);

private:
  std::vector< std::shared_ptr<IPSFReaderPredicate> > m_predicates;
};

#endif //PSFReaderPredicate_AND_h__
