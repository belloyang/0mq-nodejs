#ifndef Timestamp_Dichotomizer_h__
#define Timestamp_Dichotomizer_h__

#include "../../../harvlib_defines.h"

#include "../../../TimeRangeFetchers/ITimeRangeFetcher.h"

#include <Library/PSFVolume.h>
#include <Library/search/IDichotomiser.h>

#include <vector>
#include <memory>

class Timestamp_Dichotomizer : public IDichotomiser
{
public:
  Timestamp_Dichotomizer(const PSFVolume* volume, const timestamp_t timestamp,
    const std::shared_ptr<ITimeRangeFetcher>& timeRangeFetcher,
    const std::shared_ptr<ILogger>& logger);
  virtual ~Timestamp_Dichotomizer();
  
  virtual bool shrinkRange(size_t from, size_t to, size_t& newFrom, size_t& newTo) const __OVERRIDES__(IDichotomiser);

protected:
  sTimespan _getTimespan(const uint32_t sectionIdx) const;
  bool _fetchTimespan(const uint32_t sectionIdx, sTimespan& out) const;

private:
  // not implemented
  Timestamp_Dichotomizer(const Timestamp_Dichotomizer&);
  Timestamp_Dichotomizer& operator=(const Timestamp_Dichotomizer&);

private:
  const PSFVolume* m_volume;
  const timestamp_t m_timestamp;
  const std::shared_ptr<ITimeRangeFetcher> m_timeRangeFetcher;
  PSFSection* m_section;
  mutable PSFDataElement* m_dataElement;
  mutable uint32_t m_nCalculations;

  struct sCache
  {
    size_t sectionIndex;
    sTimespan timespan;
    uint32_t weight;
  };
  mutable std::vector<sCache> m_cache;
};

#endif //Timestamp_Dichotomizer_h__
