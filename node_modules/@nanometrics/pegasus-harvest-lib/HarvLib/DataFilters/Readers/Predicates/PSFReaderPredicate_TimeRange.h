#ifndef PSFReaderPredicate_TimeRange_h__
#define PSFReaderPredicate_TimeRange_h__

#include "IPSFReaderPredicate.h"

#include "../../../TimeRangeFetchers/ITimeRangeFetcher.h"

#include <memory>

class PSFReaderPredicate_TimeRange : public IPSFReaderPredicate
{
public:
  PSFReaderPredicate_TimeRange(const sHarvestParams& params,
      const std::shared_ptr<ITimeRangeFetcher>& timeRangeFetcher,
      const std::shared_ptr<ILogger>& logger);
  virtual ~PSFReaderPredicate_TimeRange() = default;

protected:
  virtual sSequenceRange _getSequenceRangeImpl(PSFStream* pStream) const __OVERRIDES__(IPSFReaderPredicate);
  virtual bool _checkImpl(const PSFDataElement* pDataElement) const __OVERRIDES__(IPSFReaderPredicate);
  virtual bool _updateImpl(const PSFDataElement* pDataElement) __OVERRIDES__(IPSFReaderPredicate);

private:
  sequence_number_t _searchLower(PSFStream* pStream) const;
  sequence_number_t _searchUpper(PSFStream* pStream) const;

protected:
  const sHarvestParams m_params;
  const std::shared_ptr<ITimeRangeFetcher> m_timeRangeFetcher;
};

#endif //PSFReaderPredicate_TimeRange_h__
