#ifndef PSFReaderFilter_h__
#define PSFReaderFilter_h__

//tss_harv::this class is used to read PSF objects from PSFVolume

#include "../IBaseFilter.h"

#include "../Data/PSFDataDesc.h"
#include "../Data/ErrorDataDesc.h"
#include "../Data/ProgressDataDesc.h"

#include <Library/PSFVolume.h>

#include <memory>

/**
 * PSF reader filter
 */
class PSFReaderFilter : public IBaseFilter
{
public:
  /**
   * PSFReaderFilter constructor
   * @param volume            volume to read PSF data from
   * @param params            harvesting parameters
   * @param psfPoolSize       memory pool size to store PSF objects (PSFDataElement)
   * @param nPagesPerElement  preallocated pages per each element to read from PSF volueme
   * @param logger            logger instance
   */
  PSFReaderFilter(const std::shared_ptr<PSFVolume>& volume, const sHarvestParams& params,
    const uint32_t psfPoolSize, const uint32_t nPagesPerElement, const std::shared_ptr<ILogger>& logger);
  /**
   * PSFReaderFilter destructor
   */
  virtual ~PSFReaderFilter() = default;

  virtual ErrorDataDesc* run(const Config* pConfig) __OVERRIDES__(IBaseFilter);
  virtual ErrorDataDesc* finalize(const sHarvestOpReport* pReport) __OVERRIDES__(IBaseFilter);

private:
  const std::shared_ptr<PSFVolume> m_volume;
  const sHarvestParams m_params;
  const uint32_t m_psfPoolSize;
  const uint32_t m_nPagesPerElement;
  uint32_t m_nElementsRead;
};

#endif //PSFReaderFilter_h__
