#ifndef IAsyncWorker_h__
#define IAsyncWorker_h__

#include "../harvlib_defines.h"

#include "Data/IDataDesc.h"
#include "async_queue.h"

#include <Logger/ILogger.h>

#include <memory>

#include <mutex>
#include <atomic>
#include <condition_variable>

class IAsyncWorker
{
protected:
  IAsyncWorker(async_queue<DataDescPtr>& input, async_queue<DataDescPtr>& output,
    const std::shared_ptr<ILogger>& logger);
  virtual ~IAsyncWorker();

public:
  void start();
  void wait();
  FORCE_INLINE void requestStop() { m_bIsStopRequested = true; }
  FORCE_INLINE void requestFinish() { m_bIsFinishRequested = true; }

private:
  void _waitForStart();
  void _waitForFinish();
  void _threadFunc();
  bool _loopTick();

  virtual DataDescPtr _processImpl(const DataDescPtr data) = 0;

protected:
  async_queue<DataDescPtr>& m_inputQueue;
  async_queue<DataDescPtr>& m_outputQueue;
  const std::shared_ptr<ILogger> m_logger;
  std::atomic<bool> m_bIsLaunched;
  std::atomic<bool> m_bIsFinished;
  std::atomic<bool> m_bIsStopRequested;
  std::atomic<bool> m_bIsFinishRequested;
  std::mutex m_mutex;
  std::condition_variable m_startedEvent;
  std::condition_variable m_finishedEvent;
  uint32_t m_nElementsProcessed;
};

#endif //IAsyncWorker_h__
