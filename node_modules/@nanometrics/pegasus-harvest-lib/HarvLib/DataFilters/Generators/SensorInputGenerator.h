#ifndef SensorInputGenerator_h__
#define SensorInputGenerator_h__

#include "IPDBDataGenerator.h"

#include "../../steim/synthesizers/IMiniSEEDRecordsSynthesizer.h"
#include "samplers/ISamplesGenerator.h"
#include "gap_generators/IGapGenerator.h"

#include <DataTypes/SensorTimeSeries/MsgSensorInput.h>

#include <memory>
#include <queue>

/**
 * Class that is used for MsgSensorInput generation
 */
class SensorInputGenerator : public IPDBDataGenerator
{
public:
  /**
   * SensorInputGenerator constructor
   * @param startTimestamp lower timestamp to start data generation from 
   * @param channelsMask   8-bits channels mask (0b0000|Ch3|Ch2|Ch1|Ch0, where Ch# is channel enabled bit (0 - disabled, 1 - enabled)
   * @param nPackets       amount of packets to be generated
   * @param mediaType      media type for data to be generated
   * @param useBigEndian   makes generator produce big-endian steim frames
   * @param gapGenerator   gaps generator
   * @param signalLevel    signal peak level (in fractional counts)
   * @param noiseLevel     noise RMS level (in fractional counts)
   * @param updateStep     progress update step (in [0.0, 1.0] interval where 0.0 stands for 0%, 1.0 - 100%)
   * @param logger         logger instance
   */
  SensorInputGenerator(const timestamp_t startTimestamp, const uint8_t channelsMask, const size_t nPackets,
    const PDB_eMediaType_t mediaType, const bool useBigEndian,
    const std::shared_ptr<IGapGenerator>& gapGenerator,
    const double signalLevel, const double noiseLevel,
    const float updateStep,
    const std::shared_ptr<ILogger>& logger);
  /**
   * SensorInputGenerator destructor
   */
  virtual ~SensorInputGenerator();

  DECLARE_NOCOPYABLE(SensorInputGenerator);

protected:
  virtual IPDBMsgObject* _generateObject(const uint32_t iteration) __OVERRIDES__(IPDBDataGenerator);

private:
  const timestamp_t m_startTimestamp;
  const uint8_t m_channelsMask;
  const std::shared_ptr<IGapGenerator> m_gapGenerator;
  struct sChannelData
  {
    PDB_sSampleRate_t sampleRate;
    double signalFreqNormalized;
    std::shared_ptr<IMiniSEEDRecordsSynthesizer> synthesizer;
    std::shared_ptr<ISamplesGenerator> generator;
    uint64_t sampleIndex;
    struct sStatistics
    {
      uint32_t nRecords;
      uint64_t nSamples;
    } statistics;
  } m_channelsData[PDB_MAXIMUM_CHANNELS_COUNT];

  std::queue<MsgSensorInput*> m_packetsQueue;
};

#endif //SensorInputGenerator_h__
