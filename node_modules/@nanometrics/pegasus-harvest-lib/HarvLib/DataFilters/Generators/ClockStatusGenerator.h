#ifndef ClockStatusGenerator_h__
#define ClockStatusGenerator_h__

#include "IPDBDataGenerator.h"

#include "samplers/samplers.h"
#include "gap_generators/IGapGenerator.h"

#include <DataTypes/ClockStatus/MsgClockStatus.h>

#include <memory>

/**
 * Class that is used for MsgClockStatus generation
 */
class ClockStatusGenerator : public IPDBDataGenerator
{
public:
  /**
   * ClockStatusGenerator constructor
   * @param startTimestamp lower timestamp to start data generation from
   * @param nPackets       amount of packets to be generated
   * @param gapsGenerator  gaps generator
   * @param updateStep     progress update step (in [0.0, 1.0] interval where 0.0 stands for 0%, 1.0 - 100%)
   * @param logger         logger instance
   */
  ClockStatusGenerator(const timestamp_t startTimestamp, const uint32_t nPackets,
    const std::shared_ptr<IGapGenerator>& gapGenerator,
    const float updateStep, const std::shared_ptr<ILogger>& logger);

  /**
   * ClockStatusGenerator destructor
   */
  virtual ~ClockStatusGenerator() = default;

protected:
  virtual IPDBMsgObject* _generateObject(const uint32_t iteration) __OVERRIDES__(IPDBDataGenerator);

private:
  timestamp_t m_recordTimestamp;
  const PDB_sSampleRate_t m_sampleRate;
  const std::shared_ptr<IGapGenerator> m_gapGenerator;
  mem_pool<MsgClockStatus(void)> m_clockStatusMemPool;

  //https://docs.google.com/document/d/1OweIMG_d9OygYAqN9VGrMX0LqsOyrZ1_VQ3D-XYX9vo/edit#heading=h.8966vjr0az2f
  enum eGeneratorID : uint32_t
  {
    DUTY_CYCLE     = 0,

    ANTENNA_STATUS = 1,
    FIX_STATUS     = 2,
    CLOCK_STATUS   = 3,
    ACC_FREERUN    = 4,
    CONVERGE_TIME  = 5,
    NUM_SATELLITES = 6,
    LATITUDE       = 7,
    LONGITUDE      = 8,
    ALTITUDE       = 9,
    VDOP           = 10,
    HDOP           = 11,
    PDOP           = 12,
    RESIDUAL_MEAS  = 13,
    DRIFT_EST      = 14,
    VCXO_CONTROL   = 15,
    COUNT
  };
  std::shared_ptr<ISamplesGenerator> m_generators[eGeneratorID::COUNT];
  MsgClockStatus::Header m_header;
};

#endif //ClockStatusGenerator_h__
