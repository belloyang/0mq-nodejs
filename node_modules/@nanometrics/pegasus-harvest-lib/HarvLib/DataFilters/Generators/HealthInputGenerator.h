#ifndef HealthInputGenerator_h__
#define HealthInputGenerator_h__

#include "IPDBDataGenerator.h"

#include "samplers/samplers.h"
#include "gap_generators/IGapGenerator.h"

#include <DataTypes/HealthTimeSeries/MsgHealthInput.h>

#include <memory>

/**
 * Class that is used for MsgHealthInput generation
 */
class HealthInputGenerator : public IPDBDataGenerator
{
public:
  /**
   * HealthInputGenerator constructor
   * @param startTimestamp lower timestamp to start data generation from
   * @param nPackets       amount of packets to be generated
   * @param gapsGenerator  gaps generator
   * @param signalLevel    signal peak level (in fractional counts)
   * @param noiseLevel     noise RMS level (in fractional counts)
   * @param updateStep     progress update step (in [0.0, 1.0] interval where 0.0 stands for 0%, 1.0 - 100%)
   * @param logger         logger instance
   */
  HealthInputGenerator(const timestamp_t startTimestamp, const uint32_t nPackets,
    const std::shared_ptr<IGapGenerator>& gapGenerator,
    const double signalLevel, const double noiseLevel,
    const float updateStep, const std::shared_ptr<ILogger>& logger);

  /**
   * HealthInputGenerator destructor
   */
  virtual ~HealthInputGenerator() = default;

protected:
  virtual IPDBMsgObject* _generateObject(const uint32_t iteration) __OVERRIDES__(IPDBDataGenerator);

private:
  timestamp_t m_recordTimestamp;
  const PDB_sSampleRate_t m_sampleRate;
  const std::shared_ptr<IGapGenerator> m_gapGenerator;
  mem_pool<MsgHealthInput(void)> m_healthInputsMemPool;
  struct sChannelData
  {
    double signalFreqNormalized;
    std::shared_ptr<ISamplesGenerator> generator;
    uint64_t nSamplesTotal;
  } m_channelsData[PDB_eHealthInput_t::HEALTH_INPUTS_COUNT];
  MsgHealthInput::Header m_header;
};

#endif //HealthInputGenerator_h__
