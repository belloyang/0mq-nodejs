#include "GapGenerator_Random.h"

#include <Utils/pdb_utils.h>

#include <ctime>

GapGenerator_Random::GapGenerator_Random(const uint32_t minSeconds, const uint32_t maxSeconds, const float probability)
: IGapGenerator()
, m_minSecs(minSeconds)
, m_maxSecs(maxSeconds)
, m_probability(probability)
{
  __DEV_CALLSTACK_FUNC__;
  __ASSERT__(minSeconds <= maxSeconds && "invalid range for random gap generator set!");
  __ASSERT__(m_probability >= 0 && m_probability <= 1.0 && "probability should be in [0.0, 1.0] range");
  ::srand((uint32_t)::time(nullptr));
}

timediff_t GapGenerator_Random::_generateImpl(const uint32_t /*recordIndex*/) const
{
  __DEV_CALLSTACK_FUNC__;
  const int32_t randVal = ::rand();
  //Monte-Carlo probability test (0.001 probability precision)
  const float value = (randVal % 1001) / 1000.f; //generates values in [0.000; 1.000]
  if (m_probability > 0 && value <= m_probability)
  {
    const uint32_t diff = m_maxSecs - m_minSecs;
    return pdb_utils::seconds_to_nanoseconds(m_minSecs + (randVal % (diff + 1)));
  }
  //no gap
  return 0LL;
}
