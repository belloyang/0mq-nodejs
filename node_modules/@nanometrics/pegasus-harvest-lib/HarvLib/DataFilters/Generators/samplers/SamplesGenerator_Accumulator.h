#ifndef SamplesGenerator_Accumulator_h__
#define SamplesGenerator_Accumulator_h__

#include "ISamplesGenerator.h"

#include <vector>
#include <memory>

/**
 * Multi-ganged samples generator. Output is sum of output from all contained
 * generators.
 */
class SamplesGenerator_Accumulator : public ISamplesGenerator
{
public:
  /**
   * SamplesGenerator_Accumulator constructor
   */
  SamplesGenerator_Accumulator(const std::vector<std::shared_ptr<ISamplesGenerator>>& generators);
  /**
   * SamplesGenerator_Accumulator destructor
   */
  virtual ~SamplesGenerator_Accumulator() = default;
  
protected:
  virtual double _generateRawImpl(const uint64_t sampleIndex) __OVERRIDES__(ISamplesGenerator);

private:
  // internal container of samples generators to tally upon output
  const std::vector<std::shared_ptr<ISamplesGenerator>> m_generators;
};

#endif //SamplesGenerator_Accumulator_h__
