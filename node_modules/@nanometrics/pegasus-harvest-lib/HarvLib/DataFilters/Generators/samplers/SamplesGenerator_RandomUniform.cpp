#include "SamplesGenerator_RandomUniform.h"

#include <stdlib.h>
#include <chrono>

SamplesGenerator_RandomUniform::SamplesGenerator_RandomUniform(const int64_t minValue, const int64_t maxValue)
: ISamplesGenerator()
, m_min(minValue)
, m_max(maxValue)
{
  __DEV_CALLSTACK_FUNC__;
  //tss_harv::seed platform's random number generator (based on POSIX timestamp)
  uint32_t seed = static_cast<uint32_t>(std::chrono::system_clock::now().time_since_epoch().count());
  ::srand(seed);
}

double SamplesGenerator_RandomUniform::_generateRawImpl(const uint64_t /*sampleIndex*/)
{
  __DEV_CALLSTACK_FUNC__;
  //tss_harv::generate random int64_t value (the simpliest approach is to reuse int32_t randomizer)
  const int64_t rand64 = (static_cast<int64_t>(::rand()) << 32) | static_cast<int64_t>(::rand());
  const int64_t randVal = rand64 % (m_max - m_min + 1);
  //tss_Harv::normalize rand value into [min, max] range
  return (double)(m_min + randVal);
}
