#include "SamplesGenerator_RandomNormal.h"

#include <chrono>
#include <climits>

SamplesGenerator_RandomNormal::SamplesGenerator_RandomNormal(const double mean, const double stddev)
: ISamplesGenerator()
, m_enable(stddev > 0.0)
, m_generator()
, m_distribution(mean, m_enable ? stddev : std::numeric_limits<double>::epsilon()) // to comply with C++ Standard Library
{
  __DEV_CALLSTACK_FUNC__;
  // construct a trivial random generator engine from a time-based seed
  uint32_t seed = static_cast<uint32_t>( std::chrono::system_clock::now().time_since_epoch().count() );
  m_generator.seed(seed);
}

double SamplesGenerator_RandomNormal::_generateRawImpl(const uint64_t /*sampleIndex*/)
{
  __DEV_CALLSTACK_FUNC__;
  // generate random number & return
  return (m_enable ? m_distribution(m_generator) : m_distribution.mean());
}
