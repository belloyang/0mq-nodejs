#ifndef SamplesGenerator_RandomNormal_h__
#define SamplesGenerator_RandomNormal_h__

#include "ISamplesGenerator.h"
#include <random>

/**
 * This class is responsible to generate random samples with normal (Gaussian)
 * distribution with a given mean (DC offset) and standard deviation (RMS).
 */
class SamplesGenerator_RandomNormal : public ISamplesGenerator
{
public:
  /**
   * SamplesGenerator_RandomNormal constructor
   * @param mean    Mean value of random signal to generate, unit is fractional counts
   * @param stddev  Standard deviation value of random signal to generate, unit is fractional counts
   */
  SamplesGenerator_RandomNormal(const double mean, const double stddev);
  /**
   * SamplesGenerator_RandomNormal destructor
   */
  virtual ~SamplesGenerator_RandomNormal() = default;

protected:
  virtual double _generateRawImpl(const uint64_t sampleIndex) __OVERRIDES__(ISamplesGenerator);

private:
  bool m_enable; // workaround C++ Standard Library requirement in case stddev == 0
  std::mt19937 m_generator; // 32-bit Mersenne Twister pseudo-random generator
  std::normal_distribution<double> m_distribution; // random number distribution according to normal (Gaussian) distribution
};

#endif //SamplesGenerator_RandomNormal_h__
