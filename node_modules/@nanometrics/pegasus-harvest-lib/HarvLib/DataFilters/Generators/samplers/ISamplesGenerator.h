#ifndef ISamplesGenerator_h__
#define ISamplesGenerator_h__

#include "../../../harvlib_defines.h"

/**
 * Basic class for samples generators
 */
class ISamplesGenerator
{
public:
  /**
   * ISamplesGenerator destructor
   */
  virtual ~ISamplesGenerator() = default;

  /**
   * Generate sample and apply clip limits
   * @param   sampleIndex sample index
   * @return  generated sample, with clip limits applied
   *
   * NOTE:
   * Clip limits default to the sample limits of the Steim2 compression algorithm.
   */
  sample_t generateClipped(const uint64_t sampleIndex); // non-const since some children may hold state

  /**
   * Generates sample, raw/unclipped
   * @param   sampleIndex sample index
   * @return  generated sample, raw/unclipped
   */
  double generateRaw(const uint64_t sampleIndex); // non-const since some children may hold state

  /**
   * Set clip limits to match sample size in bits
   * @param   szBits sample size, bits
   * @return  none
   */
  void setClipLimits(uint32_t szBits);

  /**
   * Set clip limits from supplied values
   * @param   lower lower clip limit
   * @param   upper upper clip limit
   * @return  none
   */
  void setClipLimits(double lower, double upper);

  /**
   * Set clip limits according to the sample limits of the Steim1 compression
   * algorithm; ie. 31-bits.
   * @param   none
   * @return  none
   */
  void setClipLimits_Steim1();

  /**
   * Set clip limits according to the sample limits of the Steim2 compression
   * algorithm; ie. 29-bits.
   * @param   none
   * @return  none
   */
  void setClipLimits_Steim2();

protected:
  ISamplesGenerator();
  virtual double _generateRawImpl(const uint64_t sampleIndex) = 0;

  // clip limits
  double m_clipLower;
  double m_clipUpper;
};

#endif //ISamplesGenerator_h__
