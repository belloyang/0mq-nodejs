#include "IPDBDataGenerator.h"

#include "../Data/PDBDataDesc.h"
#include "../Data/ErrorDataDesc.h"

#include "../mem_pool.h"

#include <cmath>

IPDBDataGenerator::IPDBDataGenerator(const std::string& name, const uint32_t count, const float notificationStep,
    const std::shared_ptr<ILogger>& logger)
:  IBaseFilter(name, logger)
,  m_count(count)
,  m_notificationStep(notificationStep)
,  m_lastNotifiedProgress(0.f)
{
  __DEV_CALLSTACK_FUNC__;
}

ErrorDataDesc* IPDBDataGenerator::run(const Config* pConfig)
{
  __DEV_CALLSTACK_FUNC__;
  //tss_harv::init randomizer
  ::srand((unsigned int)::time(nullptr));
  //tss_harv::run successor (chained filter)
  if (m_successor != nullptr)
  {
    ErrorDataDesc* const pError = m_successor->run(pConfig);
    if (pError != nullptr)
      return pError;
  }

  mem_pool<PDBDataDesc(IPDBMsgObject*, sequence_number_t)> pdbPool(new mem_pool_allocator_new_init<PDBDataDesc(IPDBMsgObject*, sequence_number_t)>(), m_logger);
  pdbPool.allocate(100, nullptr, 0);

  //tss_harv::generate packets
  for (uint32_t i = 0; i < m_count; i++)
  {
    IPDBMsgObject* const pObject = this->_generateObject(i);
    if (pObject != nullptr)
    {
      PDBDataDesc* const pPDBData = pdbPool.new_object(pObject, static_cast<sequence_number_t>(i));
      //tss_harvlib::update and notify progress if needed
      {
        const float newProgress = (float)(i + 1) / (float)m_count;
        //tss_harv::check if notification step exceeds or completed (all elements processed)
        if ((::fabs(newProgress - m_lastNotifiedProgress) >= m_notificationStep) || (i == m_count - 1))
        {
          m_lastNotifiedProgress = newProgress;
          m_logger->info(__THIS_FUNC__, "%u / %u objects generated (%.2f%%)", i + 1, m_count, newProgress * 100.f);
        }
      }
      //tss_harvlib::show progress
      this->processData(pPDBData, nullptr);
    }
    else
    {
      ErrorDataDesc* const pErrorData = this->_makeError(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eHarvLibErrorCode::HARVLIB_ERROR_FILTER_PROCESS_DATA_FAILED,
        "Failed to generate PDB object");
      this->processData(pErrorData, nullptr);
    }

    //tss_harv::update
    this->update();
  }

  //tss_harv::finalize execution (no need to pass any data as it's dev operation)
  return this->finalize(nullptr);
}
