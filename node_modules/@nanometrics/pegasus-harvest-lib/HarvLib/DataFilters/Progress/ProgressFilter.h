#ifndef ProgressFilter_h__
#define ProgressFilter_h__

//tss_harv::this class is used to do summary/progress for the chain

#include "../IBaseFilter.h"

#include "../Data/PDBDataDesc.h"
#include "../Data/PSFDataDesc.h"
#include "../Data/ErrorDataDesc.h"
#include "../IProgressDelegate.h"
#include "../../Client/IClient.h"

#include <DataTypes/HarvestLog/MsgHarvestLog.h>

#include <map>

class ProgressFilter : public IBaseFilter
{
public:
  ProgressFilter(const IOperation* operation, const std::shared_ptr<IClient>& client,
    const std::shared_ptr<IProgressDelegate>& delegate,
    const std::shared_ptr<ILogger>& logger);
  virtual ~ProgressFilter() = default;

  virtual ErrorDataDesc* run(const Config* pConfig) __OVERRIDES__(IBaseFilter);
  virtual ErrorDataDesc* finalize(const sHarvestOpReport* pReport) __OVERRIDES__(IBaseFilter);

private:
  DataDescPtr _processErrorData(const DataDescPtr data, void* userData);
  DataDescPtr _processProgressData(const DataDescPtr data, void* userData);

private:
  const IOperation* m_operation;
  const std::shared_ptr<IClient> m_client;
  const std::shared_ptr<IProgressDelegate> m_progressDelegate;
  std::map<std::string, uint32_t> m_failuresCounter; //failures counter per filter {filter_name, failures_count}
  MsgHarvestLog::Header m_header;
};

#endif //ProgressFilter_h__
