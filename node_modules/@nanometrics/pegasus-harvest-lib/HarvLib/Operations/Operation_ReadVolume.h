#ifndef Operation_ReadVolume_h__
#define Operation_ReadVolume_h__

#include "IOperation.h"

#include "../DataFilters/GraphBuilder.h"
#include "../DataFilters/Processors/IProcessorDelegate.h"

/**
 * Volume reading operation.
 */
class Operation_ReadVolume : public IOperation
{
public:
  /**
   * Operation_ReadVolume constructor
   * @param libPath            PSF library path
   * @param volumeId           PDB volume id that reading should be done from
   * @param processorDelegate  data processor delegate
   */
  Operation_ReadVolume(const std::string& libPath, const uint32_t volumeId,
    const std::shared_ptr<IProcessorDelegate>& processorDelegate);
  
  /**
   * Operation_HarvestSOH destructor
   */
  virtual ~Operation_ReadVolume() = default;
  
private:
  virtual bool _executeImpl(const std::shared_ptr<IHasher>& hasher, 
      const std::shared_ptr<ILogger>& logger) __OVERRIDES__(IOperation);
  virtual bool _stopImpl() __OVERRIDES__(IOperation);

private:
  const std::string m_libPath;
  const uint32_t m_volumeId;
  const std::shared_ptr<IProcessorDelegate> m_processorDelegate;
  std::shared_ptr<IBaseFilter> m_headFilter;
};

#endif //Operation_ReadVolume_h__
