#include "Operation_HarvestData.h"

#include <PlatformUtils/PlatformUtils.h>

const uint32_t SENSOR_INPUTS_POOL_SIZE_DEFAULT = 1023;

Operation_HarvestData::Operation_HarvestData(const std::string& libPath,
  const sHarvestParams& params,
  const std::shared_ptr<IClient>& client,
  const std::shared_ptr<IProgressDelegate>& progressDelegate)
: IOperation("harvest-data")
, m_libPath(libPath)
, m_params(params)
, m_client(client)
, m_progressDelegate(progressDelegate)
{
  __DEV_CALLSTACK_FUNC__;
}

bool Operation_HarvestData::_executeImpl(const std::shared_ptr<IHasher>& hasher,
  const std::shared_ptr<ILogger>& logger)
{
  __DEV_CALLSTACK_FUNC__;
  //tss_harvlib::prepare physical disk/block device for harvesting
  std::string libPath = PlatformUtils::getInstance()->fixDevicePath(m_libPath);
  libPath = PlatformUtils::getInstance()->mapLogicalPathToPhysical(libPath);
  PlatformUtils::getInstance()->unmountAll(libPath);

  //tss_harvlib::create PSF library
  std::shared_ptr<PSFLibrary> pLibrary(PSFLibrary::create(libPath, hasher, logger, true));
  if (pLibrary == nullptr || !pLibrary->restore())
  {
    logger->error(__THIS_FUNC__, eErrorCategory::ERROR_CATEGORY_LIBRARY, eHarvLibErrorCode::HARVLIB_ERROR_OPERATION_FAILED,
      "'%s' is not a PSF library or doesn't exist. Use 'format' command to create it or 'list' to see all PSF devices available",
      libPath.c_str());
    return false;
  }

  //tss_harvlib::build chain to harvest sensor input data (packets)
  GraphBuilder graphBuilder(logger);
  //tss_harvlib::build sensor input harvesting chain
  m_headFilter = graphBuilder.buildSensorInputHaverstingChain(this, pLibrary, m_params,
    SENSOR_INPUTS_POOL_SIZE_DEFAULT, 
    m_client, m_progressDelegate);
  if (m_headFilter != nullptr)
  {
    m_headFilter->run(nullptr);
    return true;
  }

  return false;
}

bool Operation_HarvestData::_stopImpl()
{
  __DEV_CALLSTACK_FUNC__;
  if (m_headFilter != nullptr) {
    m_headFilter->requestStop();
  }
  return true;
}
