#ifndef IOperation_h__
#define IOperation_h__

#include "../harvlib_defines.h"

#include <Hasher/IHasher.h>
#include <Logger/ILogger.h>

#include <string>
#include <memory>

/**
 * Basic IOperation class. Exposes an interface to the operations that could be done over digitizer
 */
class IOperation
{
public:
  /**
   * Operation constructor
   * @param name  operation name
   */
  IOperation(const std::string& name);
  
  /**
   * Operation destructor
   */
  virtual ~IOperation() = default;

  /**
   * Operation name getter
   * @return  operation name
   */
  FORCE_INLINE const std::string& getName() const { return m_name; }
  
  /**
   * Executes operation
   * @param hasher    hasher that will be used during execution process
   * @param logger    logger that will be used during execution process
   * @return          true on success, false - otherwise
   */
  bool execute(const std::shared_ptr<IHasher>& hasher,
      const std::shared_ptr<ILogger>& logger);

  /**
   * Executes operation
   * @return          true on success (operation stopped), false - otherwise (operation cannot be stopped)
   */
  bool stop();
  
protected:
  virtual bool _executeImpl(const std::shared_ptr<IHasher>& hasher,
      const std::shared_ptr<ILogger>& logger) = 0;
  virtual bool _stopImpl() = 0;

protected:
  const std::string m_name; //! operation name
};

#endif //IOperation_h__
