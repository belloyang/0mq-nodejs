#ifndef Operation_GetVolumeInfo_h__
#define Operation_GetVolumeInfo_h__

#include "IOperation.h"

#include <Library/PSFSection.h>

#include <vector>

/**
 * Volume Info operation. Provides the way to get an information about specific volume at PSF library.
 */
class Operation_GetVolumeInfo : public IOperation
{
public:
  class IDelegate
  {
  public:
    virtual ~IDelegate() {}
    virtual void onInfoLoaded(IOperation* pOperation, const sVolumeInfo& info) = 0;
    virtual void onSectionLoaded(IOperation* pOperation, const uint32_t sectionIndex, const PSFSection* pSection) = 0;
    virtual void onCompleted(IOperation* pOperation, const eOperationStatus status) = 0;
  };

  /**
   * Operation_GetVolumeInfo constructor
   * @param libPath           PSF library path
   * @param volumeId          volume ID
   * @param nSectionsToLoad   amount of sections to load
   * @param delegate          delegate to handle operation process
   */
  Operation_GetVolumeInfo(const std::string& libPath, const uint32_t volumeId, const uint32_t nSectionsToLoad,
    const std::shared_ptr<IDelegate>& delegate);
  
  /**
   * Operation_GetVolumeInfo destructor
   */
  virtual ~Operation_GetVolumeInfo() = default;
  
private:
  virtual bool _executeImpl(const std::shared_ptr<IHasher>& hasher, 
      const std::shared_ptr<ILogger>& logger) __OVERRIDES__(IOperation);
  virtual bool _stopImpl() __OVERRIDES__(IOperation);
  
private:
  const std::string m_libPath;
  const uint32_t m_volumeId;
  const uint32_t m_nSectionsToLoad;
  const std::shared_ptr<IDelegate> m_delegate;
};

#endif //Operation_GetVolumeInfo_h__
