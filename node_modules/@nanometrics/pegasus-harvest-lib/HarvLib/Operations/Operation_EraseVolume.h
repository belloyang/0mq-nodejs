#ifndef Operation_EraseVolume_h__
#define Operation_EraseVolume_h__

#include "IOperation.h"

/**
 * Volume erase operation. Erases all the data
 */
class Operation_EraseVolume : public IOperation
{
public:
  class IDelegate
  {
  public:
    virtual ~IDelegate() {}
    virtual void onCompleted(IOperation* pOperation, const eOperationStatus status) = 0;
  };

  /**
   * Operation_EraseVolume constructor
   * @param libPath           PSF library path
   * @param volumeId          volume ID
   * @param delegate          delegate to handle operation process
   */
  Operation_EraseVolume(const std::string& libPath, const uint32_t volumeId, const std::shared_ptr<IDelegate>& delegate);
  
  /**
   * Operation_EraseVolume destructor
   */
  virtual ~Operation_EraseVolume() = default;
  
private:
  virtual bool _executeImpl(const std::shared_ptr<IHasher>& hasher, 
      const std::shared_ptr<ILogger>& logger) __OVERRIDES__(IOperation);
  virtual bool _stopImpl() __OVERRIDES__(IOperation);
  
private:
  const std::string m_libPath;
  const uint32_t m_volumeId;
  const std::shared_ptr<IDelegate> m_delegate;
};

#endif //Operation_EraseVolume_h__
