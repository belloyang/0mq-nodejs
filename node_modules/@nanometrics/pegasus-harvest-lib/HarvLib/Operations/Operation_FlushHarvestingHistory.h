#ifndef Operation_FlushHarvestingHistory_h__
#define Operation_FlushHarvestingHistory_h__

#include "IOperation.h"

#include <DataTypes/HarvestLog/MsgHarvestLog.h>

#include <vector>

/**
 * Data harvesting operation.
 */
class Operation_FlushHarvestingHistory : public IOperation
{
public:
  class IDelegate
  {
  public:
    virtual ~IDelegate() {}
    virtual void onHistoryWritten(IOperation* pOperation, const MsgHarvestLog::Header& header) = 0;
    virtual void onCompleted(IOperation* pOperation, const eOperationStatus status) = 0;
  };

  /**
   * Operation_FlushHarvestingHistory constructor
   * @param libPath     PSF library path
   * @param history		harvesting history headers
   * @param delegate    delegate to handle operation process
   */
  Operation_FlushHarvestingHistory(const std::string& libPath, const std::vector<MsgHarvestLog::Header>& history,
		  const std::shared_ptr<IDelegate>& delegate);
  
  /**
   * Operation_FlushHarvestingHistory destructor
   */
  virtual ~Operation_FlushHarvestingHistory() = default;
  
private:
  virtual bool _executeImpl(const std::shared_ptr<IHasher>& hasher, 
      const std::shared_ptr<ILogger>& logger) __OVERRIDES__(IOperation);
  virtual bool _stopImpl() __OVERRIDES__(IOperation);
  
private:
  const std::string m_libPath;
  const std::vector<MsgHarvestLog::Header> m_history;
  const std::shared_ptr<IDelegate> m_delegate;
};

#endif //Operation_FlushHarvestingHistory_h__
