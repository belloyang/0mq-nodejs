#ifndef JSONSerializer_h__
#define JSONSerializer_h__

#include "json_utils.h"
#include "IJSONTransformer.h"

#include "../harvlib_defines.h"
#include <Library/PSFDataElement.h>
#include <DataTypes/IPDBMsgObject.h>

#include <func_ptr.h>
#include <map>
#include <memory>

class JSONSerializer
{
public:
  JSONSerializer(const std::shared_ptr<IJSONTransformer>& transformer);
  virtual ~JSONSerializer() = default;

  rapidjson::Value serialize(const PSFDataElement* pDataElement);
  rapidjson::Value serialize(const IPDBMsgObject* object, const sequence_number_t sequenceNumber);

private:
  // helpers
  rapidjson::Value _serializeIndex(const PDB_sVolumeRefIndex_t& index);

  // serializer handlers
  bool MsgForensicLogV0_Handler(const void* data, rapidjson::Value& output);
  bool MsgDigitizerStartV0_Handler(const void* data, rapidjson::Value& output);
  bool MsgObsSyncV0_Handler(const void* data, rapidjson::Value& output);
  bool MsgHarvestLogV0_Handler(const void* data, rapidjson::Value& output);
  bool MsgOpaqueDataV0_Handler(const void* data, rapidjson::Value& output);
  bool MsgBleControlV0_Handler(const void* data, rapidjson::Value& output);
  bool MsgGnssControlV0_Handler(const void* data, rapidjson::Value& output);

private:
  const std::shared_ptr<IJSONTransformer> m_transformer;
  typedef func_ptr<bool(const void*, rapidjson::Value&)> Handler;
  const std::map<uint32_t, Handler> m_handlers;
  rapidjson::MemoryPoolAllocator<> m_allocator;
};

#endif //JSONSerializer_h__
