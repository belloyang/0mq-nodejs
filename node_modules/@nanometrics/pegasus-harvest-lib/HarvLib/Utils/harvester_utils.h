#ifndef harvester_utils_h__
#define harvester_utils_h__

#include "../harvlib_defines.h"

#include <limits>
#include <cmath>

namespace harvester_utils
{
  template <typename TIn, typename TOut=TIn>
  FORCE_INLINE TOut clamp(const TIn value, const TOut min, const TOut max)
  {
    __DEV_CALLSTACK_FUNC__;
    if (value < (TIn)min)
      return (TOut)min;

    if (value > (TIn)max)
      return (TOut)max;

    return (TOut)value;
  }

  template <typename TOut, typename TIn>
  FORCE_INLINE TOut clamp(const TIn value)
  {
    __DEV_CALLSTACK_FUNC__;
    if (value < (TIn)(std::numeric_limits<TOut>::min)())
      return (std::numeric_limits<TOut>::min)();

    if (value > (TIn)(std::numeric_limits<TOut>::max)())
      return (std::numeric_limits<TOut>::max)();

    return (TOut)value;
  }

  /*
   * Relects timestamp to slice index with specific duration (lower bound is inclusive, upper bound - exclusive)
   * E.i: slice K-th ranges -> [sliceLengthNs * K, sliceLengthNs * (K + 1)). This formula calculates K value for give timestamp.
   */
  FORCE_INLINE int32_t get_slice_index(const timestamp_t timestamp, const timediff_t sliceLengthNs)
  {
    __DEV_CALLSTACK_FUNC__;
    if (timestamp < 0)
      return -static_cast<int32_t>((-timestamp - 1) / sliceLengthNs) - 1; //reflect negative timestamps on negative indices (-1 to shift '-0' reflection)

    return static_cast<int32_t>((timestamp) / sliceLengthNs);
  }

  uint8_t map_media_type_to_mseed_encoding(const PDB_eMediaType_t mediaType);
}

#endif //harvester_utils_h__
