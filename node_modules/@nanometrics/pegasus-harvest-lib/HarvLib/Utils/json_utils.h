#ifndef json_utils_h__
#define json_utils_h__

#include "../../shared_defines.h"

#include "../external/rapidjson-1.1.0/document.h"

#include <string>

namespace json_utils
{
  /**
   * Creates JSON string reference. NOTE!: result only refers to input string, so it becomes invalid as soon as underlying string is deallocated!
   * @param s string to create string reference to
   * @return returns JSON string reference
   */
  rapidjson::GenericStringRef<char> str_ref(const std::string& s);
  rapidjson::GenericStringRef<char> str_ref(const char* s);
  rapidjson::GenericStringRef<char> str_ref(const char* s, const size_t len);
  rapidjson::GenericStringRef<char> str_ref_s(const char* s, const size_t maxLen);

  /**
   * Creates JSON-object to keep the string. This function copies string data to it's own buffer (maintained by allocator) using ::memcpy, so
   * it allows to pass any arbitrary data though JSON string object. No need to worry about null-termination symbol or any other special symbols
   * @param s         string to create string reference to
   * @param allocator JSON allocator to be used to store string copy
   * @return returns JSON object that represent string
   */
  rapidjson::Value str(const std::string& s, rapidjson::MemoryPoolAllocator<>& allocator);
  rapidjson::Value str(const char* s, rapidjson::MemoryPoolAllocator<>& allocator);
  rapidjson::Value str(const char* s, const size_t len, rapidjson::MemoryPoolAllocator<>& allocator);
  rapidjson::Value str_s(const char* s, const size_t maxLen, rapidjson::MemoryPoolAllocator<>& allocator);
  
  /**
   * Converts JSON object to string
   * @param json json object to convert
   * @param pretty specifies if JSON string should be 'pretty-formatted'
   * @return JSON-formated string
   */
  std::string to_string(const rapidjson::Value& json, const bool pretty = false);

  /**
   * Encodes bytes buffer into JSON string using base64 algorithm
   * @param buffer  buffer to encode
   * @param length  buffer length
   * @return base64 encoded string
   */
  std::string base64_encode(const char* buffer, const uint32_t length);
}

#endif //json_utils_h__
