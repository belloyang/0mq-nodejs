#include "json_utils.h"

#include "../external/rapidjson-1.1.0/writer.h"
#include "../external/rapidjson-1.1.0/prettywriter.h"

#include <cstring>

namespace json_utils
{
  rapidjson::GenericStringRef<char> str_ref(const std::string& s)
  {
    __DEV_CALLSTACK_FUNC__;
    return rapidjson::StringRef(s.c_str(), s.length());
  }
  rapidjson::GenericStringRef<char> str_ref(const char* s)
  {
    __DEV_CALLSTACK_FUNC__;
    return rapidjson::StringRef(s, ::strlen(s));
  }
  rapidjson::GenericStringRef<char> str_ref(const char* s, const size_t len)
  {
    __DEV_CALLSTACK_FUNC__;
    return rapidjson::StringRef(s, len);
  }
  rapidjson::GenericStringRef<char> str_ref_s(const char* s, const size_t maxLen)
  {
    __DEV_CALLSTACK_FUNC__;
    const size_t realLen = ::strnlen(s, maxLen);
    return rapidjson::StringRef(s, realLen);
  }

  rapidjson::Value str(const std::string& s, rapidjson::MemoryPoolAllocator<>& allocator)
  {
    __DEV_CALLSTACK_FUNC__;
    rapidjson::Value ret(s.c_str(), s.length(), allocator);
    return ret;
  }
  rapidjson::Value str(const char* s, rapidjson::MemoryPoolAllocator<>& allocator)
  {
    __DEV_CALLSTACK_FUNC__;
    rapidjson::Value ret(s, ::strlen(s), allocator);
    return ret;
  }
  rapidjson::Value str(const char* s, const size_t len, rapidjson::MemoryPoolAllocator<>& allocator)
  {
    __DEV_CALLSTACK_FUNC__;
    rapidjson::Value ret(s, len, allocator);
    return ret;
  }
  rapidjson::Value str_s(const char* s, const size_t maxLen, rapidjson::MemoryPoolAllocator<>& allocator)
  {
    __DEV_CALLSTACK_FUNC__;
    const size_t realLen = ::strnlen(s, maxLen);
    rapidjson::Value ret(s, realLen, allocator);
    return ret;
  }

  std::string to_string(const rapidjson::Value& json, const bool pretty /*= false*/)
  {
    __DEV_CALLSTACK_FUNC__;
    if (json.IsNull() == false)
    {
      rapidjson::StringBuffer buffer;
      if (pretty)
      {
        rapidjson::PrettyWriter<rapidjson::StringBuffer> writer(buffer);
        json.Accept(writer);
      }
      else
      {
        rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
        json.Accept(writer);       
      }
      return buffer.GetString();
    }
    return std::string();
  }

  std::string base64_encode(const char* buffer, const uint32_t length)
  {
    __DEV_CALLSTACK_FUNC__;
    // https://gist.github.com/tomykaira/f0fd86b6c73063283afe550bc5d77594 used as a reference
    static constexpr char EncodingTable[] = {
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
      'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
      'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
      'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
      'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
      'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
      'w', 'x', 'y', 'z', '0', '1', '2', '3',
      '4', '5', '6', '7', '8', '9', '+', '/'
    };

    size_t in_len = length;
    size_t out_len = 4 * ((in_len + 2) / 3);
    std::string ret(out_len, '\0');
    size_t i;
    char *p = const_cast<char*>(ret.c_str());

    for (i = 0; i < in_len - 2; i += 3)
    {
      *p++ = EncodingTable[ static_cast<uint32_t>(buffer[i] >> 2) & 0x3F];
      *p++ = EncodingTable[(static_cast<uint32_t>(buffer[i]       & 0x3) << 4) | (static_cast<uint32_t>(buffer[i + 1] & 0xF0) >> 4)];
      *p++ = EncodingTable[(static_cast<uint32_t>(buffer[i + 1]   & 0xF) << 2) | (static_cast<uint32_t>(buffer[i + 2] & 0xC0) >> 6)];
      *p++ = EncodingTable[ static_cast<uint32_t>(buffer[i + 2]   & 0x3F)];
    }
    if (i < in_len)
    {
      *p++ = EncodingTable[static_cast<uint32_t>(buffer[i] >> 2) & 0x3F];
      if (i == (in_len - 1))
      {
        *p++ = EncodingTable[(static_cast<uint32_t>(buffer[i] & 0x3) << 4)];
        *p++ = '=';
      }
      else
      {
        *p++ = EncodingTable[(static_cast<uint32_t>(buffer[i]     & 0x3) << 4) | (static_cast<uint32_t>(buffer[i + 1] & 0xF0) >> 4)];
        *p++ = EncodingTable[(static_cast<uint32_t>(buffer[i + 1] & 0xF) << 2)];
      }
      *p++ = '=';
    }

    return ret;
  }

} //namespace
