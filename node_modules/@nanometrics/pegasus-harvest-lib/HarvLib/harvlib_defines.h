#ifndef harvlib_defines_h__
#define harvlib_defines_h__

#include "../shared_defines.h"
#include "../version.h"

#include <libio_defines.h>
#include <psflib_defines.h>
#include <pdblib_defines.h>

#include <string>

#if defined(DEV_PLATFORM_WIN32)
#include "platform/harvlib_win32_defines.h"
#elif defined(DEV_PLATFORM_LINUX)
#include "platform/harvlib_linux_defines.h"
#elif defined(DEV_PLATFORM_MACOS)
#include "platform/harvlib_macos_defines.h"
#endif

typedef enum : uint32_t
{
  HARVLIB_ERROR_CODE_BASE = 0x30000000, /*!< base error code for Harv library*/

  HARVLIB_ERROR_CODE_BASE_FILTER = HARVLIB_ERROR_CODE_BASE + 0x00001000, /*!< base error code for data filters */
  HARVLIB_ERROR_FILTER_INIT_FAILED         = HARVLIB_ERROR_CODE_BASE_FILTER + 0x00000001, /*!< filter initialization failed */
  HARVLIB_ERROR_FILTER_PROCESS_DATA_FAILED = HARVLIB_ERROR_CODE_BASE_FILTER + 0x00000002, /*!< filter failed to process data */
  HARVLIB_ERROR_FILTER_FINALIZE_FAILED     = HARVLIB_ERROR_CODE_BASE_FILTER + 0x00000003, /*!< filter finalization failed */
  
  HARVLIB_ERROR_CODE_BASE_OPERATION = HARVLIB_ERROR_CODE_BASE + 0x00002000, /*!< base error code for operations */
  HARVLIB_ERROR_OPERATION_FAILED = HARVLIB_ERROR_CODE_BASE_OPERATION + 0x00000001, /*!< operation failed */

  HARVLIB_ERROR_CODE_BASE_VOLUME = HARVLIB_ERROR_CODE_BASE + 0x00003000, /*!< base error code for PSF volumes */
  HARVLIB_ERROR_VOLUME_NOT_FOUND = HARVLIB_ERROR_CODE_BASE_VOLUME + 0x00000001, /*!< volume not found */

  HARVLIB_ERROR_CODE_BASE_DATA = HARVLIB_ERROR_CODE_BASE + 0x00004000, /*!< base error code for different data */
  HARVLIB_ERROR_INVALID_MESSAGE_TYPE = HARVLIB_ERROR_CODE_BASE_DATA + 0x00000001, /*!< invalid PDB message type supplied */
  HARVLIB_ERROR_INVALID_DATA_TYPE    = HARVLIB_ERROR_CODE_BASE_DATA + 0x00000002, /*!< invalid data secriptor type supplied */
  HARVLIB_ERROR_INVALID_MNEMONIC     = HARVLIB_ERROR_CODE_BASE_DATA + 0x00000003, /*!< invalid mnemonic supplied */

  HARVLIB_ERROR_CODE_BASE_COMPRESSION_DECOMPRESSION = HARVLIB_ERROR_CODE_BASE + 0x00005000, /*!< base error code for data compression/decompression */
  HARVLIB_ERROR_STEIM_DECOMPRESSION  = HARVLIB_ERROR_CODE_BASE_COMPRESSION_DECOMPRESSION + 0x00000001, /*!< STEIM1/2 decompression failed */

  HARVLIB_ERROR_CODE_BASE_MEMORY = HARVLIB_ERROR_CODE_BASE + 0x00006000, /*!< base error code for memory errors */
  HARVLIB_MEMORY_ALLOCATION_FAILED = HARVLIB_ERROR_CODE_BASE_MEMORY + 0x00000001, /*!< memory allocation failed */
} eHarvLibErrorCode;

//! sample typedef (we are limited to 32bits samples)
typedef int32_t sample_t;
typedef int32_t sample_diff_t;

/**
 * Sequence range structure
 */
struct sSequenceRange
{
  sequence_number_t lower = PSF_SEQUENCE_NUMBER_INVALID; //! lower sequence number
  sequence_number_t upper = PSF_SEQUENCE_NUMBER_INVALID; //! upper sequence number
};

/**
 * Timespan structure
 */
struct sTimespan
{
  timestamp_t lower = 0LL; //! lower timestamp (nanoseconds)
  timestamp_t upper = 0LL; //! upper timestamp (nanoseconds)
  bool valid = false; //! determines if timespan is valid
};

/**
 * Error structure
 */
struct sHarvestError
{
  std::string reporter;
  uint32_t code;
};

/**
 * Operation status enumeration
 */
typedef enum
{
  OP_STATUS_COMPLETED, /*!< operation completed successfully */
  OP_STATUS_ABORTED, /*!< operation aborted */
  OP_STATUS_FAILED, /*!< operation stopped due to failure */
} eOperationStatus;

/**
 * Operation progress structure
 */
struct sHarvestProgress
{
  sTimespan timeRange; //! processed time range
  float progress = 0.f; //! progress (0.0 - 1.0)
  uint32_t durationMs = 0; //! operation duration in milliseconds
  uint32_t nFilesGenerated = 0; //! number of files generated
  uint32_t nElementsTotal = 0; //! total number of elements to process
  uint32_t nElementsProcessed = 0; //! total number of elements processed
  uint64_t nBytesProcessed = 0UL; //! total bytes processed
  float speedMiBpSec = 0.f; //! speed (MiB/s)
};

/**
 * Operation Report structure. Contains an information needed to finalize an operation
 */
struct sHarvestOpReport
{
  timestamp_t finishTime; //! operation finish timestamp
  eOperationStatus status; //! operation status
};

/**
 * Harvesting parameters structure. Contains all the parameters required for harvesting operation.
 */
struct sHarvestParams  
{
  struct sBoundary
  {
    timestamp_t time = 0ULL; //! inclusive for lower & exclusive for upper time bound (timestamp) for harvesting
    sequence_number_t sequence_number = PSF_SEQUENCE_NUMBER_INVALID; // inclusive for both lower & upper bounds
  } lower, upper;
  uint32_t nPagesMax = (uint32_t)-1; //! maximum amount of pages to harvest
  uint32_t nHoursPerFile = 1; //! per file duration (in hours)
  std::string outputPattern = ""; //! pattern for output files paths
  std::string outputDir = ""; //! output root directory
};

#endif //harvlib_defines_h__
